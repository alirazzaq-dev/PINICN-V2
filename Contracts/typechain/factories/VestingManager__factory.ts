/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  VestingManager,
  VestingManagerInterface,
} from "../VestingManager";

const _abi = [
  {
    inputs: [],
    name: "contributorCycles",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "contributorVestingRecord",
    outputs: [
      {
        internalType: "uint256",
        name: "cycle",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "releaseTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokensPC",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "percentageToRelease",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "teamVestingRecord",
    outputs: [
      {
        internalType: "uint256",
        name: "cycle",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "releaseTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokensPC",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "percentageToRelease",
        type: "uint256",
      },
      {
        internalType: "enum VestingManager.ReleaseStatus",
        name: "releaseStatus",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "temaVestingCycles",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526000600155600060035534801561001a57600080fd5b506101b78061002a6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632fff7af514610051578063564e1cc41461006d5780639e8f4d65146100be578063ff3a314114610115575b600080fd5b61005a60015481565b6040519081526020015b60405180910390f35b6100ad61007b36600461011e565b600060208190529081526040902080546001820154600283015460038401546004909401549293919290919060ff1685565b604051610064959493929190610136565b6100f56100cc36600461011e565b600260208190526000918252604090912080546001820154928201546003909201549092919084565b604080519485526020850193909352918301526060820152608001610064565b61005a60035481565b60006020828403121561012f578081fd5b5035919050565b600060a0820190508682528560208301528460408301528360608301526002831061017157634e487b7160e01b600052602160045260246000fd5b826080830152969550505050505056fea2646970667358221220e8d7dfef2477a964466c9547103b84491e70ebccb2ed9dc1362bfa73ac406c7c64736f6c63430008040033";

export class VestingManager__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<VestingManager> {
    return super.deploy(overrides || {}) as Promise<VestingManager>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): VestingManager {
    return super.attach(address) as VestingManager;
  }
  connect(signer: Signer): VestingManager__factory {
    return super.connect(signer) as VestingManager__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VestingManagerInterface {
    return new utils.Interface(_abi) as VestingManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VestingManager {
    return new Contract(address, _abi, signerOrProvider) as VestingManager;
  }
}
