/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LaunchpadInterface extends ethers.utils.Interface {
  functions: {
    "LPrecord(uint256)": FunctionFragment;
    "WBNBAddr()": FunctionFragment;
    "burnOrWithdrawTokens(uint256,uint8)": FunctionFragment;
    "buyTokensOnPresale(uint256,uint256)": FunctionFragment;
    "claimTokensOrARefund(uint256)": FunctionFragment;
    "count()": FunctionFragment;
    "createPresale(uint8,address,address,uint8,uint256,uint256,uint256,(uint256,uint256,uint256),(uint256,uint256,uint256))": FunctionFragment;
    "devAddr()": FunctionFragment;
    "endPresale(uint256)": FunctionFragment;
    "internalData(uint256)": FunctionFragment;
    "isUserWhitelistedToStartProject(address)": FunctionFragment;
    "lockerFactoryAddr()": FunctionFragment;
    "owner()": FunctionFragment;
    "pancakeSwapFactoryAddr()": FunctionFragment;
    "pancakeSwapRouterAddr()": FunctionFragment;
    "participant(uint256,address)": FunctionFragment;
    "presaleInfo(uint256)": FunctionFragment;
    "presaleParticipationCriteria(uint256)": FunctionFragment;
    "presalectCounts(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "salesFeeInPercent()": FunctionFragment;
    "salesFeeInPercentForAProject(uint256)": FunctionFragment;
    "teamAddr()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateFees(uint256,uint8)": FunctionFragment;
    "updateSalesFeeInPercentForAProject(uint256,uint8)": FunctionFragment;
    "upfrontfee()": FunctionFragment;
    "whiteListUsersToBuyTokens(uint256,address)": FunctionFragment;
    "whiteListUsersToStartProject(address)": FunctionFragment;
    "withdrawBNBs()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "LPrecord",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "WBNBAddr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "burnOrWithdrawTokens",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTokensOnPresale",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokensOrARefund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "count", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createPresale",
    values: [
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      {
        startedAt: BigNumberish;
        expiredAt: BigNumberish;
        lpLockupTime: BigNumberish;
      },
      {
        minTokensReq: BigNumberish;
        maxTokensReq: BigNumberish;
        softCap: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "devAddr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "endPresale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "internalData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserWhitelistedToStartProject",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockerFactoryAddr",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pancakeSwapFactoryAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pancakeSwapRouterAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "participant",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "presaleInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "presaleParticipationCriteria",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "presalectCounts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "salesFeeInPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "salesFeeInPercentForAProject",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "teamAddr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFees",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSalesFeeInPercentForAProject",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upfrontfee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whiteListUsersToBuyTokens",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "whiteListUsersToStartProject",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBNBs",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "LPrecord", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WBNBAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnOrWithdrawTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyTokensOnPresale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTokensOrARefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createPresale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "devAddr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endPresale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "internalData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserWhitelistedToStartProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockerFactoryAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pancakeSwapFactoryAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pancakeSwapRouterAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "participant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "presaleInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "presaleParticipationCriteria",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "presalectCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "salesFeeInPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "salesFeeInPercentForAProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "teamAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateSalesFeeInPercentForAProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upfrontfee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whiteListUsersToBuyTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whiteListUsersToStartProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBNBs",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class Launchpad extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LaunchpadInterface;

  functions: {
    LPrecord(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    WBNBAddr(overrides?: CallOverrides): Promise<[string]>;

    burnOrWithdrawTokens(
      _id: BigNumberish,
      _withdrawtype: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyTokensOnPresale(
      _id: BigNumberish,
      _numOfTokensRequested: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimTokensOrARefund(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    count(overrides?: CallOverrides): Promise<[BigNumber]>;

    createPresale(
      _presaleType: BigNumberish,
      _preSaleToken: string,
      _criteriaTokenAddr: string,
      _reservedTokensPCForLP: BigNumberish,
      _tokensForSale: BigNumberish,
      _priceOfEachToken: BigNumberish,
      _minTokensForParticipation: BigNumberish,
      _presaleTimes: {
        startedAt: BigNumberish;
        expiredAt: BigNumberish;
        lpLockupTime: BigNumberish;
      },
      _reqestedTokens: {
        minTokensReq: BigNumberish;
        maxTokensReq: BigNumberish;
        softCap: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    devAddr(overrides?: CallOverrides): Promise<[string]>;

    endPresale(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    internalData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        totalTokensSold: BigNumber;
        revenueFromPresale: BigNumber;
        tokensAddedToLiquidity: BigNumber;
        extraTokens: BigNumber;
        poolShareBNB: BigNumber;
        devTeamShareBNB: BigNumber;
        ownersShareBNB: BigNumber;
        totalLP: BigNumber;
        lockerID: BigNumber;
      }
    >;

    isUserWhitelistedToStartProject(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lockerFactoryAddr(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pancakeSwapFactoryAddr(overrides?: CallOverrides): Promise<[string]>;

    pancakeSwapRouterAddr(overrides?: CallOverrides): Promise<[string]>;

    participant(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        value: BigNumber;
        tokens: BigNumber;
        isWhiteListed: boolean;
      }
    >;

    presaleInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        number
      ] & {
        typeOfPresale: number;
        preSaleToken: string;
        presaleOwnerAddr: string;
        price: BigNumber;
        tokensForSale: BigNumber;
        reservedTokensPCForLP: BigNumber;
        remainingTokensForSale: BigNumber;
        accumulatedBalance: BigNumber;
        pairAddress: string;
        preSaleStatus: number;
      }
    >;

    presaleParticipationCriteria(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        [BigNumber, BigNumber, BigNumber] & {
          minTokensReq: BigNumber;
          maxTokensReq: BigNumber;
          softCap: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber] & {
          startedAt: BigNumber;
          expiredAt: BigNumber;
          lpLockupTime: BigNumber;
        }
      ] & {
        criteriaToken: string;
        minTokensForParticipation: BigNumber;
        reqestedTokens: [BigNumber, BigNumber, BigNumber] & {
          minTokensReq: BigNumber;
          maxTokensReq: BigNumber;
          softCap: BigNumber;
        };
        presaleTimes: [BigNumber, BigNumber, BigNumber] & {
          startedAt: BigNumber;
          expiredAt: BigNumber;
          lpLockupTime: BigNumber;
        };
      }
    >;

    presalectCounts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        participantsCount: BigNumber;
        claimsCount: BigNumber;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    salesFeeInPercent(overrides?: CallOverrides): Promise<[number]>;

    salesFeeInPercentForAProject(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    teamAddr(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFees(
      _upfrontFee: BigNumberish,
      _salesFeeInPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSalesFeeInPercentForAProject(
      _id: BigNumberish,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upfrontfee(overrides?: CallOverrides): Promise<[BigNumber]>;

    whiteListUsersToBuyTokens(
      _id: BigNumberish,
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whiteListUsersToStartProject(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawBNBs(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  LPrecord(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  WBNBAddr(overrides?: CallOverrides): Promise<string>;

  burnOrWithdrawTokens(
    _id: BigNumberish,
    _withdrawtype: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyTokensOnPresale(
    _id: BigNumberish,
    _numOfTokensRequested: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimTokensOrARefund(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  count(overrides?: CallOverrides): Promise<BigNumber>;

  createPresale(
    _presaleType: BigNumberish,
    _preSaleToken: string,
    _criteriaTokenAddr: string,
    _reservedTokensPCForLP: BigNumberish,
    _tokensForSale: BigNumberish,
    _priceOfEachToken: BigNumberish,
    _minTokensForParticipation: BigNumberish,
    _presaleTimes: {
      startedAt: BigNumberish;
      expiredAt: BigNumberish;
      lpLockupTime: BigNumberish;
    },
    _reqestedTokens: {
      minTokensReq: BigNumberish;
      maxTokensReq: BigNumberish;
      softCap: BigNumberish;
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  devAddr(overrides?: CallOverrides): Promise<string>;

  endPresale(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  internalData(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      totalTokensSold: BigNumber;
      revenueFromPresale: BigNumber;
      tokensAddedToLiquidity: BigNumber;
      extraTokens: BigNumber;
      poolShareBNB: BigNumber;
      devTeamShareBNB: BigNumber;
      ownersShareBNB: BigNumber;
      totalLP: BigNumber;
      lockerID: BigNumber;
    }
  >;

  isUserWhitelistedToStartProject(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lockerFactoryAddr(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pancakeSwapFactoryAddr(overrides?: CallOverrides): Promise<string>;

  pancakeSwapRouterAddr(overrides?: CallOverrides): Promise<string>;

  participant(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      value: BigNumber;
      tokens: BigNumber;
      isWhiteListed: boolean;
    }
  >;

  presaleInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      number
    ] & {
      typeOfPresale: number;
      preSaleToken: string;
      presaleOwnerAddr: string;
      price: BigNumber;
      tokensForSale: BigNumber;
      reservedTokensPCForLP: BigNumber;
      remainingTokensForSale: BigNumber;
      accumulatedBalance: BigNumber;
      pairAddress: string;
      preSaleStatus: number;
    }
  >;

  presaleParticipationCriteria(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      [BigNumber, BigNumber, BigNumber] & {
        minTokensReq: BigNumber;
        maxTokensReq: BigNumber;
        softCap: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber] & {
        startedAt: BigNumber;
        expiredAt: BigNumber;
        lpLockupTime: BigNumber;
      }
    ] & {
      criteriaToken: string;
      minTokensForParticipation: BigNumber;
      reqestedTokens: [BigNumber, BigNumber, BigNumber] & {
        minTokensReq: BigNumber;
        maxTokensReq: BigNumber;
        softCap: BigNumber;
      };
      presaleTimes: [BigNumber, BigNumber, BigNumber] & {
        startedAt: BigNumber;
        expiredAt: BigNumber;
        lpLockupTime: BigNumber;
      };
    }
  >;

  presalectCounts(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      participantsCount: BigNumber;
      claimsCount: BigNumber;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  salesFeeInPercent(overrides?: CallOverrides): Promise<number>;

  salesFeeInPercentForAProject(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  teamAddr(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFees(
    _upfrontFee: BigNumberish,
    _salesFeeInPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSalesFeeInPercentForAProject(
    _id: BigNumberish,
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upfrontfee(overrides?: CallOverrides): Promise<BigNumber>;

  whiteListUsersToBuyTokens(
    _id: BigNumberish,
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whiteListUsersToStartProject(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawBNBs(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    LPrecord(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    WBNBAddr(overrides?: CallOverrides): Promise<string>;

    burnOrWithdrawTokens(
      _id: BigNumberish,
      _withdrawtype: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyTokensOnPresale(
      _id: BigNumberish,
      _numOfTokensRequested: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimTokensOrARefund(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    count(overrides?: CallOverrides): Promise<BigNumber>;

    createPresale(
      _presaleType: BigNumberish,
      _preSaleToken: string,
      _criteriaTokenAddr: string,
      _reservedTokensPCForLP: BigNumberish,
      _tokensForSale: BigNumberish,
      _priceOfEachToken: BigNumberish,
      _minTokensForParticipation: BigNumberish,
      _presaleTimes: {
        startedAt: BigNumberish;
        expiredAt: BigNumberish;
        lpLockupTime: BigNumberish;
      },
      _reqestedTokens: {
        minTokensReq: BigNumberish;
        maxTokensReq: BigNumberish;
        softCap: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    devAddr(overrides?: CallOverrides): Promise<string>;

    endPresale(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    internalData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        totalTokensSold: BigNumber;
        revenueFromPresale: BigNumber;
        tokensAddedToLiquidity: BigNumber;
        extraTokens: BigNumber;
        poolShareBNB: BigNumber;
        devTeamShareBNB: BigNumber;
        ownersShareBNB: BigNumber;
        totalLP: BigNumber;
        lockerID: BigNumber;
      }
    >;

    isUserWhitelistedToStartProject(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockerFactoryAddr(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pancakeSwapFactoryAddr(overrides?: CallOverrides): Promise<string>;

    pancakeSwapRouterAddr(overrides?: CallOverrides): Promise<string>;

    participant(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        value: BigNumber;
        tokens: BigNumber;
        isWhiteListed: boolean;
      }
    >;

    presaleInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        number
      ] & {
        typeOfPresale: number;
        preSaleToken: string;
        presaleOwnerAddr: string;
        price: BigNumber;
        tokensForSale: BigNumber;
        reservedTokensPCForLP: BigNumber;
        remainingTokensForSale: BigNumber;
        accumulatedBalance: BigNumber;
        pairAddress: string;
        preSaleStatus: number;
      }
    >;

    presaleParticipationCriteria(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        [BigNumber, BigNumber, BigNumber] & {
          minTokensReq: BigNumber;
          maxTokensReq: BigNumber;
          softCap: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber] & {
          startedAt: BigNumber;
          expiredAt: BigNumber;
          lpLockupTime: BigNumber;
        }
      ] & {
        criteriaToken: string;
        minTokensForParticipation: BigNumber;
        reqestedTokens: [BigNumber, BigNumber, BigNumber] & {
          minTokensReq: BigNumber;
          maxTokensReq: BigNumber;
          softCap: BigNumber;
        };
        presaleTimes: [BigNumber, BigNumber, BigNumber] & {
          startedAt: BigNumber;
          expiredAt: BigNumber;
          lpLockupTime: BigNumber;
        };
      }
    >;

    presalectCounts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        participantsCount: BigNumber;
        claimsCount: BigNumber;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    salesFeeInPercent(overrides?: CallOverrides): Promise<number>;

    salesFeeInPercentForAProject(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    teamAddr(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFees(
      _upfrontFee: BigNumberish,
      _salesFeeInPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSalesFeeInPercentForAProject(
      _id: BigNumberish,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    upfrontfee(overrides?: CallOverrides): Promise<BigNumber>;

    whiteListUsersToBuyTokens(
      _id: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    whiteListUsersToStartProject(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawBNBs(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    LPrecord(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    WBNBAddr(overrides?: CallOverrides): Promise<BigNumber>;

    burnOrWithdrawTokens(
      _id: BigNumberish,
      _withdrawtype: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyTokensOnPresale(
      _id: BigNumberish,
      _numOfTokensRequested: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimTokensOrARefund(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    count(overrides?: CallOverrides): Promise<BigNumber>;

    createPresale(
      _presaleType: BigNumberish,
      _preSaleToken: string,
      _criteriaTokenAddr: string,
      _reservedTokensPCForLP: BigNumberish,
      _tokensForSale: BigNumberish,
      _priceOfEachToken: BigNumberish,
      _minTokensForParticipation: BigNumberish,
      _presaleTimes: {
        startedAt: BigNumberish;
        expiredAt: BigNumberish;
        lpLockupTime: BigNumberish;
      },
      _reqestedTokens: {
        minTokensReq: BigNumberish;
        maxTokensReq: BigNumberish;
        softCap: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    devAddr(overrides?: CallOverrides): Promise<BigNumber>;

    endPresale(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    internalData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUserWhitelistedToStartProject(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockerFactoryAddr(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pancakeSwapFactoryAddr(overrides?: CallOverrides): Promise<BigNumber>;

    pancakeSwapRouterAddr(overrides?: CallOverrides): Promise<BigNumber>;

    participant(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    presaleInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    presaleParticipationCriteria(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    presalectCounts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    salesFeeInPercent(overrides?: CallOverrides): Promise<BigNumber>;

    salesFeeInPercentForAProject(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    teamAddr(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFees(
      _upfrontFee: BigNumberish,
      _salesFeeInPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSalesFeeInPercentForAProject(
      _id: BigNumberish,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upfrontfee(overrides?: CallOverrides): Promise<BigNumber>;

    whiteListUsersToBuyTokens(
      _id: BigNumberish,
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whiteListUsersToStartProject(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawBNBs(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LPrecord(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WBNBAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnOrWithdrawTokens(
      _id: BigNumberish,
      _withdrawtype: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyTokensOnPresale(
      _id: BigNumberish,
      _numOfTokensRequested: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimTokensOrARefund(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createPresale(
      _presaleType: BigNumberish,
      _preSaleToken: string,
      _criteriaTokenAddr: string,
      _reservedTokensPCForLP: BigNumberish,
      _tokensForSale: BigNumberish,
      _priceOfEachToken: BigNumberish,
      _minTokensForParticipation: BigNumberish,
      _presaleTimes: {
        startedAt: BigNumberish;
        expiredAt: BigNumberish;
        lpLockupTime: BigNumberish;
      },
      _reqestedTokens: {
        minTokensReq: BigNumberish;
        maxTokensReq: BigNumberish;
        softCap: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    devAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endPresale(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    internalData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUserWhitelistedToStartProject(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockerFactoryAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pancakeSwapFactoryAddr(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pancakeSwapRouterAddr(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    participant(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    presaleInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    presaleParticipationCriteria(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    presalectCounts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    salesFeeInPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    salesFeeInPercentForAProject(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    teamAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFees(
      _upfrontFee: BigNumberish,
      _salesFeeInPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSalesFeeInPercentForAProject(
      _id: BigNumberish,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upfrontfee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whiteListUsersToBuyTokens(
      _id: BigNumberish,
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whiteListUsersToStartProject(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawBNBs(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
