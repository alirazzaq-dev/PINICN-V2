/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PresaleInterface extends ethers.utils.Interface {
  functions: {
    "buyTokensOnPresale(uint256)": FunctionFragment;
    "cancelSale()": FunctionFragment;
    "chageSaleType(uint8,address,uint256)": FunctionFragment;
    "claimTokensOrARefund()": FunctionFragment;
    "contributorCycles()": FunctionFragment;
    "contributorVestingRecord(uint256)": FunctionFragment;
    "contributorsVesting()": FunctionFragment;
    "emergencyWithdraw()": FunctionFragment;
    "extraTokens()": FunctionFragment;
    "finalizePresale()": FunctionFragment;
    "finalizingTime()": FunctionFragment;
    "generalInfo()": FunctionFragment;
    "getContributorReleaseStatus(uint256,address)": FunctionFragment;
    "getWhiteListUsers()": FunctionFragment;
    "master()": FunctionFragment;
    "participant(address)": FunctionFragment;
    "participationCriteria()": FunctionFragment;
    "presaleCounts()": FunctionFragment;
    "presaleInfo()": FunctionFragment;
    "presaleTimes()": FunctionFragment;
    "removeWhiteListUsers(address[])": FunctionFragment;
    "reqestedTokens()": FunctionFragment;
    "salesFeeInPercent()": FunctionFragment;
    "teamVesting()": FunctionFragment;
    "teamVestingRecord(uint256)": FunctionFragment;
    "temaVestingCycles()": FunctionFragment;
    "uniswapV2Router02()": FunctionFragment;
    "unlockLPTokens()": FunctionFragment;
    "unlockTokens()": FunctionFragment;
    "updateGeneralInfo((string,string,string,string,string,string))": FunctionFragment;
    "whiteListUsers(address[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buyTokensOnPresale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chageSaleType",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokensOrARefund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contributorCycles",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contributorVestingRecord",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contributorsVesting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extraTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalizePresale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalizingTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generalInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContributorReleaseStatus",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getWhiteListUsers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "master", values?: undefined): string;
  encodeFunctionData(functionFragment: "participant", values: [string]): string;
  encodeFunctionData(
    functionFragment: "participationCriteria",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "presaleCounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "presaleInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "presaleTimes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeWhiteListUsers",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "reqestedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "salesFeeInPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "teamVesting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "teamVestingRecord",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "temaVestingCycles",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Router02",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unlockLPTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unlockTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateGeneralInfo",
    values: [
      {
        logoURL: string;
        websiteURL: string;
        twitterURL: string;
        telegramURL: string;
        discordURL: string;
        description: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "whiteListUsers",
    values: [string[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "buyTokensOnPresale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "chageSaleType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTokensOrARefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributorCycles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributorVestingRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributorsVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extraTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizePresale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizingTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generalInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContributorReleaseStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhiteListUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "master", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "participant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "participationCriteria",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "presaleCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "presaleInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "presaleTimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWhiteListUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reqestedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "salesFeeInPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "teamVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "teamVestingRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "temaVestingCycles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Router02",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockLPTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGeneralInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whiteListUsers",
    data: BytesLike
  ): Result;

  events: {};
}

export class Presale extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PresaleInterface;

  functions: {
    buyTokensOnPresale(
      numOfTokensRequested: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    chageSaleType(
      _type: BigNumberish,
      _address: string,
      minimumTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimTokensOrARefund(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contributorCycles(overrides?: CallOverrides): Promise<[BigNumber]>;

    contributorVestingRecord(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        cycle: BigNumber;
        releaseTime: BigNumber;
        tokensPC: BigNumber;
        percentageToRelease: BigNumber;
      }
    >;

    contributorsVesting(
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber] & {
        isEnabled: boolean;
        firstReleasePC: BigNumber;
        vestingPeriodOfEachCycle: BigNumber;
        tokensReleaseEachCyclePC: BigNumber;
      }
    >;

    emergencyWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    extraTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    finalizePresale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finalizingTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    generalInfo(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string] & {
        logoURL: string;
        websiteURL: string;
        twitterURL: string;
        telegramURL: string;
        discordURL: string;
        description: string;
      }
    >;

    getContributorReleaseStatus(
      _time: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getWhiteListUsers(overrides?: CallOverrides): Promise<[string[]]>;

    master(overrides?: CallOverrides): Promise<[string]>;

    participant(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { value: BigNumber; tokens: BigNumber }
    >;

    participationCriteria(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, BigNumber, string, BigNumber, number] & {
        tokensForSale: BigNumber;
        tokensPCForLP: BigNumber;
        typeOfPresale: number;
        priceOfEachToken: BigNumber;
        criteriaToken: string;
        minTokensForParticipation: BigNumber;
        refundType: number;
      }
    >;

    presaleCounts(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        remainingTokensForSale: BigNumber;
        accumulatedBalance: BigNumber;
        contributors: BigNumber;
        claimsCount: BigNumber;
      }
    >;

    presaleInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, number, string, BigNumber] & {
        id: BigNumber;
        presaleOwner: string;
        preSaleStatus: number;
        preSaleToken: string;
        decimals: BigNumber;
      }
    >;

    presaleTimes(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        startedAt: BigNumber;
        expiredAt: BigNumber;
        lpLockupDuration: BigNumber;
      }
    >;

    removeWhiteListUsers(
      _addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reqestedTokens(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        minTokensReq: BigNumber;
        maxTokensReq: BigNumber;
        softCap: BigNumber;
      }
    >;

    salesFeeInPercent(overrides?: CallOverrides): Promise<[number]>;

    teamVesting(
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        isEnabled: boolean;
        vestingTokens: BigNumber;
        firstReleaseTime: BigNumber;
        firstReleasePC: BigNumber;
        vestingPeriodOfEachCycle: BigNumber;
        tokensReleaseEachCyclePC: BigNumber;
      }
    >;

    teamVestingRecord(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        cycle: BigNumber;
        releaseTime: BigNumber;
        tokensPC: BigNumber;
        percentageToRelease: BigNumber;
        releaseStatus: number;
      }
    >;

    temaVestingCycles(overrides?: CallOverrides): Promise<[BigNumber]>;

    uniswapV2Router02(overrides?: CallOverrides): Promise<[string]>;

    unlockLPTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlockTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateGeneralInfo(
      _generalInfo: {
        logoURL: string;
        websiteURL: string;
        twitterURL: string;
        telegramURL: string;
        discordURL: string;
        description: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whiteListUsers(
      _addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  buyTokensOnPresale(
    numOfTokensRequested: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelSale(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  chageSaleType(
    _type: BigNumberish,
    _address: string,
    minimumTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimTokensOrARefund(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contributorCycles(overrides?: CallOverrides): Promise<BigNumber>;

  contributorVestingRecord(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      cycle: BigNumber;
      releaseTime: BigNumber;
      tokensPC: BigNumber;
      percentageToRelease: BigNumber;
    }
  >;

  contributorsVesting(
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber] & {
      isEnabled: boolean;
      firstReleasePC: BigNumber;
      vestingPeriodOfEachCycle: BigNumber;
      tokensReleaseEachCyclePC: BigNumber;
    }
  >;

  emergencyWithdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  extraTokens(overrides?: CallOverrides): Promise<BigNumber>;

  finalizePresale(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finalizingTime(overrides?: CallOverrides): Promise<BigNumber>;

  generalInfo(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string, string] & {
      logoURL: string;
      websiteURL: string;
      twitterURL: string;
      telegramURL: string;
      discordURL: string;
      description: string;
    }
  >;

  getContributorReleaseStatus(
    _time: BigNumberish,
    _address: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getWhiteListUsers(overrides?: CallOverrides): Promise<string[]>;

  master(overrides?: CallOverrides): Promise<string>;

  participant(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { value: BigNumber; tokens: BigNumber }>;

  participationCriteria(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number, BigNumber, string, BigNumber, number] & {
      tokensForSale: BigNumber;
      tokensPCForLP: BigNumber;
      typeOfPresale: number;
      priceOfEachToken: BigNumber;
      criteriaToken: string;
      minTokensForParticipation: BigNumber;
      refundType: number;
    }
  >;

  presaleCounts(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      remainingTokensForSale: BigNumber;
      accumulatedBalance: BigNumber;
      contributors: BigNumber;
      claimsCount: BigNumber;
    }
  >;

  presaleInfo(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, number, string, BigNumber] & {
      id: BigNumber;
      presaleOwner: string;
      preSaleStatus: number;
      preSaleToken: string;
      decimals: BigNumber;
    }
  >;

  presaleTimes(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      startedAt: BigNumber;
      expiredAt: BigNumber;
      lpLockupDuration: BigNumber;
    }
  >;

  removeWhiteListUsers(
    _addresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reqestedTokens(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      minTokensReq: BigNumber;
      maxTokensReq: BigNumber;
      softCap: BigNumber;
    }
  >;

  salesFeeInPercent(overrides?: CallOverrides): Promise<number>;

  teamVesting(
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      isEnabled: boolean;
      vestingTokens: BigNumber;
      firstReleaseTime: BigNumber;
      firstReleasePC: BigNumber;
      vestingPeriodOfEachCycle: BigNumber;
      tokensReleaseEachCyclePC: BigNumber;
    }
  >;

  teamVestingRecord(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
      cycle: BigNumber;
      releaseTime: BigNumber;
      tokensPC: BigNumber;
      percentageToRelease: BigNumber;
      releaseStatus: number;
    }
  >;

  temaVestingCycles(overrides?: CallOverrides): Promise<BigNumber>;

  uniswapV2Router02(overrides?: CallOverrides): Promise<string>;

  unlockLPTokens(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlockTokens(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateGeneralInfo(
    _generalInfo: {
      logoURL: string;
      websiteURL: string;
      twitterURL: string;
      telegramURL: string;
      discordURL: string;
      description: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whiteListUsers(
    _addresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyTokensOnPresale(
      numOfTokensRequested: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelSale(overrides?: CallOverrides): Promise<void>;

    chageSaleType(
      _type: BigNumberish,
      _address: string,
      minimumTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimTokensOrARefund(overrides?: CallOverrides): Promise<void>;

    contributorCycles(overrides?: CallOverrides): Promise<BigNumber>;

    contributorVestingRecord(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        cycle: BigNumber;
        releaseTime: BigNumber;
        tokensPC: BigNumber;
        percentageToRelease: BigNumber;
      }
    >;

    contributorsVesting(
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber] & {
        isEnabled: boolean;
        firstReleasePC: BigNumber;
        vestingPeriodOfEachCycle: BigNumber;
        tokensReleaseEachCyclePC: BigNumber;
      }
    >;

    emergencyWithdraw(overrides?: CallOverrides): Promise<void>;

    extraTokens(overrides?: CallOverrides): Promise<BigNumber>;

    finalizePresale(overrides?: CallOverrides): Promise<void>;

    finalizingTime(overrides?: CallOverrides): Promise<BigNumber>;

    generalInfo(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string] & {
        logoURL: string;
        websiteURL: string;
        twitterURL: string;
        telegramURL: string;
        discordURL: string;
        description: string;
      }
    >;

    getContributorReleaseStatus(
      _time: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getWhiteListUsers(overrides?: CallOverrides): Promise<string[]>;

    master(overrides?: CallOverrides): Promise<string>;

    participant(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { value: BigNumber; tokens: BigNumber }
    >;

    participationCriteria(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, BigNumber, string, BigNumber, number] & {
        tokensForSale: BigNumber;
        tokensPCForLP: BigNumber;
        typeOfPresale: number;
        priceOfEachToken: BigNumber;
        criteriaToken: string;
        minTokensForParticipation: BigNumber;
        refundType: number;
      }
    >;

    presaleCounts(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        remainingTokensForSale: BigNumber;
        accumulatedBalance: BigNumber;
        contributors: BigNumber;
        claimsCount: BigNumber;
      }
    >;

    presaleInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, number, string, BigNumber] & {
        id: BigNumber;
        presaleOwner: string;
        preSaleStatus: number;
        preSaleToken: string;
        decimals: BigNumber;
      }
    >;

    presaleTimes(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        startedAt: BigNumber;
        expiredAt: BigNumber;
        lpLockupDuration: BigNumber;
      }
    >;

    removeWhiteListUsers(
      _addresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    reqestedTokens(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        minTokensReq: BigNumber;
        maxTokensReq: BigNumber;
        softCap: BigNumber;
      }
    >;

    salesFeeInPercent(overrides?: CallOverrides): Promise<number>;

    teamVesting(
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        isEnabled: boolean;
        vestingTokens: BigNumber;
        firstReleaseTime: BigNumber;
        firstReleasePC: BigNumber;
        vestingPeriodOfEachCycle: BigNumber;
        tokensReleaseEachCyclePC: BigNumber;
      }
    >;

    teamVestingRecord(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        cycle: BigNumber;
        releaseTime: BigNumber;
        tokensPC: BigNumber;
        percentageToRelease: BigNumber;
        releaseStatus: number;
      }
    >;

    temaVestingCycles(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV2Router02(overrides?: CallOverrides): Promise<string>;

    unlockLPTokens(overrides?: CallOverrides): Promise<void>;

    unlockTokens(overrides?: CallOverrides): Promise<void>;

    updateGeneralInfo(
      _generalInfo: {
        logoURL: string;
        websiteURL: string;
        twitterURL: string;
        telegramURL: string;
        discordURL: string;
        description: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    whiteListUsers(
      _addresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    buyTokensOnPresale(
      numOfTokensRequested: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    chageSaleType(
      _type: BigNumberish,
      _address: string,
      minimumTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimTokensOrARefund(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contributorCycles(overrides?: CallOverrides): Promise<BigNumber>;

    contributorVestingRecord(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contributorsVesting(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    extraTokens(overrides?: CallOverrides): Promise<BigNumber>;

    finalizePresale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finalizingTime(overrides?: CallOverrides): Promise<BigNumber>;

    generalInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getContributorReleaseStatus(
      _time: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWhiteListUsers(overrides?: CallOverrides): Promise<BigNumber>;

    master(overrides?: CallOverrides): Promise<BigNumber>;

    participant(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    participationCriteria(overrides?: CallOverrides): Promise<BigNumber>;

    presaleCounts(overrides?: CallOverrides): Promise<BigNumber>;

    presaleInfo(overrides?: CallOverrides): Promise<BigNumber>;

    presaleTimes(overrides?: CallOverrides): Promise<BigNumber>;

    removeWhiteListUsers(
      _addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reqestedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    salesFeeInPercent(overrides?: CallOverrides): Promise<BigNumber>;

    teamVesting(overrides?: CallOverrides): Promise<BigNumber>;

    teamVestingRecord(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    temaVestingCycles(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV2Router02(overrides?: CallOverrides): Promise<BigNumber>;

    unlockLPTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlockTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateGeneralInfo(
      _generalInfo: {
        logoURL: string;
        websiteURL: string;
        twitterURL: string;
        telegramURL: string;
        discordURL: string;
        description: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whiteListUsers(
      _addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyTokensOnPresale(
      numOfTokensRequested: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelSale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    chageSaleType(
      _type: BigNumberish,
      _address: string,
      minimumTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimTokensOrARefund(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contributorCycles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contributorVestingRecord(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contributorsVesting(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    extraTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalizePresale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finalizingTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    generalInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContributorReleaseStatus(
      _time: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWhiteListUsers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    master(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    participant(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    participationCriteria(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    presaleCounts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    presaleInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    presaleTimes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeWhiteListUsers(
      _addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reqestedTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    salesFeeInPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    teamVesting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    teamVestingRecord(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    temaVestingCycles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapV2Router02(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unlockLPTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlockTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateGeneralInfo(
      _generalInfo: {
        logoURL: string;
        websiteURL: string;
        twitterURL: string;
        telegramURL: string;
        discordURL: string;
        description: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whiteListUsers(
      _addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
