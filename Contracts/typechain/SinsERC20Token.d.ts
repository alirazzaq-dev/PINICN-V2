/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SinsERC20TokenInterface extends ethers.utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "_isExcludedMaxTransactionAmount(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "automatedMarketMakerPairs(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "buyBurnFee()": FunctionFragment;
    "buyLiquidityFee()": FunctionFragment;
    "buyMarketingFee()": FunctionFragment;
    "buyTotalFees()": FunctionFragment;
    "buyTreasuryFee()": FunctionFragment;
    "deadAddress()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "disableTransferDelay()": FunctionFragment;
    "enableBlock()": FunctionFragment;
    "enableTrading()": FunctionFragment;
    "excludeFromFees(address,bool)": FunctionFragment;
    "excludeFromMaxTransaction(address,bool)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialSupply()": FunctionFragment;
    "isExcludedFromFees(address)": FunctionFragment;
    "launchMarketMaker(address)": FunctionFragment;
    "limitsInEffect()": FunctionFragment;
    "marketingWallet()": FunctionFragment;
    "maxTransactionAmount()": FunctionFragment;
    "maxWallet()": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pauseTrading()": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "removeLimits()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resumeTrading()": FunctionFragment;
    "sellBurnFee()": FunctionFragment;
    "sellLiquidityFee()": FunctionFragment;
    "sellMarketingFee()": FunctionFragment;
    "sellTotalFees()": FunctionFragment;
    "sellTreasuryFee()": FunctionFragment;
    "setAutomatedMarketMakerPair(address,bool)": FunctionFragment;
    "setLaunchMarketMaker(address,bool)": FunctionFragment;
    "swapEnabled()": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokensForBurn()": FunctionFragment;
    "tokensForLiquidity()": FunctionFragment;
    "tokensForMarketing()": FunctionFragment;
    "tokensForTreasury()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "tradingActive()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferDelayEnabled()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasuryWallet()": FunctionFragment;
    "uniswapV2Pair()": FunctionFragment;
    "uniswapV2Router()": FunctionFragment;
    "updateBuyFees(uint256,uint256,uint256,uint256)": FunctionFragment;
    "updateMarketingWallet(address)": FunctionFragment;
    "updateMaxTxnAmount(uint256)": FunctionFragment;
    "updateMaxWalletAmount(uint256)": FunctionFragment;
    "updateSellFees(uint256,uint256,uint256,uint256)": FunctionFragment;
    "updateSwapEnabled(bool)": FunctionFragment;
    "updatetreasuryWallet(address)": FunctionFragment;
    "withdrawEthPool()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_isExcludedMaxTransactionAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "automatedMarketMakerPairs",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "buyBurnFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyLiquidityFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyMarketingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyTotalFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyTreasuryFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deadAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disableTransferDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableTrading",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromFees",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromMaxTransaction",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromFees",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "launchMarketMaker",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "limitsInEffect",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketingWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTransactionAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxWallet", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseTrading",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLimits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resumeTrading",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellBurnFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellLiquidityFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellMarketingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellTotalFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellTreasuryFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAutomatedMarketMakerPair",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLaunchMarketMaker",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "swapEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokensForBurn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensForLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensForMarketing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensForTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradingActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferDelayEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Pair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Router",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateBuyFees",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMarketingWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxTxnAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxWalletAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSellFees",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSwapEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updatetreasuryWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEthPool",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isExcludedMaxTransactionAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "automatedMarketMakerPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyBurnFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyLiquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyMarketingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyTotalFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyTreasuryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deadAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableTransferDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromMaxTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "launchMarketMaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "limitsInEffect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketingWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTransactionAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resumeTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellBurnFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellLiquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellMarketingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellTotalFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellTreasuryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAutomatedMarketMakerPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLaunchMarketMaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensForBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensForLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensForMarketing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensForTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferDelayEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Pair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBuyFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMarketingWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxTxnAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxWalletAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSellFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSwapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatetreasuryWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEthPool",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ExcludeFromFees(address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetAutomatedMarketMakerPair(address,bool)": EventFragment;
    "SwapAndLiquify(uint256,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UpdateUniswapV2Router(address,address)": EventFragment;
    "marketingWalletUpdated(address,address)": EventFragment;
    "treasuryWalletUpdated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExcludeFromFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetAutomatedMarketMakerPair"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapAndLiquify"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateUniswapV2Router"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "marketingWalletUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "treasuryWalletUpdated"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    spender: string;
    value: BigNumber;
  }
>;

export type ExcludeFromFeesEvent = TypedEvent<
  [string, boolean] & { account: string; isExcluded: boolean }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type SetAutomatedMarketMakerPairEvent = TypedEvent<
  [string, boolean] & { pair: string; value: boolean }
>;

export type SwapAndLiquifyEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    tokensSwapped: BigNumber;
    ethReceived: BigNumber;
    tokensIntoLiquidity: BigNumber;
  }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; value: BigNumber }
>;

export type UpdateUniswapV2RouterEvent = TypedEvent<
  [string, string] & { newAddress: string; oldAddress: string }
>;

export type marketingWalletUpdatedEvent = TypedEvent<
  [string, string] & { newWallet: string; oldWallet: string }
>;

export type treasuryWalletUpdatedEvent = TypedEvent<
  [string, string] & { newWallet: string; oldWallet: string }
>;

export class SinsERC20Token extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SinsERC20TokenInterface;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    _isExcludedMaxTransactionAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    buyBurnFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyLiquidityFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyMarketingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyTotalFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyTreasuryFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    deadAddress(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disableTransferDelay(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enableBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    enableTrading(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    excludeFromFees(
      account: string,
      excluded: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    excludeFromMaxTransaction(
      updAds: string,
      isEx: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    isExcludedFromFees(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    launchMarketMaker(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    limitsInEffect(overrides?: CallOverrides): Promise<[boolean]>;

    marketingWallet(overrides?: CallOverrides): Promise<[string]>;

    maxTransactionAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxWallet(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pauseTrading(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLimits(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resumeTrading(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellBurnFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    sellLiquidityFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    sellMarketingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    sellTotalFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    sellTreasuryFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    setAutomatedMarketMakerPair(
      pair: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLaunchMarketMaker(
      _add: string,
      _isTrue: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokensForBurn(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokensForLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokensForMarketing(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokensForTreasury(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    tradingActive(overrides?: CallOverrides): Promise<[boolean]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferDelayEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasuryWallet(overrides?: CallOverrides): Promise<[string]>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<[string]>;

    uniswapV2Router(overrides?: CallOverrides): Promise<[string]>;

    updateBuyFees(
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      _burnFee: BigNumberish,
      _treasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMarketingWallet(
      newMarketingWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMaxTxnAmount(
      newNum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMaxWalletAmount(
      newNum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSellFees(
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      _burnFee: BigNumberish,
      _treasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSwapEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatetreasuryWallet(
      newtreasuryWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawEthPool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  _isExcludedMaxTransactionAmount(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  automatedMarketMakerPairs(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  buyBurnFee(overrides?: CallOverrides): Promise<BigNumber>;

  buyLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

  buyMarketingFee(overrides?: CallOverrides): Promise<BigNumber>;

  buyTotalFees(overrides?: CallOverrides): Promise<BigNumber>;

  buyTreasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

  deadAddress(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disableTransferDelay(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enableBlock(overrides?: CallOverrides): Promise<BigNumber>;

  enableTrading(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  excludeFromFees(
    account: string,
    excluded: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  excludeFromMaxTransaction(
    updAds: string,
    isEx: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialSupply(overrides?: CallOverrides): Promise<BigNumber>;

  isExcludedFromFees(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  launchMarketMaker(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  limitsInEffect(overrides?: CallOverrides): Promise<boolean>;

  marketingWallet(overrides?: CallOverrides): Promise<string>;

  maxTransactionAmount(overrides?: CallOverrides): Promise<BigNumber>;

  maxWallet(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pauseTrading(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  permit(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLimits(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resumeTrading(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellBurnFee(overrides?: CallOverrides): Promise<BigNumber>;

  sellLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

  sellMarketingFee(overrides?: CallOverrides): Promise<BigNumber>;

  sellTotalFees(overrides?: CallOverrides): Promise<BigNumber>;

  sellTreasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

  setAutomatedMarketMakerPair(
    pair: string,
    value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLaunchMarketMaker(
    _add: string,
    _isTrue: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapEnabled(overrides?: CallOverrides): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokensForBurn(overrides?: CallOverrides): Promise<BigNumber>;

  tokensForLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  tokensForMarketing(overrides?: CallOverrides): Promise<BigNumber>;

  tokensForTreasury(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  tradingActive(overrides?: CallOverrides): Promise<boolean>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferDelayEnabled(overrides?: CallOverrides): Promise<boolean>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasuryWallet(overrides?: CallOverrides): Promise<string>;

  uniswapV2Pair(overrides?: CallOverrides): Promise<string>;

  uniswapV2Router(overrides?: CallOverrides): Promise<string>;

  updateBuyFees(
    _marketingFee: BigNumberish,
    _liquidityFee: BigNumberish,
    _burnFee: BigNumberish,
    _treasuryFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMarketingWallet(
    newMarketingWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMaxTxnAmount(
    newNum: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMaxWalletAmount(
    newNum: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSellFees(
    _marketingFee: BigNumberish,
    _liquidityFee: BigNumberish,
    _burnFee: BigNumberish,
    _treasuryFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSwapEnabled(
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatetreasuryWallet(
    newtreasuryWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawEthPool(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    _isExcludedMaxTransactionAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyBurnFee(overrides?: CallOverrides): Promise<BigNumber>;

    buyLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    buyMarketingFee(overrides?: CallOverrides): Promise<BigNumber>;

    buyTotalFees(overrides?: CallOverrides): Promise<BigNumber>;

    buyTreasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

    deadAddress(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    disableTransferDelay(overrides?: CallOverrides): Promise<boolean>;

    enableBlock(overrides?: CallOverrides): Promise<BigNumber>;

    enableTrading(overrides?: CallOverrides): Promise<void>;

    excludeFromFees(
      account: string,
      excluded: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    excludeFromMaxTransaction(
      updAds: string,
      isEx: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialSupply(overrides?: CallOverrides): Promise<BigNumber>;

    isExcludedFromFees(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    launchMarketMaker(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    limitsInEffect(overrides?: CallOverrides): Promise<boolean>;

    marketingWallet(overrides?: CallOverrides): Promise<string>;

    maxTransactionAmount(overrides?: CallOverrides): Promise<BigNumber>;

    maxWallet(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pauseTrading(overrides?: CallOverrides): Promise<void>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLimits(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resumeTrading(overrides?: CallOverrides): Promise<void>;

    sellBurnFee(overrides?: CallOverrides): Promise<BigNumber>;

    sellLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    sellMarketingFee(overrides?: CallOverrides): Promise<BigNumber>;

    sellTotalFees(overrides?: CallOverrides): Promise<BigNumber>;

    sellTreasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

    setAutomatedMarketMakerPair(
      pair: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setLaunchMarketMaker(
      _add: string,
      _isTrue: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    swapEnabled(overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokensForBurn(overrides?: CallOverrides): Promise<BigNumber>;

    tokensForLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    tokensForMarketing(overrides?: CallOverrides): Promise<BigNumber>;

    tokensForTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    tradingActive(overrides?: CallOverrides): Promise<boolean>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferDelayEnabled(overrides?: CallOverrides): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasuryWallet(overrides?: CallOverrides): Promise<string>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<string>;

    uniswapV2Router(overrides?: CallOverrides): Promise<string>;

    updateBuyFees(
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      _burnFee: BigNumberish,
      _treasuryFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMarketingWallet(
      newMarketingWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMaxTxnAmount(
      newNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMaxWalletAmount(
      newNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSellFees(
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      _burnFee: BigNumberish,
      _treasuryFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSwapEnabled(
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updatetreasuryWallet(
      newtreasuryWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawEthPool(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    "ExcludeFromFees(address,bool)"(
      account?: string | null,
      isExcluded?: null
    ): TypedEventFilter<
      [string, boolean],
      { account: string; isExcluded: boolean }
    >;

    ExcludeFromFees(
      account?: string | null,
      isExcluded?: null
    ): TypedEventFilter<
      [string, boolean],
      { account: string; isExcluded: boolean }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "SetAutomatedMarketMakerPair(address,bool)"(
      pair?: string | null,
      value?: boolean | null
    ): TypedEventFilter<[string, boolean], { pair: string; value: boolean }>;

    SetAutomatedMarketMakerPair(
      pair?: string | null,
      value?: boolean | null
    ): TypedEventFilter<[string, boolean], { pair: string; value: boolean }>;

    "SwapAndLiquify(uint256,uint256,uint256)"(
      tokensSwapped?: null,
      ethReceived?: null,
      tokensIntoLiquidity?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        tokensSwapped: BigNumber;
        ethReceived: BigNumber;
        tokensIntoLiquidity: BigNumber;
      }
    >;

    SwapAndLiquify(
      tokensSwapped?: null,
      ethReceived?: null,
      tokensIntoLiquidity?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        tokensSwapped: BigNumber;
        ethReceived: BigNumber;
        tokensIntoLiquidity: BigNumber;
      }
    >;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    "UpdateUniswapV2Router(address,address)"(
      newAddress?: string | null,
      oldAddress?: string | null
    ): TypedEventFilter<
      [string, string],
      { newAddress: string; oldAddress: string }
    >;

    UpdateUniswapV2Router(
      newAddress?: string | null,
      oldAddress?: string | null
    ): TypedEventFilter<
      [string, string],
      { newAddress: string; oldAddress: string }
    >;

    "marketingWalletUpdated(address,address)"(
      newWallet?: string | null,
      oldWallet?: string | null
    ): TypedEventFilter<
      [string, string],
      { newWallet: string; oldWallet: string }
    >;

    marketingWalletUpdated(
      newWallet?: string | null,
      oldWallet?: string | null
    ): TypedEventFilter<
      [string, string],
      { newWallet: string; oldWallet: string }
    >;

    "treasuryWalletUpdated(address,address)"(
      newWallet?: string | null,
      oldWallet?: string | null
    ): TypedEventFilter<
      [string, string],
      { newWallet: string; oldWallet: string }
    >;

    treasuryWalletUpdated(
      newWallet?: string | null,
      oldWallet?: string | null
    ): TypedEventFilter<
      [string, string],
      { newWallet: string; oldWallet: string }
    >;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    _isExcludedMaxTransactionAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyBurnFee(overrides?: CallOverrides): Promise<BigNumber>;

    buyLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    buyMarketingFee(overrides?: CallOverrides): Promise<BigNumber>;

    buyTotalFees(overrides?: CallOverrides): Promise<BigNumber>;

    buyTreasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

    deadAddress(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disableTransferDelay(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enableBlock(overrides?: CallOverrides): Promise<BigNumber>;

    enableTrading(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    excludeFromFees(
      account: string,
      excluded: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    excludeFromMaxTransaction(
      updAds: string,
      isEx: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialSupply(overrides?: CallOverrides): Promise<BigNumber>;

    isExcludedFromFees(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    launchMarketMaker(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    limitsInEffect(overrides?: CallOverrides): Promise<BigNumber>;

    marketingWallet(overrides?: CallOverrides): Promise<BigNumber>;

    maxTransactionAmount(overrides?: CallOverrides): Promise<BigNumber>;

    maxWallet(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pauseTrading(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLimits(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resumeTrading(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellBurnFee(overrides?: CallOverrides): Promise<BigNumber>;

    sellLiquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    sellMarketingFee(overrides?: CallOverrides): Promise<BigNumber>;

    sellTotalFees(overrides?: CallOverrides): Promise<BigNumber>;

    sellTreasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

    setAutomatedMarketMakerPair(
      pair: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLaunchMarketMaker(
      _add: string,
      _isTrue: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokensForBurn(overrides?: CallOverrides): Promise<BigNumber>;

    tokensForLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    tokensForMarketing(overrides?: CallOverrides): Promise<BigNumber>;

    tokensForTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    tradingActive(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferDelayEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasuryWallet(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV2Router(overrides?: CallOverrides): Promise<BigNumber>;

    updateBuyFees(
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      _burnFee: BigNumberish,
      _treasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMarketingWallet(
      newMarketingWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMaxTxnAmount(
      newNum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMaxWalletAmount(
      newNum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSellFees(
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      _burnFee: BigNumberish,
      _treasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSwapEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatetreasuryWallet(
      newtreasuryWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawEthPool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _isExcludedMaxTransactionAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyBurnFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyLiquidityFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyMarketingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyTotalFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyTreasuryFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deadAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disableTransferDelay(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enableBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enableTrading(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    excludeFromFees(
      account: string,
      excluded: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    excludeFromMaxTransaction(
      updAds: string,
      isEx: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isExcludedFromFees(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    launchMarketMaker(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    limitsInEffect(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketingWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxTransactionAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseTrading(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLimits(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resumeTrading(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellBurnFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellLiquidityFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellMarketingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellTotalFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellTreasuryFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAutomatedMarketMakerPair(
      pair: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLaunchMarketMaker(
      _add: string,
      _isTrue: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokensForBurn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokensForLiquidity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensForMarketing(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensForTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tradingActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferDelayEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasuryWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapV2Router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateBuyFees(
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      _burnFee: BigNumberish,
      _treasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMarketingWallet(
      newMarketingWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMaxTxnAmount(
      newNum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMaxWalletAmount(
      newNum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSellFees(
      _marketingFee: BigNumberish,
      _liquidityFee: BigNumberish,
      _burnFee: BigNumberish,
      _treasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSwapEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatetreasuryWallet(
      newtreasuryWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawEthPool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
