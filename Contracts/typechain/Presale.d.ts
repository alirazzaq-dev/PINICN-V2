/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PresaleInterface extends ethers.utils.Interface {
  functions: {
    "LPLockerManager()": FunctionFragment;
    "WBNBAddr()": FunctionFragment;
    "burnOrWithdrawTokens(uint8)": FunctionFragment;
    "buyTokensOnPresale(uint256)": FunctionFragment;
    "chageSaleType(uint8,address)": FunctionFragment;
    "claimTokensOrARefund()": FunctionFragment;
    "devAddr()": FunctionFragment;
    "finalizePresale()": FunctionFragment;
    "internalData()": FunctionFragment;
    "owner()": FunctionFragment;
    "pancakeSwapFactoryAddr()": FunctionFragment;
    "pancakeSwapRouterAddr()": FunctionFragment;
    "participant(address)": FunctionFragment;
    "presaleInfo()": FunctionFragment;
    "presaleParticipationCriteria()": FunctionFragment;
    "presalectCounts()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "salesFeeInPercent()": FunctionFragment;
    "setAddresses(address,address,address,address,address,address)": FunctionFragment;
    "teamAddr()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upfrontfee()": FunctionFragment;
    "whiteListUsersToBuyTokens(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "LPLockerManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WBNBAddr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "burnOrWithdrawTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTokensOnPresale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chageSaleType",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokensOrARefund",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "devAddr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "finalizePresale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "internalData",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pancakeSwapFactoryAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pancakeSwapRouterAddr",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "participant", values: [string]): string;
  encodeFunctionData(
    functionFragment: "presaleInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "presaleParticipationCriteria",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "presalectCounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "salesFeeInPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values: [string, string, string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "teamAddr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upfrontfee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whiteListUsersToBuyTokens",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "LPLockerManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WBNBAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnOrWithdrawTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyTokensOnPresale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chageSaleType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTokensOrARefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "devAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizePresale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "internalData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pancakeSwapFactoryAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pancakeSwapRouterAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "participant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "presaleInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "presaleParticipationCriteria",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "presalectCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "salesFeeInPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "teamAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upfrontfee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whiteListUsersToBuyTokens",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class Presale extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PresaleInterface;

  functions: {
    LPLockerManager(overrides?: CallOverrides): Promise<[string]>;

    WBNBAddr(overrides?: CallOverrides): Promise<[string]>;

    burnOrWithdrawTokens(
      _withdrawtype: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyTokensOnPresale(
      _numOfTokensRequested: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    chageSaleType(
      _type: BigNumberish,
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimTokensOrARefund(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    devAddr(overrides?: CallOverrides): Promise<[string]>;

    finalizePresale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    internalData(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        totalTokensSold: BigNumber;
        revenueFromPresale: BigNumber;
        tokensAddedToLiquidity: BigNumber;
        extraTokens: BigNumber;
        poolShareBNB: BigNumber;
        devTeamShareBNB: BigNumber;
        ownersShareBNB: BigNumber;
        totalLP: BigNumber;
        lockerID: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pancakeSwapFactoryAddr(overrides?: CallOverrides): Promise<[string]>;

    pancakeSwapRouterAddr(overrides?: CallOverrides): Promise<[string]>;

    participant(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        value: BigNumber;
        tokens: BigNumber;
        isWhiteListed: boolean;
      }
    >;

    presaleInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        number,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        id: BigNumber;
        typeOfPresale: number;
        preSaleToken: string;
        presaleOwnerAddr: string;
        price: BigNumber;
        tokensForSale: BigNumber;
        reservedTokensPCForLP: BigNumber;
        remainingTokensForSale: BigNumber;
        accumulatedBalance: BigNumber;
        preSaleStatus: number;
      }
    >;

    presaleParticipationCriteria(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        [BigNumber, BigNumber, BigNumber] & {
          minTokensReq: BigNumber;
          maxTokensReq: BigNumber;
          softCap: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber] & {
          startedAt: BigNumber;
          expiredAt: BigNumber;
          lpLockupTime: BigNumber;
        }
      ] & {
        criteriaToken: string;
        minTokensForParticipation: BigNumber;
        reqestedTokens: [BigNumber, BigNumber, BigNumber] & {
          minTokensReq: BigNumber;
          maxTokensReq: BigNumber;
          softCap: BigNumber;
        };
        presaleTimes: [BigNumber, BigNumber, BigNumber] & {
          startedAt: BigNumber;
          expiredAt: BigNumber;
          lpLockupTime: BigNumber;
        };
      }
    >;

    presalectCounts(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        participantsCount: BigNumber;
        claimsCount: BigNumber;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    salesFeeInPercent(overrides?: CallOverrides): Promise<[number]>;

    setAddresses(
      _pancakeSwapFactoryAddr: string,
      _pancakeSwapRouterAddr: string,
      _WBNBAddr: string,
      _teamAddr: string,
      _devAddr: string,
      _lpLockerManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    teamAddr(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upfrontfee(overrides?: CallOverrides): Promise<[BigNumber]>;

    whiteListUsersToBuyTokens(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  LPLockerManager(overrides?: CallOverrides): Promise<string>;

  WBNBAddr(overrides?: CallOverrides): Promise<string>;

  burnOrWithdrawTokens(
    _withdrawtype: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyTokensOnPresale(
    _numOfTokensRequested: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  chageSaleType(
    _type: BigNumberish,
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimTokensOrARefund(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  devAddr(overrides?: CallOverrides): Promise<string>;

  finalizePresale(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  internalData(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      totalTokensSold: BigNumber;
      revenueFromPresale: BigNumber;
      tokensAddedToLiquidity: BigNumber;
      extraTokens: BigNumber;
      poolShareBNB: BigNumber;
      devTeamShareBNB: BigNumber;
      ownersShareBNB: BigNumber;
      totalLP: BigNumber;
      lockerID: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  pancakeSwapFactoryAddr(overrides?: CallOverrides): Promise<string>;

  pancakeSwapRouterAddr(overrides?: CallOverrides): Promise<string>;

  participant(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      value: BigNumber;
      tokens: BigNumber;
      isWhiteListed: boolean;
    }
  >;

  presaleInfo(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      number,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      id: BigNumber;
      typeOfPresale: number;
      preSaleToken: string;
      presaleOwnerAddr: string;
      price: BigNumber;
      tokensForSale: BigNumber;
      reservedTokensPCForLP: BigNumber;
      remainingTokensForSale: BigNumber;
      accumulatedBalance: BigNumber;
      preSaleStatus: number;
    }
  >;

  presaleParticipationCriteria(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      [BigNumber, BigNumber, BigNumber] & {
        minTokensReq: BigNumber;
        maxTokensReq: BigNumber;
        softCap: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber] & {
        startedAt: BigNumber;
        expiredAt: BigNumber;
        lpLockupTime: BigNumber;
      }
    ] & {
      criteriaToken: string;
      minTokensForParticipation: BigNumber;
      reqestedTokens: [BigNumber, BigNumber, BigNumber] & {
        minTokensReq: BigNumber;
        maxTokensReq: BigNumber;
        softCap: BigNumber;
      };
      presaleTimes: [BigNumber, BigNumber, BigNumber] & {
        startedAt: BigNumber;
        expiredAt: BigNumber;
        lpLockupTime: BigNumber;
      };
    }
  >;

  presalectCounts(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      participantsCount: BigNumber;
      claimsCount: BigNumber;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  salesFeeInPercent(overrides?: CallOverrides): Promise<number>;

  setAddresses(
    _pancakeSwapFactoryAddr: string,
    _pancakeSwapRouterAddr: string,
    _WBNBAddr: string,
    _teamAddr: string,
    _devAddr: string,
    _lpLockerManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  teamAddr(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upfrontfee(overrides?: CallOverrides): Promise<BigNumber>;

  whiteListUsersToBuyTokens(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    LPLockerManager(overrides?: CallOverrides): Promise<string>;

    WBNBAddr(overrides?: CallOverrides): Promise<string>;

    burnOrWithdrawTokens(
      _withdrawtype: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyTokensOnPresale(
      _numOfTokensRequested: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    chageSaleType(
      _type: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimTokensOrARefund(overrides?: CallOverrides): Promise<void>;

    devAddr(overrides?: CallOverrides): Promise<string>;

    finalizePresale(overrides?: CallOverrides): Promise<void>;

    internalData(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        totalTokensSold: BigNumber;
        revenueFromPresale: BigNumber;
        tokensAddedToLiquidity: BigNumber;
        extraTokens: BigNumber;
        poolShareBNB: BigNumber;
        devTeamShareBNB: BigNumber;
        ownersShareBNB: BigNumber;
        totalLP: BigNumber;
        lockerID: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    pancakeSwapFactoryAddr(overrides?: CallOverrides): Promise<string>;

    pancakeSwapRouterAddr(overrides?: CallOverrides): Promise<string>;

    participant(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        value: BigNumber;
        tokens: BigNumber;
        isWhiteListed: boolean;
      }
    >;

    presaleInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        number,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        id: BigNumber;
        typeOfPresale: number;
        preSaleToken: string;
        presaleOwnerAddr: string;
        price: BigNumber;
        tokensForSale: BigNumber;
        reservedTokensPCForLP: BigNumber;
        remainingTokensForSale: BigNumber;
        accumulatedBalance: BigNumber;
        preSaleStatus: number;
      }
    >;

    presaleParticipationCriteria(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        [BigNumber, BigNumber, BigNumber] & {
          minTokensReq: BigNumber;
          maxTokensReq: BigNumber;
          softCap: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber] & {
          startedAt: BigNumber;
          expiredAt: BigNumber;
          lpLockupTime: BigNumber;
        }
      ] & {
        criteriaToken: string;
        minTokensForParticipation: BigNumber;
        reqestedTokens: [BigNumber, BigNumber, BigNumber] & {
          minTokensReq: BigNumber;
          maxTokensReq: BigNumber;
          softCap: BigNumber;
        };
        presaleTimes: [BigNumber, BigNumber, BigNumber] & {
          startedAt: BigNumber;
          expiredAt: BigNumber;
          lpLockupTime: BigNumber;
        };
      }
    >;

    presalectCounts(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        participantsCount: BigNumber;
        claimsCount: BigNumber;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    salesFeeInPercent(overrides?: CallOverrides): Promise<number>;

    setAddresses(
      _pancakeSwapFactoryAddr: string,
      _pancakeSwapRouterAddr: string,
      _WBNBAddr: string,
      _teamAddr: string,
      _devAddr: string,
      _lpLockerManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    teamAddr(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upfrontfee(overrides?: CallOverrides): Promise<BigNumber>;

    whiteListUsersToBuyTokens(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    LPLockerManager(overrides?: CallOverrides): Promise<BigNumber>;

    WBNBAddr(overrides?: CallOverrides): Promise<BigNumber>;

    burnOrWithdrawTokens(
      _withdrawtype: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyTokensOnPresale(
      _numOfTokensRequested: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    chageSaleType(
      _type: BigNumberish,
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimTokensOrARefund(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    devAddr(overrides?: CallOverrides): Promise<BigNumber>;

    finalizePresale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    internalData(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pancakeSwapFactoryAddr(overrides?: CallOverrides): Promise<BigNumber>;

    pancakeSwapRouterAddr(overrides?: CallOverrides): Promise<BigNumber>;

    participant(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    presaleInfo(overrides?: CallOverrides): Promise<BigNumber>;

    presaleParticipationCriteria(overrides?: CallOverrides): Promise<BigNumber>;

    presalectCounts(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    salesFeeInPercent(overrides?: CallOverrides): Promise<BigNumber>;

    setAddresses(
      _pancakeSwapFactoryAddr: string,
      _pancakeSwapRouterAddr: string,
      _WBNBAddr: string,
      _teamAddr: string,
      _devAddr: string,
      _lpLockerManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    teamAddr(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upfrontfee(overrides?: CallOverrides): Promise<BigNumber>;

    whiteListUsersToBuyTokens(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LPLockerManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WBNBAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnOrWithdrawTokens(
      _withdrawtype: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyTokensOnPresale(
      _numOfTokensRequested: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    chageSaleType(
      _type: BigNumberish,
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimTokensOrARefund(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    devAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalizePresale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    internalData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pancakeSwapFactoryAddr(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pancakeSwapRouterAddr(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    participant(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    presaleInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    presaleParticipationCriteria(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    presalectCounts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    salesFeeInPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAddresses(
      _pancakeSwapFactoryAddr: string,
      _pancakeSwapRouterAddr: string,
      _WBNBAddr: string,
      _teamAddr: string,
      _devAddr: string,
      _lpLockerManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    teamAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upfrontfee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whiteListUsersToBuyTokens(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
