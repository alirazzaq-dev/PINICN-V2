/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface Launchpadv2Interface extends ethers.utils.Interface {
  functions: {
    "createPresale((uint256,address,uint8,address,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256),(string,string,string,string,string,string))": FunctionFragment;
    "devAddr()": FunctionFragment;
    "getPresaleRecordsByToken(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "presaleCount()": FunctionFragment;
    "presaleRecordByID(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "salesFeeInPercent()": FunctionFragment;
    "teamAddr()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniswapV2Router02()": FunctionFragment;
    "updateFees(uint256,uint8)": FunctionFragment;
    "upfrontfee()": FunctionFragment;
    "withdrawBNBs()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createPresale",
    values: [
      {
        id: BigNumberish;
        presaleOwner: string;
        preSaleStatus: BigNumberish;
        preSaleToken: string;
        decimals: BigNumberish;
      },
      {
        tokensForSale: BigNumberish;
        tokensPCForLP: BigNumberish;
        typeOfPresale: BigNumberish;
        priceOfEachToken: BigNumberish;
        criteriaToken: string;
        minTokensForParticipation: BigNumberish;
        refundType: BigNumberish;
      },
      {
        startedAt: BigNumberish;
        expiredAt: BigNumberish;
        lpLockupDuration: BigNumberish;
      },
      {
        minTokensReq: BigNumberish;
        maxTokensReq: BigNumberish;
        softCap: BigNumberish;
      },
      {
        isEnabled: boolean;
        firstReleasePC: BigNumberish;
        vestingPeriodOfEachCycle: BigNumberish;
        tokensReleaseEachCyclePC: BigNumberish;
      },
      {
        isEnabled: boolean;
        vestingTokens: BigNumberish;
        firstReleaseTime: BigNumberish;
        firstReleasePC: BigNumberish;
        vestingPeriodOfEachCycle: BigNumberish;
        tokensReleaseEachCyclePC: BigNumberish;
      },
      {
        logoURL: string;
        websiteURL: string;
        twitterURL: string;
        telegramURL: string;
        discordURL: string;
        description: string;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "devAddr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPresaleRecordsByToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "presaleCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "presaleRecordByID",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "salesFeeInPercent",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "teamAddr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Router02",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateFees",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upfrontfee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBNBs",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createPresale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "devAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPresaleRecordsByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "presaleCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "presaleRecordByID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "salesFeeInPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "teamAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Router02",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upfrontfee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBNBs",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class Launchpadv2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: Launchpadv2Interface;

  functions: {
    createPresale(
      _presaleInfo: {
        id: BigNumberish;
        presaleOwner: string;
        preSaleStatus: BigNumberish;
        preSaleToken: string;
        decimals: BigNumberish;
      },
      _participationCriteria: {
        tokensForSale: BigNumberish;
        tokensPCForLP: BigNumberish;
        typeOfPresale: BigNumberish;
        priceOfEachToken: BigNumberish;
        criteriaToken: string;
        minTokensForParticipation: BigNumberish;
        refundType: BigNumberish;
      },
      _presaleTimes: {
        startedAt: BigNumberish;
        expiredAt: BigNumberish;
        lpLockupDuration: BigNumberish;
      },
      _reqestedTokens: {
        minTokensReq: BigNumberish;
        maxTokensReq: BigNumberish;
        softCap: BigNumberish;
      },
      _contributorsVesting: {
        isEnabled: boolean;
        firstReleasePC: BigNumberish;
        vestingPeriodOfEachCycle: BigNumberish;
        tokensReleaseEachCyclePC: BigNumberish;
      },
      _teamVesting: {
        isEnabled: boolean;
        vestingTokens: BigNumberish;
        firstReleaseTime: BigNumberish;
        firstReleasePC: BigNumberish;
        vestingPeriodOfEachCycle: BigNumberish;
        tokensReleaseEachCyclePC: BigNumberish;
      },
      _generalInfo: {
        logoURL: string;
        websiteURL: string;
        twitterURL: string;
        telegramURL: string;
        discordURL: string;
        description: string;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    devAddr(overrides?: CallOverrides): Promise<[string]>;

    getPresaleRecordsByToken(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    presaleCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    presaleRecordByID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    salesFeeInPercent(overrides?: CallOverrides): Promise<[number]>;

    teamAddr(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniswapV2Router02(overrides?: CallOverrides): Promise<[string]>;

    updateFees(
      _upfrontFee: BigNumberish,
      _salesFeeInPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upfrontfee(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawBNBs(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createPresale(
    _presaleInfo: {
      id: BigNumberish;
      presaleOwner: string;
      preSaleStatus: BigNumberish;
      preSaleToken: string;
      decimals: BigNumberish;
    },
    _participationCriteria: {
      tokensForSale: BigNumberish;
      tokensPCForLP: BigNumberish;
      typeOfPresale: BigNumberish;
      priceOfEachToken: BigNumberish;
      criteriaToken: string;
      minTokensForParticipation: BigNumberish;
      refundType: BigNumberish;
    },
    _presaleTimes: {
      startedAt: BigNumberish;
      expiredAt: BigNumberish;
      lpLockupDuration: BigNumberish;
    },
    _reqestedTokens: {
      minTokensReq: BigNumberish;
      maxTokensReq: BigNumberish;
      softCap: BigNumberish;
    },
    _contributorsVesting: {
      isEnabled: boolean;
      firstReleasePC: BigNumberish;
      vestingPeriodOfEachCycle: BigNumberish;
      tokensReleaseEachCyclePC: BigNumberish;
    },
    _teamVesting: {
      isEnabled: boolean;
      vestingTokens: BigNumberish;
      firstReleaseTime: BigNumberish;
      firstReleasePC: BigNumberish;
      vestingPeriodOfEachCycle: BigNumberish;
      tokensReleaseEachCyclePC: BigNumberish;
    },
    _generalInfo: {
      logoURL: string;
      websiteURL: string;
      twitterURL: string;
      telegramURL: string;
      discordURL: string;
      description: string;
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  devAddr(overrides?: CallOverrides): Promise<string>;

  getPresaleRecordsByToken(
    _address: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  presaleCount(overrides?: CallOverrides): Promise<BigNumber>;

  presaleRecordByID(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  salesFeeInPercent(overrides?: CallOverrides): Promise<number>;

  teamAddr(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniswapV2Router02(overrides?: CallOverrides): Promise<string>;

  updateFees(
    _upfrontFee: BigNumberish,
    _salesFeeInPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upfrontfee(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawBNBs(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createPresale(
      _presaleInfo: {
        id: BigNumberish;
        presaleOwner: string;
        preSaleStatus: BigNumberish;
        preSaleToken: string;
        decimals: BigNumberish;
      },
      _participationCriteria: {
        tokensForSale: BigNumberish;
        tokensPCForLP: BigNumberish;
        typeOfPresale: BigNumberish;
        priceOfEachToken: BigNumberish;
        criteriaToken: string;
        minTokensForParticipation: BigNumberish;
        refundType: BigNumberish;
      },
      _presaleTimes: {
        startedAt: BigNumberish;
        expiredAt: BigNumberish;
        lpLockupDuration: BigNumberish;
      },
      _reqestedTokens: {
        minTokensReq: BigNumberish;
        maxTokensReq: BigNumberish;
        softCap: BigNumberish;
      },
      _contributorsVesting: {
        isEnabled: boolean;
        firstReleasePC: BigNumberish;
        vestingPeriodOfEachCycle: BigNumberish;
        tokensReleaseEachCyclePC: BigNumberish;
      },
      _teamVesting: {
        isEnabled: boolean;
        vestingTokens: BigNumberish;
        firstReleaseTime: BigNumberish;
        firstReleasePC: BigNumberish;
        vestingPeriodOfEachCycle: BigNumberish;
        tokensReleaseEachCyclePC: BigNumberish;
      },
      _generalInfo: {
        logoURL: string;
        websiteURL: string;
        twitterURL: string;
        telegramURL: string;
        discordURL: string;
        description: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    devAddr(overrides?: CallOverrides): Promise<string>;

    getPresaleRecordsByToken(
      _address: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    presaleCount(overrides?: CallOverrides): Promise<BigNumber>;

    presaleRecordByID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    salesFeeInPercent(overrides?: CallOverrides): Promise<number>;

    teamAddr(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV2Router02(overrides?: CallOverrides): Promise<string>;

    updateFees(
      _upfrontFee: BigNumberish,
      _salesFeeInPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    upfrontfee(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawBNBs(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    createPresale(
      _presaleInfo: {
        id: BigNumberish;
        presaleOwner: string;
        preSaleStatus: BigNumberish;
        preSaleToken: string;
        decimals: BigNumberish;
      },
      _participationCriteria: {
        tokensForSale: BigNumberish;
        tokensPCForLP: BigNumberish;
        typeOfPresale: BigNumberish;
        priceOfEachToken: BigNumberish;
        criteriaToken: string;
        minTokensForParticipation: BigNumberish;
        refundType: BigNumberish;
      },
      _presaleTimes: {
        startedAt: BigNumberish;
        expiredAt: BigNumberish;
        lpLockupDuration: BigNumberish;
      },
      _reqestedTokens: {
        minTokensReq: BigNumberish;
        maxTokensReq: BigNumberish;
        softCap: BigNumberish;
      },
      _contributorsVesting: {
        isEnabled: boolean;
        firstReleasePC: BigNumberish;
        vestingPeriodOfEachCycle: BigNumberish;
        tokensReleaseEachCyclePC: BigNumberish;
      },
      _teamVesting: {
        isEnabled: boolean;
        vestingTokens: BigNumberish;
        firstReleaseTime: BigNumberish;
        firstReleasePC: BigNumberish;
        vestingPeriodOfEachCycle: BigNumberish;
        tokensReleaseEachCyclePC: BigNumberish;
      },
      _generalInfo: {
        logoURL: string;
        websiteURL: string;
        twitterURL: string;
        telegramURL: string;
        discordURL: string;
        description: string;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    devAddr(overrides?: CallOverrides): Promise<BigNumber>;

    getPresaleRecordsByToken(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    presaleCount(overrides?: CallOverrides): Promise<BigNumber>;

    presaleRecordByID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    salesFeeInPercent(overrides?: CallOverrides): Promise<BigNumber>;

    teamAddr(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniswapV2Router02(overrides?: CallOverrides): Promise<BigNumber>;

    updateFees(
      _upfrontFee: BigNumberish,
      _salesFeeInPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upfrontfee(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawBNBs(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createPresale(
      _presaleInfo: {
        id: BigNumberish;
        presaleOwner: string;
        preSaleStatus: BigNumberish;
        preSaleToken: string;
        decimals: BigNumberish;
      },
      _participationCriteria: {
        tokensForSale: BigNumberish;
        tokensPCForLP: BigNumberish;
        typeOfPresale: BigNumberish;
        priceOfEachToken: BigNumberish;
        criteriaToken: string;
        minTokensForParticipation: BigNumberish;
        refundType: BigNumberish;
      },
      _presaleTimes: {
        startedAt: BigNumberish;
        expiredAt: BigNumberish;
        lpLockupDuration: BigNumberish;
      },
      _reqestedTokens: {
        minTokensReq: BigNumberish;
        maxTokensReq: BigNumberish;
        softCap: BigNumberish;
      },
      _contributorsVesting: {
        isEnabled: boolean;
        firstReleasePC: BigNumberish;
        vestingPeriodOfEachCycle: BigNumberish;
        tokensReleaseEachCyclePC: BigNumberish;
      },
      _teamVesting: {
        isEnabled: boolean;
        vestingTokens: BigNumberish;
        firstReleaseTime: BigNumberish;
        firstReleasePC: BigNumberish;
        vestingPeriodOfEachCycle: BigNumberish;
        tokensReleaseEachCyclePC: BigNumberish;
      },
      _generalInfo: {
        logoURL: string;
        websiteURL: string;
        twitterURL: string;
        telegramURL: string;
        discordURL: string;
        description: string;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    devAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPresaleRecordsByToken(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    presaleCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    presaleRecordByID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    salesFeeInPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    teamAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV2Router02(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateFees(
      _upfrontFee: BigNumberish,
      _salesFeeInPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upfrontfee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawBNBs(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
