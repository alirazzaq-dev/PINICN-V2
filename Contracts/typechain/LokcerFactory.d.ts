/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LokcerFactoryInterface extends ethers.utils.Interface {
  functions: {
    "addTokenstoALocker(uint256,uint256)": FunctionFragment;
    "createLcoker(uint8,address,address,uint256,uint256)": FunctionFragment;
    "getLockersListbyToken(address)": FunctionFragment;
    "getLockersListbyUser(address)": FunctionFragment;
    "increaseLocktime(uint256,uint256)": FunctionFragment;
    "launchpadAddress()": FunctionFragment;
    "lockerCount()": FunctionFragment;
    "lockerFee()": FunctionFragment;
    "lockerInfo(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setLaunchPadAddress(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlockTokens(uint256,uint256)": FunctionFragment;
    "updateFees(uint256,uint256)": FunctionFragment;
    "updateLokcerFee()": FunctionFragment;
    "withdrawFunds()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addTokenstoALocker",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createLcoker",
    values: [BigNumberish, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLockersListbyToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLockersListbyUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLocktime",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "launchpadAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockerCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lockerFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lockerInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLaunchPadAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockTokens",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFees",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLokcerFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addTokenstoALocker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLcoker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockersListbyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockersListbyUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseLocktime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "launchpadAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockerFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockerInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLaunchPadAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateLokcerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;

  events: {
    "Locked(uint256,address,address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Unlocked(uint256,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Locked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unlocked"): EventFragment;
}

export type LockedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber] & {
    id: BigNumber;
    owner: string;
    token: string;
    numOfTokens: BigNumber;
    unlockTime: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type UnlockedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber] & {
    id: BigNumber;
    owner: string;
    token: string;
    numOfTokens: BigNumber;
  }
>;

export class LokcerFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LokcerFactoryInterface;

  functions: {
    addTokenstoALocker(
      _id: BigNumberish,
      _numOfTokens: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createLcoker(
      _type: BigNumberish,
      _owner: string,
      _token: string,
      _numOfTokens: BigNumberish,
      _unlockTime: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getLockersListbyToken(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getLockersListbyUser(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    increaseLocktime(
      _id: BigNumberish,
      _additionTime: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    launchpadAddress(overrides?: CallOverrides): Promise<[string]>;

    lockerCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockerFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockerInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        number,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        id: BigNumber;
        _type: number;
        owner: string;
        token: string;
        locker: string;
        numOfTokens: BigNumber;
        lockTime: BigNumber;
        unlockTime: BigNumber;
        status: number;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLaunchPadAddress(
      _launchpadAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlockTokens(
      _id: BigNumberish,
      _numOfTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFees(
      _lockerFee: BigNumberish,
      _updatingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateLokcerFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addTokenstoALocker(
    _id: BigNumberish,
    _numOfTokens: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createLcoker(
    _type: BigNumberish,
    _owner: string,
    _token: string,
    _numOfTokens: BigNumberish,
    _unlockTime: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getLockersListbyToken(
    _tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getLockersListbyUser(
    _userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  increaseLocktime(
    _id: BigNumberish,
    _additionTime: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  launchpadAddress(overrides?: CallOverrides): Promise<string>;

  lockerCount(overrides?: CallOverrides): Promise<BigNumber>;

  lockerFee(overrides?: CallOverrides): Promise<BigNumber>;

  lockerInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      number,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      id: BigNumber;
      _type: number;
      owner: string;
      token: string;
      locker: string;
      numOfTokens: BigNumber;
      lockTime: BigNumber;
      unlockTime: BigNumber;
      status: number;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLaunchPadAddress(
    _launchpadAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlockTokens(
    _id: BigNumberish,
    _numOfTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFees(
    _lockerFee: BigNumberish,
    _updatingFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateLokcerFee(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawFunds(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addTokenstoALocker(
      _id: BigNumberish,
      _numOfTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createLcoker(
      _type: BigNumberish,
      _owner: string,
      _token: string,
      _numOfTokens: BigNumberish,
      _unlockTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLockersListbyToken(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getLockersListbyUser(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    increaseLocktime(
      _id: BigNumberish,
      _additionTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    launchpadAddress(overrides?: CallOverrides): Promise<string>;

    lockerCount(overrides?: CallOverrides): Promise<BigNumber>;

    lockerFee(overrides?: CallOverrides): Promise<BigNumber>;

    lockerInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        number,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        id: BigNumber;
        _type: number;
        owner: string;
        token: string;
        locker: string;
        numOfTokens: BigNumber;
        lockTime: BigNumber;
        unlockTime: BigNumber;
        status: number;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setLaunchPadAddress(
      _launchpadAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockTokens(
      _id: BigNumberish,
      _numOfTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFees(
      _lockerFee: BigNumberish,
      _updatingFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateLokcerFee(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFunds(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Locked(uint256,address,address,uint256,uint256)"(
      id?: null,
      owner?: null,
      token?: null,
      numOfTokens?: null,
      unlockTime?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, BigNumber],
      {
        id: BigNumber;
        owner: string;
        token: string;
        numOfTokens: BigNumber;
        unlockTime: BigNumber;
      }
    >;

    Locked(
      id?: null,
      owner?: null,
      token?: null,
      numOfTokens?: null,
      unlockTime?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, BigNumber],
      {
        id: BigNumber;
        owner: string;
        token: string;
        numOfTokens: BigNumber;
        unlockTime: BigNumber;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Unlocked(uint256,address,address,uint256)"(
      id?: null,
      owner?: null,
      token?: null,
      numOfTokens?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber],
      { id: BigNumber; owner: string; token: string; numOfTokens: BigNumber }
    >;

    Unlocked(
      id?: null,
      owner?: null,
      token?: null,
      numOfTokens?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber],
      { id: BigNumber; owner: string; token: string; numOfTokens: BigNumber }
    >;
  };

  estimateGas: {
    addTokenstoALocker(
      _id: BigNumberish,
      _numOfTokens: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createLcoker(
      _type: BigNumberish,
      _owner: string,
      _token: string,
      _numOfTokens: BigNumberish,
      _unlockTime: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getLockersListbyToken(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLockersListbyUser(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseLocktime(
      _id: BigNumberish,
      _additionTime: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    launchpadAddress(overrides?: CallOverrides): Promise<BigNumber>;

    lockerCount(overrides?: CallOverrides): Promise<BigNumber>;

    lockerFee(overrides?: CallOverrides): Promise<BigNumber>;

    lockerInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLaunchPadAddress(
      _launchpadAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlockTokens(
      _id: BigNumberish,
      _numOfTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFees(
      _lockerFee: BigNumberish,
      _updatingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateLokcerFee(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addTokenstoALocker(
      _id: BigNumberish,
      _numOfTokens: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createLcoker(
      _type: BigNumberish,
      _owner: string,
      _token: string,
      _numOfTokens: BigNumberish,
      _unlockTime: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getLockersListbyToken(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLockersListbyUser(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseLocktime(
      _id: BigNumberish,
      _additionTime: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    launchpadAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockerCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockerFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockerInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLaunchPadAddress(
      _launchpadAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlockTokens(
      _id: BigNumberish,
      _numOfTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFees(
      _lockerFee: BigNumberish,
      _updatingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateLokcerFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
