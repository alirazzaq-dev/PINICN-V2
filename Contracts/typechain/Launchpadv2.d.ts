/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface Launchpadv2Interface extends ethers.utils.Interface {
  functions: {
    "WBNBAddr()": FunctionFragment;
    "count()": FunctionFragment;
    "createPresale(uint8,address,address,uint8,uint256,uint256,uint256,(uint256,uint256,uint256),(uint256,uint256,uint256))": FunctionFragment;
    "devAddr()": FunctionFragment;
    "isUserWhitelistedToStartProject(address)": FunctionFragment;
    "lockerFactoryAddr()": FunctionFragment;
    "owner()": FunctionFragment;
    "pancakeSwapFactoryAddr()": FunctionFragment;
    "pancakeSwapRouterAddr()": FunctionFragment;
    "presaleRecord(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "salesFeeInPercent()": FunctionFragment;
    "teamAddr()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateFees(uint256,uint8)": FunctionFragment;
    "upfrontfee()": FunctionFragment;
    "whiteListUsersToStartProject(address)": FunctionFragment;
    "withdrawBNBs()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "WBNBAddr", values?: undefined): string;
  encodeFunctionData(functionFragment: "count", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createPresale",
    values: [
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      {
        startedAt: BigNumberish;
        expiredAt: BigNumberish;
        lpLockupTime: BigNumberish;
      },
      {
        minTokensReq: BigNumberish;
        maxTokensReq: BigNumberish;
        softCap: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "devAddr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isUserWhitelistedToStartProject",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockerFactoryAddr",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pancakeSwapFactoryAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pancakeSwapRouterAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "presaleRecord",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "salesFeeInPercent",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "teamAddr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFees",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upfrontfee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whiteListUsersToStartProject",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBNBs",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "WBNBAddr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createPresale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "devAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isUserWhitelistedToStartProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockerFactoryAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pancakeSwapFactoryAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pancakeSwapRouterAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "presaleRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "salesFeeInPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "teamAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upfrontfee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whiteListUsersToStartProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBNBs",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class Launchpadv2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: Launchpadv2Interface;

  functions: {
    WBNBAddr(overrides?: CallOverrides): Promise<[string]>;

    count(overrides?: CallOverrides): Promise<[BigNumber]>;

    createPresale(
      _presaleType: BigNumberish,
      _preSaleToken: string,
      _criteriaTokenAddr: string,
      _reservedTokensPCForLP: BigNumberish,
      _tokensForSale: BigNumberish,
      _priceOfEachToken: BigNumberish,
      _minTokensForParticipation: BigNumberish,
      _presaleTimes: {
        startedAt: BigNumberish;
        expiredAt: BigNumberish;
        lpLockupTime: BigNumberish;
      },
      _reqestedTokens: {
        minTokensReq: BigNumberish;
        maxTokensReq: BigNumberish;
        softCap: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    devAddr(overrides?: CallOverrides): Promise<[string]>;

    isUserWhitelistedToStartProject(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lockerFactoryAddr(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pancakeSwapFactoryAddr(overrides?: CallOverrides): Promise<[string]>;

    pancakeSwapRouterAddr(overrides?: CallOverrides): Promise<[string]>;

    presaleRecord(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    salesFeeInPercent(overrides?: CallOverrides): Promise<[number]>;

    teamAddr(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFees(
      _upfrontFee: BigNumberish,
      _salesFeeInPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upfrontfee(overrides?: CallOverrides): Promise<[BigNumber]>;

    whiteListUsersToStartProject(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawBNBs(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  WBNBAddr(overrides?: CallOverrides): Promise<string>;

  count(overrides?: CallOverrides): Promise<BigNumber>;

  createPresale(
    _presaleType: BigNumberish,
    _preSaleToken: string,
    _criteriaTokenAddr: string,
    _reservedTokensPCForLP: BigNumberish,
    _tokensForSale: BigNumberish,
    _priceOfEachToken: BigNumberish,
    _minTokensForParticipation: BigNumberish,
    _presaleTimes: {
      startedAt: BigNumberish;
      expiredAt: BigNumberish;
      lpLockupTime: BigNumberish;
    },
    _reqestedTokens: {
      minTokensReq: BigNumberish;
      maxTokensReq: BigNumberish;
      softCap: BigNumberish;
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  devAddr(overrides?: CallOverrides): Promise<string>;

  isUserWhitelistedToStartProject(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lockerFactoryAddr(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pancakeSwapFactoryAddr(overrides?: CallOverrides): Promise<string>;

  pancakeSwapRouterAddr(overrides?: CallOverrides): Promise<string>;

  presaleRecord(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  salesFeeInPercent(overrides?: CallOverrides): Promise<number>;

  teamAddr(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFees(
    _upfrontFee: BigNumberish,
    _salesFeeInPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upfrontfee(overrides?: CallOverrides): Promise<BigNumber>;

  whiteListUsersToStartProject(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawBNBs(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    WBNBAddr(overrides?: CallOverrides): Promise<string>;

    count(overrides?: CallOverrides): Promise<BigNumber>;

    createPresale(
      _presaleType: BigNumberish,
      _preSaleToken: string,
      _criteriaTokenAddr: string,
      _reservedTokensPCForLP: BigNumberish,
      _tokensForSale: BigNumberish,
      _priceOfEachToken: BigNumberish,
      _minTokensForParticipation: BigNumberish,
      _presaleTimes: {
        startedAt: BigNumberish;
        expiredAt: BigNumberish;
        lpLockupTime: BigNumberish;
      },
      _reqestedTokens: {
        minTokensReq: BigNumberish;
        maxTokensReq: BigNumberish;
        softCap: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    devAddr(overrides?: CallOverrides): Promise<string>;

    isUserWhitelistedToStartProject(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockerFactoryAddr(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pancakeSwapFactoryAddr(overrides?: CallOverrides): Promise<string>;

    pancakeSwapRouterAddr(overrides?: CallOverrides): Promise<string>;

    presaleRecord(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    salesFeeInPercent(overrides?: CallOverrides): Promise<number>;

    teamAddr(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFees(
      _upfrontFee: BigNumberish,
      _salesFeeInPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    upfrontfee(overrides?: CallOverrides): Promise<BigNumber>;

    whiteListUsersToStartProject(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawBNBs(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    WBNBAddr(overrides?: CallOverrides): Promise<BigNumber>;

    count(overrides?: CallOverrides): Promise<BigNumber>;

    createPresale(
      _presaleType: BigNumberish,
      _preSaleToken: string,
      _criteriaTokenAddr: string,
      _reservedTokensPCForLP: BigNumberish,
      _tokensForSale: BigNumberish,
      _priceOfEachToken: BigNumberish,
      _minTokensForParticipation: BigNumberish,
      _presaleTimes: {
        startedAt: BigNumberish;
        expiredAt: BigNumberish;
        lpLockupTime: BigNumberish;
      },
      _reqestedTokens: {
        minTokensReq: BigNumberish;
        maxTokensReq: BigNumberish;
        softCap: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    devAddr(overrides?: CallOverrides): Promise<BigNumber>;

    isUserWhitelistedToStartProject(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockerFactoryAddr(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pancakeSwapFactoryAddr(overrides?: CallOverrides): Promise<BigNumber>;

    pancakeSwapRouterAddr(overrides?: CallOverrides): Promise<BigNumber>;

    presaleRecord(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    salesFeeInPercent(overrides?: CallOverrides): Promise<BigNumber>;

    teamAddr(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFees(
      _upfrontFee: BigNumberish,
      _salesFeeInPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upfrontfee(overrides?: CallOverrides): Promise<BigNumber>;

    whiteListUsersToStartProject(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawBNBs(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    WBNBAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createPresale(
      _presaleType: BigNumberish,
      _preSaleToken: string,
      _criteriaTokenAddr: string,
      _reservedTokensPCForLP: BigNumberish,
      _tokensForSale: BigNumberish,
      _priceOfEachToken: BigNumberish,
      _minTokensForParticipation: BigNumberish,
      _presaleTimes: {
        startedAt: BigNumberish;
        expiredAt: BigNumberish;
        lpLockupTime: BigNumberish;
      },
      _reqestedTokens: {
        minTokensReq: BigNumberish;
        maxTokensReq: BigNumberish;
        softCap: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    devAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isUserWhitelistedToStartProject(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockerFactoryAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pancakeSwapFactoryAddr(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pancakeSwapRouterAddr(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    presaleRecord(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    salesFeeInPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    teamAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFees(
      _upfrontFee: BigNumberish,
      _salesFeeInPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upfrontfee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whiteListUsersToStartProject(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawBNBs(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
