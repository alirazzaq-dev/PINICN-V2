/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IPLockInterface extends ethers.utils.Interface {
  functions: {
    "addTokenstoALocker(uint256)": FunctionFragment;
    "increaseLocktime(uint256)": FunctionFragment;
    "unlockTokens(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addTokenstoALocker",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLocktime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockTokens",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addTokenstoALocker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseLocktime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockTokens",
    data: BytesLike
  ): Result;

  events: {
    "Locked(uint256,address,address,uint256,uint256)": EventFragment;
    "Unlocked(uint256,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Locked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unlocked"): EventFragment;
}

export type LockedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber] & {
    id: BigNumber;
    owner: string;
    token: string;
    numOfTokens: BigNumber;
    unlockTime: BigNumber;
  }
>;

export type UnlockedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber] & {
    id: BigNumber;
    owner: string;
    token: string;
    numOfTokens: BigNumber;
  }
>;

export class IPLock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPLockInterface;

  functions: {
    addTokenstoALocker(
      _numOfTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseLocktime(
      _additionTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlockTokens(
      _numOfTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addTokenstoALocker(
    _numOfTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseLocktime(
    _additionTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlockTokens(
    _numOfTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addTokenstoALocker(
      _numOfTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseLocktime(
      _additionTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockTokens(
      _numOfTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Locked(uint256,address,address,uint256,uint256)"(
      id?: null,
      owner?: null,
      token?: null,
      numOfTokens?: null,
      unlockTime?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, BigNumber],
      {
        id: BigNumber;
        owner: string;
        token: string;
        numOfTokens: BigNumber;
        unlockTime: BigNumber;
      }
    >;

    Locked(
      id?: null,
      owner?: null,
      token?: null,
      numOfTokens?: null,
      unlockTime?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, BigNumber],
      {
        id: BigNumber;
        owner: string;
        token: string;
        numOfTokens: BigNumber;
        unlockTime: BigNumber;
      }
    >;

    "Unlocked(uint256,address,address,uint256)"(
      id?: null,
      owner?: null,
      token?: null,
      numOfTokens?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber],
      { id: BigNumber; owner: string; token: string; numOfTokens: BigNumber }
    >;

    Unlocked(
      id?: null,
      owner?: null,
      token?: null,
      numOfTokens?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber],
      { id: BigNumber; owner: string; token: string; numOfTokens: BigNumber }
    >;
  };

  estimateGas: {
    addTokenstoALocker(
      _numOfTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseLocktime(
      _additionTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlockTokens(
      _numOfTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addTokenstoALocker(
      _numOfTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseLocktime(
      _additionTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlockTokens(
      _numOfTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
