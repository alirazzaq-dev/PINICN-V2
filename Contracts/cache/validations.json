{
  "version": "3.2",
  "log": [
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "d6c41454fc8c5634718d3064d2d4bab3a9557a7e23bb3e27211a322edc49c0d8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "e02f1f4b047a5eb71d639999c84628799e46229e254f1742b81136088c5560d1",
          "withoutMetadata": "7cd1f75ffaa6ea0e475b7d14f2e3bfc3e5714c4d3fb53e67e09131612d540c18",
          "linkedWithoutMetadata": "7cd1f75ffaa6ea0e475b7d14f2e3bfc3e5714c4d3fb53e67e09131612d540c18"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "getPresaleRecordsByToken(address)",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:38"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:20"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:24"
            },
            {
              "contract": "Launchpadv2",
              "label": "uniswapV2Router02",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:27"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:32"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:33"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "2cf2cad183e96e61bce9d370990ab50c0d6fcb9ab4ec2c39f919e65a503eb290",
          "withoutMetadata": "78359edbcdf38317a18d427dcb9168a5041512809c1ea7d59bb7e29c6a7eee21",
          "linkedWithoutMetadata": "78359edbcdf38317a18d427dcb9168a5041512809c1ea7d59bb7e29c6a7eee21"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),address,(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()",
          "cancelSale()",
          "getContributorReleaseStatus(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:97"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "uniswapV2Router02",
              "type": "t_contract(IUniswapV2Router02)3945",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4294_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4311_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4270_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4277_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4320_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4286_storage",
              "src": "contracts\\Launchpad\\Presale.sol:33"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4258_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4329_storage",
              "src": "contracts\\Launchpad\\Presale.sol:36"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4342_storage",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4263_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4936_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:41"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4920))",
              "src": "contracts\\Launchpad\\Presale.sol:44"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4956_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:52"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:53"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_contract(IUniswapV2Router02)3945": {
              "label": "contract IUniswapV2Router02"
            },
            "t_struct(PresaleInfo)4294_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4240"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(PreSaleStatus)4240": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED",
                "CANCELED"
              ]
            },
            "t_struct(ParticipationCriteria)4311_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4243"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4243": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4270_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4277_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4320_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4286_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4258_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4329_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4342_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4263_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4263_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4936_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4936_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4920))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4920)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4920": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4956_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4956_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4920"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6796_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6796_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6993_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6993_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6993_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6970"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6927"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6967"
                }
              ]
            },
            "t_enum(Type)6970": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6927": {
              "label": "contract Locker"
            },
            "t_enum(Status)6967": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7564_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7564_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7564_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7545"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7542"
                }
              ]
            },
            "t_enum(Type)7545": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7542": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "d6c41454fc8c5634718d3064d2d4bab3a9557a7e23bb3e27211a322edc49c0d8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "07ea2e3efee1191ff0aa1a2a70c4c8b41e4ec167f9c5c66b7d5ad5e8577fb041",
          "withoutMetadata": "730e875655e254ae5c4050b003b7c946312fb0299136ed8a038c2cee5e51542c",
          "linkedWithoutMetadata": "730e875655e254ae5c4050b003b7c946312fb0299136ed8a038c2cee5e51542c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "getPresaleRecordsByToken(address)",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:38"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:20"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:24"
            },
            {
              "contract": "Launchpadv2",
              "label": "uniswapV2Router02",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:27"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:32"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:33"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "1d561c99bbfe4d3b395e4e6e812cb2aeeb170482e26cab1f02c768953b8e9a54",
          "withoutMetadata": "838ac5602d999c17850e1cb543e56ceb6670f99e9a5782bf7a051c95958c6e55",
          "linkedWithoutMetadata": "838ac5602d999c17850e1cb543e56ceb6670f99e9a5782bf7a051c95958c6e55"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),address,(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()",
          "cancelSale()",
          "getContributorReleaseStatus(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:97"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "uniswapV2Router02",
              "type": "t_contract(IUniswapV2Router02)3945",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4294_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4311_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4270_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4277_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4320_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4286_storage",
              "src": "contracts\\Launchpad\\Presale.sol:33"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4258_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4329_storage",
              "src": "contracts\\Launchpad\\Presale.sol:36"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4342_storage",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4263_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4936_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:41"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4920))",
              "src": "contracts\\Launchpad\\Presale.sol:44"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4956_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:52"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:53"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_contract(IUniswapV2Router02)3945": {
              "label": "contract IUniswapV2Router02"
            },
            "t_struct(PresaleInfo)4294_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4240"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(PreSaleStatus)4240": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED",
                "CANCELED"
              ]
            },
            "t_struct(ParticipationCriteria)4311_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4243"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4243": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4270_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4277_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4320_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4286_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4258_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4329_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4342_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4263_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4263_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4936_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4936_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4920))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4920)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4920": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4956_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4956_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4920"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6808_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6808_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)7005_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)7005_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)7005_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6982"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6939"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6979"
                }
              ]
            },
            "t_enum(Type)6982": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6939": {
              "label": "contract Locker"
            },
            "t_enum(Status)6979": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7576_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7576_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7576_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7557"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7554"
                }
              ]
            },
            "t_enum(Type)7557": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7554": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "d6c41454fc8c5634718d3064d2d4bab3a9557a7e23bb3e27211a322edc49c0d8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "90729ea4a5e4715c385f4aa0aa8b00bd1e02310cd531fa4d223ae464b80707fc",
          "withoutMetadata": "7b6d5321adeee9758f15588b97216fb96af12bcdb9dfd5518976f13857eac129",
          "linkedWithoutMetadata": "7b6d5321adeee9758f15588b97216fb96af12bcdb9dfd5518976f13857eac129"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "getPresaleRecordsByToken(address)",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:38"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:20"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:24"
            },
            {
              "contract": "Launchpadv2",
              "label": "uniswapV2Router02",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:27"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:32"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:33"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "eb8067f2857fc7c7795f7b197e17f01efb3ff13efa91798b06b7b9189c2f6973",
          "withoutMetadata": "838ac5602d999c17850e1cb543e56ceb6670f99e9a5782bf7a051c95958c6e55",
          "linkedWithoutMetadata": "838ac5602d999c17850e1cb543e56ceb6670f99e9a5782bf7a051c95958c6e55"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),address,(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()",
          "cancelSale()",
          "getContributorReleaseStatus(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:97"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "uniswapV2Router02",
              "type": "t_contract(IUniswapV2Router02)3945",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4294_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4311_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4270_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4277_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4320_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4286_storage",
              "src": "contracts\\Launchpad\\Presale.sol:33"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4258_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4329_storage",
              "src": "contracts\\Launchpad\\Presale.sol:36"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4342_storage",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4263_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4936_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:41"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4920))",
              "src": "contracts\\Launchpad\\Presale.sol:44"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4956_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:52"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:53"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_contract(IUniswapV2Router02)3945": {
              "label": "contract IUniswapV2Router02"
            },
            "t_struct(PresaleInfo)4294_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4240"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(PreSaleStatus)4240": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED",
                "CANCELED"
              ]
            },
            "t_struct(ParticipationCriteria)4311_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4243"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4243": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4270_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4277_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4320_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4286_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4258_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4329_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4342_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4263_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4263_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4936_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4936_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4920))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4920)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4920": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4956_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4956_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4920"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6808_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6808_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)7005_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)7005_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)7005_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6982"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6939"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6979"
                }
              ]
            },
            "t_enum(Type)6982": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6939": {
              "label": "contract Locker"
            },
            "t_enum(Status)6979": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7576_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7576_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7576_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7557"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7554"
                }
              ]
            },
            "t_enum(Type)7557": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7554": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "d6c41454fc8c5634718d3064d2d4bab3a9557a7e23bb3e27211a322edc49c0d8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "1ee49e154b8b3c09fa73e31a41e0c20d417051815b28b4dbc94a8aa1a9550347",
          "withoutMetadata": "f46978ee34d369f2fc3f90074a32b8bd7e07c6fb41ab0de155eca74112f3580e",
          "linkedWithoutMetadata": "f46978ee34d369f2fc3f90074a32b8bd7e07c6fb41ab0de155eca74112f3580e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "getPresaleRecordsByToken(address)",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:38"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:20"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:24"
            },
            {
              "contract": "Launchpadv2",
              "label": "uniswapV2Router02",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:27"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:32"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:33"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "efab678f1e031ae34da0f4531e2b61b1b638e31686f131d6180a4e4e1d633c8d",
          "withoutMetadata": "c53e4ae24d40b0d439c15ddfa3348d49bc60462b85e4bdad968b29f460047deb",
          "linkedWithoutMetadata": "c53e4ae24d40b0d439c15ddfa3348d49bc60462b85e4bdad968b29f460047deb"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),address,(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()",
          "cancelSale()",
          "getContributorReleaseStatus(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:97"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "uniswapV2Router02",
              "type": "t_contract(IUniswapV2Router02)3945",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4294_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4311_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4270_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4277_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4320_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4286_storage",
              "src": "contracts\\Launchpad\\Presale.sol:33"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4258_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4329_storage",
              "src": "contracts\\Launchpad\\Presale.sol:36"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4342_storage",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4263_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4936_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:41"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4920))",
              "src": "contracts\\Launchpad\\Presale.sol:44"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4956_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:52"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:53"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_contract(IUniswapV2Router02)3945": {
              "label": "contract IUniswapV2Router02"
            },
            "t_struct(PresaleInfo)4294_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4240"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(PreSaleStatus)4240": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED",
                "CANCELED"
              ]
            },
            "t_struct(ParticipationCriteria)4311_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4243"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4243": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4270_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4277_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4320_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4286_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4258_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4329_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4342_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4263_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4263_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4936_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4936_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4920))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4920)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4920": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4956_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4956_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4920"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6805_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6805_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)7002_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)7002_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)7002_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6979"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6936"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6976"
                }
              ]
            },
            "t_enum(Type)6979": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6936": {
              "label": "contract Locker"
            },
            "t_enum(Status)6976": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7573_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7573_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7573_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7554"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7551"
                }
              ]
            },
            "t_enum(Type)7554": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7551": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "d6c41454fc8c5634718d3064d2d4bab3a9557a7e23bb3e27211a322edc49c0d8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "b5c4cf489aa076948eccaf6bf7c4ddd681836d5cdb8cef23c11eb5cbceb628b4",
          "withoutMetadata": "43e0ee58f7590220d07ca438ddd45e82231d1f89ba7093865a53933e69f20ffc",
          "linkedWithoutMetadata": "43e0ee58f7590220d07ca438ddd45e82231d1f89ba7093865a53933e69f20ffc"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "getPresaleRecordsByToken(address)",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:38"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:20"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:24"
            },
            {
              "contract": "Launchpadv2",
              "label": "uniswapV2Router02",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:27"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:32"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:33"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "4dbb506756fb3d92dc32492624fd3147b255a2e5ea9c49508a60ea37feffcc4a",
          "withoutMetadata": "d02e2bd9e5c45f6448fd6c2d9de760bea42b583713f367cf59fb0058d03f0f49",
          "linkedWithoutMetadata": "d02e2bd9e5c45f6448fd6c2d9de760bea42b583713f367cf59fb0058d03f0f49"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),address,(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()",
          "cancelSale()",
          "getContributorReleaseStatus(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:97"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "uniswapV2Router02",
              "type": "t_contract(IUniswapV2Router02)3945",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4294_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4311_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4270_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4277_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4320_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4286_storage",
              "src": "contracts\\Launchpad\\Presale.sol:33"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4258_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4329_storage",
              "src": "contracts\\Launchpad\\Presale.sol:36"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4342_storage",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4263_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4936_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:41"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4920))",
              "src": "contracts\\Launchpad\\Presale.sol:44"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4956_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:52"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:53"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_contract(IUniswapV2Router02)3945": {
              "label": "contract IUniswapV2Router02"
            },
            "t_struct(PresaleInfo)4294_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4240"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(PreSaleStatus)4240": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED",
                "CANCELED"
              ]
            },
            "t_struct(ParticipationCriteria)4311_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4243"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4243": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4270_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4277_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4320_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4286_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4258_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4329_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4342_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4263_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4263_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4936_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4936_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4920))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4920)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4920": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4956_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4956_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4920"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6790_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6790_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6987_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6987_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6987_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6964"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6921"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6961"
                }
              ]
            },
            "t_enum(Type)6964": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6921": {
              "label": "contract Locker"
            },
            "t_enum(Status)6961": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7558_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7558_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7558_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7539"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7536"
                }
              ]
            },
            "t_enum(Type)7539": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7536": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "d6c41454fc8c5634718d3064d2d4bab3a9557a7e23bb3e27211a322edc49c0d8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "4b1e9c63dea92459d5b6bb45db9eb59fa86a558ebbaf25451adbc99b9c555eb5",
          "withoutMetadata": "8e84a2503590a0c8ab316ca3d898b5e98e8835b2a3ccc42914aa3c5939efe28d",
          "linkedWithoutMetadata": "8e84a2503590a0c8ab316ca3d898b5e98e8835b2a3ccc42914aa3c5939efe28d"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "getPresaleRecordsByToken(address)",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:38"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:20"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:24"
            },
            {
              "contract": "Launchpadv2",
              "label": "uniswapV2Router02",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:27"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:32"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:33"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "1876f8fcaa1a0dc24b1cd23e3c5a6150caa5627d041a5ed757b081472621e9eb",
          "withoutMetadata": "e875d493544e2a45e0947c61966af3f4b1edbae452a2e5318825687b895ce024",
          "linkedWithoutMetadata": "e875d493544e2a45e0947c61966af3f4b1edbae452a2e5318825687b895ce024"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),address,(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()",
          "cancelSale()",
          "getContributorReleaseStatus(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:97"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "uniswapV2Router02",
              "type": "t_contract(IUniswapV2Router02)3945",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4294_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4311_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4270_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4277_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4320_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4286_storage",
              "src": "contracts\\Launchpad\\Presale.sol:33"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4258_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4329_storage",
              "src": "contracts\\Launchpad\\Presale.sol:36"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4342_storage",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4263_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4936_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:41"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4920))",
              "src": "contracts\\Launchpad\\Presale.sol:44"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4956_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:52"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:53"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_contract(IUniswapV2Router02)3945": {
              "label": "contract IUniswapV2Router02"
            },
            "t_struct(PresaleInfo)4294_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4240"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(PreSaleStatus)4240": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED",
                "CANCELED"
              ]
            },
            "t_struct(ParticipationCriteria)4311_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4243"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4243": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4270_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4277_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4320_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4286_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4258_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4329_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4342_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4263_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4263_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4936_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4936_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4920))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4920)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4920": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4956_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4956_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4920"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6809_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6809_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)7006_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)7006_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)7006_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6983"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6940"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6980"
                }
              ]
            },
            "t_enum(Type)6983": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6940": {
              "label": "contract Locker"
            },
            "t_enum(Status)6980": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7577_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7577_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7577_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7558"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7555"
                }
              ]
            },
            "t_enum(Type)7558": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7555": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "d6c41454fc8c5634718d3064d2d4bab3a9557a7e23bb3e27211a322edc49c0d8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "3df67c7b62d1829e84a119c0be03ad866c730380ff3779dd4341add84893eb48",
          "withoutMetadata": "2cbc799ffadb4f0c54554ecb7d81bcd3546772e8e41fe8b2a4523465a7c4e3cb",
          "linkedWithoutMetadata": "2cbc799ffadb4f0c54554ecb7d81bcd3546772e8e41fe8b2a4523465a7c4e3cb"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "getPresaleRecordsByToken(address)",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:38"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:20"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:24"
            },
            {
              "contract": "Launchpadv2",
              "label": "uniswapV2Router02",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:27"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:32"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:33"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "a805287e677b607d70bf3445759742591a6d4477598cd3b142a99a4370a7a322",
          "withoutMetadata": "5be98501f7106610b0de163c70e1804c715b6e51571595c764465d9cfe9015fe",
          "linkedWithoutMetadata": "5be98501f7106610b0de163c70e1804c715b6e51571595c764465d9cfe9015fe"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),address,(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()",
          "cancelSale()",
          "getContributorReleaseStatus(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:97"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "uniswapV2Router02",
              "type": "t_contract(IUniswapV2Router02)3945",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4294_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4311_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4270_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4277_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4320_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4286_storage",
              "src": "contracts\\Launchpad\\Presale.sol:33"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4258_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4329_storage",
              "src": "contracts\\Launchpad\\Presale.sol:36"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4342_storage",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4263_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4936_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:41"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4920))",
              "src": "contracts\\Launchpad\\Presale.sol:44"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4956_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:52"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:53"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_contract(IUniswapV2Router02)3945": {
              "label": "contract IUniswapV2Router02"
            },
            "t_struct(PresaleInfo)4294_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4240"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(PreSaleStatus)4240": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED",
                "CANCELED"
              ]
            },
            "t_struct(ParticipationCriteria)4311_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4243"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4243": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4270_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4277_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4320_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4286_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4258_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4329_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4342_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4263_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4263_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4936_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4936_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4920))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4920)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4920": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4956_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4956_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4920"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6819_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6819_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)7016_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)7016_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)7016_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6993"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6950"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6990"
                }
              ]
            },
            "t_enum(Type)6993": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6950": {
              "label": "contract Locker"
            },
            "t_enum(Status)6990": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7587_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7587_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7587_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7568"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7565"
                }
              ]
            },
            "t_enum(Type)7568": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7565": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "d6c41454fc8c5634718d3064d2d4bab3a9557a7e23bb3e27211a322edc49c0d8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "a8f0889a9c7ec9ae1ab33ac34bc53db67e03d624144f89c81f768d85af739241",
          "withoutMetadata": "cf31f7c3b8224a950b23e808de397b8f7e8b3f0c74c3aa62b8abb2afeda0230c",
          "linkedWithoutMetadata": "cf31f7c3b8224a950b23e808de397b8f7e8b3f0c74c3aa62b8abb2afeda0230c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "getPresaleRecordsByToken(address)",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:38"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:20"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:24"
            },
            {
              "contract": "Launchpadv2",
              "label": "uniswapV2Router02",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:27"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:32"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:33"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "4dfe9e64de21442414d2e4db74f91f05c98c27c43b528a43305e077e34d85601",
          "withoutMetadata": "d02e2bd9e5c45f6448fd6c2d9de760bea42b583713f367cf59fb0058d03f0f49",
          "linkedWithoutMetadata": "d02e2bd9e5c45f6448fd6c2d9de760bea42b583713f367cf59fb0058d03f0f49"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),address,(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()",
          "cancelSale()",
          "getContributorReleaseStatus(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:97"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "uniswapV2Router02",
              "type": "t_contract(IUniswapV2Router02)3945",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4294_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4311_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4270_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4277_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4320_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4286_storage",
              "src": "contracts\\Launchpad\\Presale.sol:33"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4258_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4329_storage",
              "src": "contracts\\Launchpad\\Presale.sol:36"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4342_storage",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4263_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4936_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:41"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4920))",
              "src": "contracts\\Launchpad\\Presale.sol:44"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4956_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:52"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:53"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_contract(IUniswapV2Router02)3945": {
              "label": "contract IUniswapV2Router02"
            },
            "t_struct(PresaleInfo)4294_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4240"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(PreSaleStatus)4240": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED",
                "CANCELED"
              ]
            },
            "t_struct(ParticipationCriteria)4311_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4243"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4243": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4270_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4277_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4320_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4286_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4258_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4329_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4342_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4263_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4263_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4936_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4936_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4920))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4920)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4920": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4956_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4956_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4920"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6790_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6790_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6987_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6987_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6987_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6964"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6921"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6961"
                }
              ]
            },
            "t_enum(Type)6964": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6921": {
              "label": "contract Locker"
            },
            "t_enum(Status)6961": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7558_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7558_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7558_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7539"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7536"
                }
              ]
            },
            "t_enum(Type)7539": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7536": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "d6c41454fc8c5634718d3064d2d4bab3a9557a7e23bb3e27211a322edc49c0d8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "a2a8d7b86a7b4796b0ba4569e61345ed45f837b83765554ca02cbaf85a0e60a0",
          "withoutMetadata": "cf31f7c3b8224a950b23e808de397b8f7e8b3f0c74c3aa62b8abb2afeda0230c",
          "linkedWithoutMetadata": "cf31f7c3b8224a950b23e808de397b8f7e8b3f0c74c3aa62b8abb2afeda0230c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "getPresaleRecordsByToken(address)",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:38"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:20"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:24"
            },
            {
              "contract": "Launchpadv2",
              "label": "uniswapV2Router02",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:27"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:32"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:33"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "4dfe9e64de21442414d2e4db74f91f05c98c27c43b528a43305e077e34d85601",
          "withoutMetadata": "d02e2bd9e5c45f6448fd6c2d9de760bea42b583713f367cf59fb0058d03f0f49",
          "linkedWithoutMetadata": "d02e2bd9e5c45f6448fd6c2d9de760bea42b583713f367cf59fb0058d03f0f49"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),address,(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()",
          "cancelSale()",
          "getContributorReleaseStatus(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:97"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "uniswapV2Router02",
              "type": "t_contract(IUniswapV2Router02)3945",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4294_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4311_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4270_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4277_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4320_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4286_storage",
              "src": "contracts\\Launchpad\\Presale.sol:33"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4258_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4329_storage",
              "src": "contracts\\Launchpad\\Presale.sol:36"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4342_storage",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4263_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4936_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:41"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4920))",
              "src": "contracts\\Launchpad\\Presale.sol:44"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4956_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:52"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:53"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_contract(IUniswapV2Router02)3945": {
              "label": "contract IUniswapV2Router02"
            },
            "t_struct(PresaleInfo)4294_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4240"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(PreSaleStatus)4240": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED",
                "CANCELED"
              ]
            },
            "t_struct(ParticipationCriteria)4311_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4243"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4243": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4270_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4277_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4320_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4286_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4258_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4329_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4342_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4263_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4263_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4936_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4936_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4920))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4920)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4920": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4956_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4956_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4920"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6790_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6790_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6987_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6987_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6987_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6964"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6921"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6961"
                }
              ]
            },
            "t_enum(Type)6964": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6921": {
              "label": "contract Locker"
            },
            "t_enum(Status)6961": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7558_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7558_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7558_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7539"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7536"
                }
              ]
            },
            "t_enum(Type)7539": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7536": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "d6c41454fc8c5634718d3064d2d4bab3a9557a7e23bb3e27211a322edc49c0d8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "d073839c82bd35cc690768faf0c5a4aab6c69fa0bf80478751b866ce99d39f3f",
          "withoutMetadata": "cf31f7c3b8224a950b23e808de397b8f7e8b3f0c74c3aa62b8abb2afeda0230c",
          "linkedWithoutMetadata": "cf31f7c3b8224a950b23e808de397b8f7e8b3f0c74c3aa62b8abb2afeda0230c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "getPresaleRecordsByToken(address)",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:22"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "uniswapV2Router02",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:26"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:30"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:32"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "4dfe9e64de21442414d2e4db74f91f05c98c27c43b528a43305e077e34d85601",
          "withoutMetadata": "d02e2bd9e5c45f6448fd6c2d9de760bea42b583713f367cf59fb0058d03f0f49",
          "linkedWithoutMetadata": "d02e2bd9e5c45f6448fd6c2d9de760bea42b583713f367cf59fb0058d03f0f49"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),address,(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()",
          "cancelSale()",
          "getContributorReleaseStatus(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:97"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "uniswapV2Router02",
              "type": "t_contract(IUniswapV2Router02)3945",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4294_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4311_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4270_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4277_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4320_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4286_storage",
              "src": "contracts\\Launchpad\\Presale.sol:33"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4258_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4329_storage",
              "src": "contracts\\Launchpad\\Presale.sol:36"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4342_storage",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4263_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4936_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:41"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4920))",
              "src": "contracts\\Launchpad\\Presale.sol:44"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4956_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:52"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:53"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_contract(IUniswapV2Router02)3945": {
              "label": "contract IUniswapV2Router02"
            },
            "t_struct(PresaleInfo)4294_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4240"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(PreSaleStatus)4240": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED",
                "CANCELED"
              ]
            },
            "t_struct(ParticipationCriteria)4311_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4243"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4243": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4270_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4277_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4320_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4286_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4258_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4329_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4342_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4263_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4263_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4936_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4936_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4920))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4920)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4920": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4956_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4956_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4920"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6790_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6790_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6987_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6987_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6987_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6964"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6921"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6961"
                }
              ]
            },
            "t_enum(Type)6964": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6921": {
              "label": "contract Locker"
            },
            "t_enum(Status)6961": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7558_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7558_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7558_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7539"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7536"
                }
              ]
            },
            "t_enum(Type)7539": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7536": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "d6c41454fc8c5634718d3064d2d4bab3a9557a7e23bb3e27211a322edc49c0d8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "9fb0d751a4f277ed9bf8c3439fcacb61ee237ae7fe442d1efd95eb8db8c0fa69",
          "withoutMetadata": "ed28383c85405a509cc4e00546b5c4670a28e14282a6609695b2e9bbf0a5096c",
          "linkedWithoutMetadata": "ed28383c85405a509cc4e00546b5c4670a28e14282a6609695b2e9bbf0a5096c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "getPresaleRecordsByToken(address)",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:22"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "uniswapV2Router02",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:26"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:30"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:32"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "e3903bd91aee364c88c4ac119f55abb08166e141e9c8b2ab4e80183f958a7bc9",
          "withoutMetadata": "2a697fae3c81a1270bca5482ca94dcaca20587c129cb043a81495a3690f6b420",
          "linkedWithoutMetadata": "2a697fae3c81a1270bca5482ca94dcaca20587c129cb043a81495a3690f6b420"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),address,(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()",
          "cancelSale()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:97"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "uniswapV2Router02",
              "type": "t_contract(IUniswapV2Router02)3945",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4294_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4311_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4270_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4277_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4320_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4286_storage",
              "src": "contracts\\Launchpad\\Presale.sol:33"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4258_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4329_storage",
              "src": "contracts\\Launchpad\\Presale.sol:36"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4342_storage",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4263_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4936_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:41"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4920))",
              "src": "contracts\\Launchpad\\Presale.sol:44"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4956_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:52"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:53"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_contract(IUniswapV2Router02)3945": {
              "label": "contract IUniswapV2Router02"
            },
            "t_struct(PresaleInfo)4294_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4240"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(PreSaleStatus)4240": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED",
                "CANCELED"
              ]
            },
            "t_struct(ParticipationCriteria)4311_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4243"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4243": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4270_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4277_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4320_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4286_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4258_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4329_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4342_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4263_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4263_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4936_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4936_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4920))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4920)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4920": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4956_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4956_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4920"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6773_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6773_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6970_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6970_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6970_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6947"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6904"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6944"
                }
              ]
            },
            "t_enum(Type)6947": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6904": {
              "label": "contract Locker"
            },
            "t_enum(Status)6944": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7541_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7541_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7541_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7522"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7519"
                }
              ]
            },
            "t_enum(Type)7522": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7519": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "d6c41454fc8c5634718d3064d2d4bab3a9557a7e23bb3e27211a322edc49c0d8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "1b30121076b3b08632e78625286ffe6eb93c5c1d2c5822968e78d61349c4c7ec",
          "withoutMetadata": "5dfba90419921ffb7c8b8037326d2969745a499ad65cab73b824f9cc5df97cf4",
          "linkedWithoutMetadata": "5dfba90419921ffb7c8b8037326d2969745a499ad65cab73b824f9cc5df97cf4"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "getPresaleRecordsByToken(address)",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:22"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "uniswapV2Router02",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:26"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:30"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:32"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "c3a971f78a07fb7c732434cb9e90923625abcbcab821d45b75a322c1687b65c4",
          "withoutMetadata": "0ecc124871cc1761edb60b58b97e5285dd771c2a0e78473fb088d9b4daf40f86",
          "linkedWithoutMetadata": "0ecc124871cc1761edb60b58b97e5285dd771c2a0e78473fb088d9b4daf40f86"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet",
          "console"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),address,(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:97"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "uniswapV2Router02",
              "type": "t_contract(IUniswapV2Router02)3945",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4294_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4311_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4270_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4277_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4320_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4286_storage",
              "src": "contracts\\Launchpad\\Presale.sol:33"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4258_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4329_storage",
              "src": "contracts\\Launchpad\\Presale.sol:36"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4342_storage",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4263_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4937_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:41"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4921))",
              "src": "contracts\\Launchpad\\Presale.sol:44"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4957_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:52"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:53"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_contract(IUniswapV2Router02)3945": {
              "label": "contract IUniswapV2Router02"
            },
            "t_struct(PresaleInfo)4294_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4240"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(PreSaleStatus)4240": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED",
                "CANCELED"
              ]
            },
            "t_struct(ParticipationCriteria)4311_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4243"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4243": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4270_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4277_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4320_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4286_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4258_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4329_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4342_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4263_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4263_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4937_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4937_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4921))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4921)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4921": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4957_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4957_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4921"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6777_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6777_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6974_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6974_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6974_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6951"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6908"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6948"
                }
              ]
            },
            "t_enum(Type)6951": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6908": {
              "label": "contract Locker"
            },
            "t_enum(Status)6948": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7545_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7545_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7545_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7526"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7523"
                }
              ]
            },
            "t_enum(Type)7526": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7523": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "d6c41454fc8c5634718d3064d2d4bab3a9557a7e23bb3e27211a322edc49c0d8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "6591ee559ac22f5ab9c8391f65eec6110b899da44af174c7873700821abb70eb",
          "withoutMetadata": "1ad9572c847a7c9d4642cde794839ef9c79e0b57f6e01600079fdc452e3cfaf3",
          "linkedWithoutMetadata": "1ad9572c847a7c9d4642cde794839ef9c79e0b57f6e01600079fdc452e3cfaf3"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "getPresaleRecordsByToken(address)",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:22"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "uniswapV2Router02",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:26"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:30"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:32"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "43d8afff8d13af40d3d749b0e390277e736edf62963bffdef7ad166ac8fb8256",
          "withoutMetadata": "4b4bf5c53a9f32ae1b53d07f08a2a2cf3fadc0dad4991ed4e71a3948b0182643",
          "linkedWithoutMetadata": "4b4bf5c53a9f32ae1b53d07f08a2a2cf3fadc0dad4991ed4e71a3948b0182643"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet",
          "console"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),address,(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:97"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "uniswapV2Router02",
              "type": "t_contract(IUniswapV2Router02)3945",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4294_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4311_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4270_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4277_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4320_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4286_storage",
              "src": "contracts\\Launchpad\\Presale.sol:33"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4258_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4329_storage",
              "src": "contracts\\Launchpad\\Presale.sol:36"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4342_storage",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4263_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4937_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:41"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4921))",
              "src": "contracts\\Launchpad\\Presale.sol:44"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4957_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:52"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:53"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_contract(IUniswapV2Router02)3945": {
              "label": "contract IUniswapV2Router02"
            },
            "t_struct(PresaleInfo)4294_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4240"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(PreSaleStatus)4240": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED",
                "CANCELED"
              ]
            },
            "t_struct(ParticipationCriteria)4311_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4243"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4243": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4270_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4277_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4320_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4286_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4258_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4329_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4342_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4263_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4263_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4937_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4937_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4921))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4921)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4921": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4957_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4957_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4921"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6786_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6786_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6983_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6983_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6983_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6960"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6917"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6957"
                }
              ]
            },
            "t_enum(Type)6960": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6917": {
              "label": "contract Locker"
            },
            "t_enum(Status)6957": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7554_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7554_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7554_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7535"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7532"
                }
              ]
            },
            "t_enum(Type)7535": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7532": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "d6c41454fc8c5634718d3064d2d4bab3a9557a7e23bb3e27211a322edc49c0d8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "4fd5b51cf5749983f3257ab677d58e3e2444a6d16622fdf3078a816f4fb16466",
          "withoutMetadata": "cf483e9e323c55d9cb1432680d5d0efa62436d8639061849e03af5349bdbf459",
          "linkedWithoutMetadata": "cf483e9e323c55d9cb1432680d5d0efa62436d8639061849e03af5349bdbf459"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "getPresaleRecordsByToken(address)",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:22"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "uniswapV2Router02",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:26"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:30"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:32"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "c6d64c23832bf91a7fc68dd7204e3e50e67dd2ad752bf7588e62c5b6c46f67ff",
          "withoutMetadata": "ff92df20de9d17441f3c6e0af4c54c0a124ae55da568e16bb5fc07cce09f7493",
          "linkedWithoutMetadata": "ff92df20de9d17441f3c6e0af4c54c0a124ae55da568e16bb5fc07cce09f7493"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet",
          "console"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),address,(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:97"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "uniswapV2Router02",
              "type": "t_contract(IUniswapV2Router02)3945",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4294_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4311_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4270_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4277_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4320_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4286_storage",
              "src": "contracts\\Launchpad\\Presale.sol:33"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4258_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4329_storage",
              "src": "contracts\\Launchpad\\Presale.sol:36"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4342_storage",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4263_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4937_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:41"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4921))",
              "src": "contracts\\Launchpad\\Presale.sol:44"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4957_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:52"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:53"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_contract(IUniswapV2Router02)3945": {
              "label": "contract IUniswapV2Router02"
            },
            "t_struct(PresaleInfo)4294_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4240"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(PreSaleStatus)4240": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED",
                "CANCELED"
              ]
            },
            "t_struct(ParticipationCriteria)4311_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4243"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4243": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4270_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4277_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4320_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4286_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4258_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4329_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4342_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4263_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4263_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4937_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4937_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4921))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4921)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4921": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4957_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4957_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4921"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6778_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6778_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6975_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6975_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6975_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6952"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6909"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6949"
                }
              ]
            },
            "t_enum(Type)6952": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6909": {
              "label": "contract Locker"
            },
            "t_enum(Status)6949": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7546_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7546_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7546_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7527"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7524"
                }
              ]
            },
            "t_enum(Type)7527": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7524": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "d6c41454fc8c5634718d3064d2d4bab3a9557a7e23bb3e27211a322edc49c0d8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "c7727381e7014afd4514aac8bdc3ec6720d0fc8218fc5f8676a038c03098e42b",
          "withoutMetadata": "95b7f0f4a43521bbf0b84d188ccbf59844c58f335126f66e78b3bca1b21da30f",
          "linkedWithoutMetadata": "95b7f0f4a43521bbf0b84d188ccbf59844c58f335126f66e78b3bca1b21da30f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "getPresaleRecordsByToken(address)",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:22"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "uniswapV2Router02",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:26"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:30"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:32"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "5907e3754d2618b120e1a4c6112ff50ce780261af214ce092632b24c5bcdb3e3",
          "withoutMetadata": "4025d0f5a994a358194baa7d4e3b2f7e7b92e0149bb2879b915f0a319e244fa7",
          "linkedWithoutMetadata": "4025d0f5a994a358194baa7d4e3b2f7e7b92e0149bb2879b915f0a319e244fa7"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet",
          "console"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),address,(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()",
          "cancelSale()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:97"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "uniswapV2Router02",
              "type": "t_contract(IUniswapV2Router02)3945",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4294_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4311_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4270_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4277_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4320_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4286_storage",
              "src": "contracts\\Launchpad\\Presale.sol:33"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4258_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4329_storage",
              "src": "contracts\\Launchpad\\Presale.sol:36"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4342_storage",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4263_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4937_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:41"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4921))",
              "src": "contracts\\Launchpad\\Presale.sol:44"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4957_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:52"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:53"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_contract(IUniswapV2Router02)3945": {
              "label": "contract IUniswapV2Router02"
            },
            "t_struct(PresaleInfo)4294_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4240"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(PreSaleStatus)4240": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED",
                "CANCELED"
              ]
            },
            "t_struct(ParticipationCriteria)4311_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4243"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4243": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4270_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4277_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4320_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4286_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4258_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4329_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4342_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4263_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4263_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4937_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4937_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4921))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4921)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4921": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4957_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4957_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4921"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6794_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6794_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6991_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6991_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6991_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6968"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6925"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6965"
                }
              ]
            },
            "t_enum(Type)6968": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6925": {
              "label": "contract Locker"
            },
            "t_enum(Status)6965": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7562_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7562_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7562_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7543"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7540"
                }
              ]
            },
            "t_enum(Type)7543": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7540": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "d6c41454fc8c5634718d3064d2d4bab3a9557a7e23bb3e27211a322edc49c0d8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "ddd224b36107638d5b2ecee5c47844e916fe3a44ec615cb386bb573e573334b9",
          "withoutMetadata": "fbfc2f45400470b4b4d4d3cbb033de3bca677ceb4a33b36457af5e63ea6b5296",
          "linkedWithoutMetadata": "fbfc2f45400470b4b4d4d3cbb033de3bca677ceb4a33b36457af5e63ea6b5296"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "getPresaleRecordsByToken(address)",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:22"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "uniswapV2Router02",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:26"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:30"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:32"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "643c2c23c01a3b99ab5ac4fa9c584c325ebab15c3a7b24f74b65030a358cb7c3",
          "withoutMetadata": "f3dacd4e1b50ac654b79831dc0ce11afb4dc72a2e933d4c1c180668506e31b40",
          "linkedWithoutMetadata": "f3dacd4e1b50ac654b79831dc0ce11afb4dc72a2e933d4c1c180668506e31b40"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),address,(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()",
          "cancelSale()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:97"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "uniswapV2Router02",
              "type": "t_contract(IUniswapV2Router02)3945",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4294_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4311_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4270_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4277_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4320_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4286_storage",
              "src": "contracts\\Launchpad\\Presale.sol:33"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4258_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4329_storage",
              "src": "contracts\\Launchpad\\Presale.sol:36"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4342_storage",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4263_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4936_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:41"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4920))",
              "src": "contracts\\Launchpad\\Presale.sol:44"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4956_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:52"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:53"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_contract(IUniswapV2Router02)3945": {
              "label": "contract IUniswapV2Router02"
            },
            "t_struct(PresaleInfo)4294_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4240"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(PreSaleStatus)4240": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED",
                "CANCELED"
              ]
            },
            "t_struct(ParticipationCriteria)4311_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4243"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4243": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4270_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4277_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4320_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4286_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4258_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4329_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4342_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4263_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4263_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4936_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4936_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4920))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4920)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4920": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4956_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4956_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4920"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6778_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6778_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6975_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6975_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6975_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6952"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6909"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6949"
                }
              ]
            },
            "t_enum(Type)6952": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6909": {
              "label": "contract Locker"
            },
            "t_enum(Status)6949": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7546_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7546_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7546_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7527"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7524"
                }
              ]
            },
            "t_enum(Type)7527": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7524": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "d6c41454fc8c5634718d3064d2d4bab3a9557a7e23bb3e27211a322edc49c0d8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "1a4941e59b598bf016a51ac29fa7958649b7fb6187988cce7d37f424ac93a06d",
          "withoutMetadata": "e353bae9532e40a53001a00e4e39f62eb5b9fac7db49b2d7224d211e83b162eb",
          "linkedWithoutMetadata": "e353bae9532e40a53001a00e4e39f62eb5b9fac7db49b2d7224d211e83b162eb"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "getPresaleRecordsByToken(address)",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:22"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "uniswapV2Router02",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:26"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:30"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:32"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "b6eed63c85492ad91ed0ac7483a53a14b107407832124f295f6a7fed46c85f69",
          "withoutMetadata": "df82d216d6ea283f06e279382bf450d1f46f34591eaa6945f216ddf95216f2a3",
          "linkedWithoutMetadata": "df82d216d6ea283f06e279382bf450d1f46f34591eaa6945f216ddf95216f2a3"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),address,(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()",
          "cancelSale()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:97"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "uniswapV2Router02",
              "type": "t_contract(IUniswapV2Router02)3945",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4294_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4311_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4270_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4277_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4320_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4286_storage",
              "src": "contracts\\Launchpad\\Presale.sol:33"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4258_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4329_storage",
              "src": "contracts\\Launchpad\\Presale.sol:36"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4342_storage",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4263_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4936_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:41"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4920))",
              "src": "contracts\\Launchpad\\Presale.sol:44"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4956_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:52"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:53"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_contract(IUniswapV2Router02)3945": {
              "label": "contract IUniswapV2Router02"
            },
            "t_struct(PresaleInfo)4294_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4240"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(PreSaleStatus)4240": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED",
                "CANCELED"
              ]
            },
            "t_struct(ParticipationCriteria)4311_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4243"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4243": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4270_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4277_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4320_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4286_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4258_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4329_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4342_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4263_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4263_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4936_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4936_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4920))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4920)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4920": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4956_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4956_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4920"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6777_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6777_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6974_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6974_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6974_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6951"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6908"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6948"
                }
              ]
            },
            "t_enum(Type)6951": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6908": {
              "label": "contract Locker"
            },
            "t_enum(Status)6948": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7545_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7545_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7545_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7526"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7523"
                }
              ]
            },
            "t_enum(Type)7526": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7523": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "d6c41454fc8c5634718d3064d2d4bab3a9557a7e23bb3e27211a322edc49c0d8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "302942e05379dfbcaac4e51568d968338e7506d876d7636375dec2ca12916304",
          "withoutMetadata": "489802e07467a8aebddddc43d99b9601e7c4a49fd6e67f4aa9a62e329eed1a2f",
          "linkedWithoutMetadata": "489802e07467a8aebddddc43d99b9601e7c4a49fd6e67f4aa9a62e329eed1a2f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "getPresaleRecordsByToken(address)",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:22"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "uniswapV2Router02",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:26"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:30"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:32"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "2ea6458542d11a4af2c766edc49bb291e67d14262650141a16e35344ac399fd9",
          "withoutMetadata": "0e90fe3e431e453e343e274acb384b50cf5a6b6440ad93c10217d5fe9522997c",
          "linkedWithoutMetadata": "0e90fe3e431e453e343e274acb384b50cf5a6b6440ad93c10217d5fe9522997c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),address,(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()",
          "cancelSale()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:97"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "uniswapV2Router02",
              "type": "t_contract(IUniswapV2Router02)3945",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4294_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4311_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4270_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4277_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4320_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4286_storage",
              "src": "contracts\\Launchpad\\Presale.sol:33"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4258_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4329_storage",
              "src": "contracts\\Launchpad\\Presale.sol:36"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4342_storage",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4263_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4936_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:41"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4920))",
              "src": "contracts\\Launchpad\\Presale.sol:44"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4956_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:52"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:53"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_contract(IUniswapV2Router02)3945": {
              "label": "contract IUniswapV2Router02"
            },
            "t_struct(PresaleInfo)4294_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4240"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(PreSaleStatus)4240": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED",
                "CANCELED"
              ]
            },
            "t_struct(ParticipationCriteria)4311_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4243"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4243": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4270_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4277_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4320_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4286_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4258_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4329_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4342_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4263_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4263_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4936_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4936_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4920))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4920)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4920": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4956_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4956_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4920"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6777_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6777_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6974_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6974_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6974_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6951"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6908"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6948"
                }
              ]
            },
            "t_enum(Type)6951": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6908": {
              "label": "contract Locker"
            },
            "t_enum(Status)6948": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7545_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7545_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7545_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7526"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7523"
                }
              ]
            },
            "t_enum(Type)7526": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7523": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "d6c41454fc8c5634718d3064d2d4bab3a9557a7e23bb3e27211a322edc49c0d8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "495116ea83724802a8182d15920066cc7a84b76c2fea8e34135e1ba17a4000b5",
          "withoutMetadata": "a41ee30a42cfcab948b2b6fab20b017362de4c298e9cc63bba12795d3d2c6141",
          "linkedWithoutMetadata": "a41ee30a42cfcab948b2b6fab20b017362de4c298e9cc63bba12795d3d2c6141"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "getPresaleRecordsByToken(address)",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:22"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "uniswapV2Router02",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:26"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:30"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:32"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "586b0d85a975819fb0d695a65d2034c64e5270e302bd1c49a9ed0a5474c85dd2",
          "withoutMetadata": "0e90fe3e431e453e343e274acb384b50cf5a6b6440ad93c10217d5fe9522997c",
          "linkedWithoutMetadata": "0e90fe3e431e453e343e274acb384b50cf5a6b6440ad93c10217d5fe9522997c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),address,(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()",
          "cancelSale()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:97"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "uniswapV2Router02",
              "type": "t_contract(IUniswapV2Router02)3945",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4294_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4311_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4270_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4277_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4320_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4286_storage",
              "src": "contracts\\Launchpad\\Presale.sol:33"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4258_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4329_storage",
              "src": "contracts\\Launchpad\\Presale.sol:36"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4342_storage",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4263_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4936_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:41"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4920))",
              "src": "contracts\\Launchpad\\Presale.sol:44"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4956_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:52"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:53"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_contract(IUniswapV2Router02)3945": {
              "label": "contract IUniswapV2Router02"
            },
            "t_struct(PresaleInfo)4294_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4240"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(PreSaleStatus)4240": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED",
                "CANCELED"
              ]
            },
            "t_struct(ParticipationCriteria)4311_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4243"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4243": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4270_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4277_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4320_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4286_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4258_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4329_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4342_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4263_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4263_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4936_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4936_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4920))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4920)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4920": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4956_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4956_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4920"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6777_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6777_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6974_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6974_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6974_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6951"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6908"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6948"
                }
              ]
            },
            "t_enum(Type)6951": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6908": {
              "label": "contract Locker"
            },
            "t_enum(Status)6948": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7545_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7545_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7545_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7526"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7523"
                }
              ]
            },
            "t_enum(Type)7526": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7523": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "d6c41454fc8c5634718d3064d2d4bab3a9557a7e23bb3e27211a322edc49c0d8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "033f9baefffd41af2aa2d5705482c672e3103e0aefa499dcfdf99e0e6d2ebaec",
          "withoutMetadata": "7df079b4419f637e4bd2640671bdb0ee47e499e699d31aefde24a7f5b05a2418",
          "linkedWithoutMetadata": "7df079b4419f637e4bd2640671bdb0ee47e499e699d31aefde24a7f5b05a2418"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "getPresaleRecordsByToken(address)",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:22"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "uniswapV2Router02",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:26"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:30"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:32"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "c6b63f44c559e830df0ed19fb6147a4ad37af1970efcc843c4b1805924a12ff8",
          "withoutMetadata": "ce173dbb7c737bfe383e2046c450c585ea63ac5ab5d0232ff54dcd38e8d3e51b",
          "linkedWithoutMetadata": "ce173dbb7c737bfe383e2046c450c585ea63ac5ab5d0232ff54dcd38e8d3e51b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),address,(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()",
          "cancelSale()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:96"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "uniswapV2Router02",
              "type": "t_contract(IUniswapV2Router02)3945",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4294_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4311_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4270_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4277_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4320_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4286_storage",
              "src": "contracts\\Launchpad\\Presale.sol:33"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4258_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4329_storage",
              "src": "contracts\\Launchpad\\Presale.sol:36"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4342_storage",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4263_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4936_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:41"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4920))",
              "src": "contracts\\Launchpad\\Presale.sol:44"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4956_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:52"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:53"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_contract(IUniswapV2Router02)3945": {
              "label": "contract IUniswapV2Router02"
            },
            "t_struct(PresaleInfo)4294_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4240"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(PreSaleStatus)4240": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED",
                "CANCELED"
              ]
            },
            "t_struct(ParticipationCriteria)4311_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4243"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4243": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4270_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4277_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4320_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4286_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4258_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4329_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4342_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4263_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4263_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4936_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4936_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4920))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4920)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4920": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4956_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4956_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4920"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6767_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6767_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6964_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6964_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6964_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6941"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6898"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6938"
                }
              ]
            },
            "t_enum(Type)6941": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6898": {
              "label": "contract Locker"
            },
            "t_enum(Status)6938": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7535_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7535_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7535_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7516"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7513"
                }
              ]
            },
            "t_enum(Type)7516": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7513": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "d6c41454fc8c5634718d3064d2d4bab3a9557a7e23bb3e27211a322edc49c0d8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "be0403c7d042b4274486a9a0512da1ea81a6e75c9f7b0dc255f47ba0d03fcdbe",
          "withoutMetadata": "2330d28c365a7b29dabc5492adaf3a2c80f4425bc68ff7c8385e76a098573be0",
          "linkedWithoutMetadata": "2330d28c365a7b29dabc5492adaf3a2c80f4425bc68ff7c8385e76a098573be0"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "getPresaleRecordsByToken(address)",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:22"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "uniswapV2Router02",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:26"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:30"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:32"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "c6b63f44c559e830df0ed19fb6147a4ad37af1970efcc843c4b1805924a12ff8",
          "withoutMetadata": "ce173dbb7c737bfe383e2046c450c585ea63ac5ab5d0232ff54dcd38e8d3e51b",
          "linkedWithoutMetadata": "ce173dbb7c737bfe383e2046c450c585ea63ac5ab5d0232ff54dcd38e8d3e51b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),address,(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()",
          "cancelSale()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:96"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "uniswapV2Router02",
              "type": "t_contract(IUniswapV2Router02)3945",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4294_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4311_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4270_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4277_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4320_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4286_storage",
              "src": "contracts\\Launchpad\\Presale.sol:33"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4258_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4329_storage",
              "src": "contracts\\Launchpad\\Presale.sol:36"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4342_storage",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4263_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4913_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:41"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4897))",
              "src": "contracts\\Launchpad\\Presale.sol:44"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4933_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:52"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:53"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_contract(IUniswapV2Router02)3945": {
              "label": "contract IUniswapV2Router02"
            },
            "t_struct(PresaleInfo)4294_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4240"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(PreSaleStatus)4240": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED",
                "CANCELED"
              ]
            },
            "t_struct(ParticipationCriteria)4311_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4243"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4243": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4270_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4277_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4320_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4286_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4258_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4329_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4342_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4263_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4263_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4913_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4913_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4897))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4897)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4897": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4933_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4933_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4897"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6744_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6744_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6941_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6941_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6941_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6918"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6875"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6915"
                }
              ]
            },
            "t_enum(Type)6918": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6875": {
              "label": "contract Locker"
            },
            "t_enum(Status)6915": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7512_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7512_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7512_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7493"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7490"
                }
              ]
            },
            "t_enum(Type)7493": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7490": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "d6c41454fc8c5634718d3064d2d4bab3a9557a7e23bb3e27211a322edc49c0d8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "f085e83a02c255c0ed56be33b46a5aabb0b60d425d03b8cd51782d2fdf467253",
          "withoutMetadata": "d1004ebd18e8d86af8443ead8d88920b75c37e3faa2fa4ba25e6179851d60934",
          "linkedWithoutMetadata": "d1004ebd18e8d86af8443ead8d88920b75c37e3faa2fa4ba25e6179851d60934"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "getPresaleRecordsByToken(address)",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:22"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "uniswapV2Router02",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:26"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:30"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:32"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "c6b63f44c559e830df0ed19fb6147a4ad37af1970efcc843c4b1805924a12ff8",
          "withoutMetadata": "ce173dbb7c737bfe383e2046c450c585ea63ac5ab5d0232ff54dcd38e8d3e51b",
          "linkedWithoutMetadata": "ce173dbb7c737bfe383e2046c450c585ea63ac5ab5d0232ff54dcd38e8d3e51b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),address,(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()",
          "cancelSale()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:96"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "uniswapV2Router02",
              "type": "t_contract(IUniswapV2Router02)3945",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4294_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4311_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4270_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4277_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4320_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4286_storage",
              "src": "contracts\\Launchpad\\Presale.sol:33"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4258_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4329_storage",
              "src": "contracts\\Launchpad\\Presale.sol:36"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4342_storage",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4263_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4913_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:41"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4897))",
              "src": "contracts\\Launchpad\\Presale.sol:44"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4933_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:52"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:53"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_contract(IUniswapV2Router02)3945": {
              "label": "contract IUniswapV2Router02"
            },
            "t_struct(PresaleInfo)4294_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4240"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(PreSaleStatus)4240": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED",
                "CANCELED"
              ]
            },
            "t_struct(ParticipationCriteria)4311_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4243"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4243": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4270_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4277_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4320_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4286_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4258_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4329_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4342_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4263_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4263_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4913_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4913_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4897))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4897)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4897": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4933_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4933_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4897"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6744_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6744_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6941_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6941_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6941_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6918"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6875"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6915"
                }
              ]
            },
            "t_enum(Type)6918": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6875": {
              "label": "contract Locker"
            },
            "t_enum(Status)6915": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7512_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7512_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7512_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7493"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7490"
                }
              ]
            },
            "t_enum(Type)7493": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7490": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "d6c41454fc8c5634718d3064d2d4bab3a9557a7e23bb3e27211a322edc49c0d8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "f7d9b71be7855065c569ef35c50350b2de38d6124fc8d7fccd10987b852fd86d",
          "withoutMetadata": "d4b9c1a93fed02ef8fe90b98ec86e943b878269d5b60a195f338b2254a1a0c3d",
          "linkedWithoutMetadata": "d4b9c1a93fed02ef8fe90b98ec86e943b878269d5b60a195f338b2254a1a0c3d"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "getPresaleRecordsByToken(address)",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:22"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "uniswapV2Router02",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:26"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:30"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:32"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "3a672f640cfa46055cbb07d02f450008965d753fdfdbb75aa1602fbf5894393c",
          "withoutMetadata": "a12950ae9b38f347902bba3279c1fa5f546633414befa8a7d678aebafcbf1a60",
          "linkedWithoutMetadata": "a12950ae9b38f347902bba3279c1fa5f546633414befa8a7d678aebafcbf1a60"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),address,(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()",
          "cancelSale()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:87"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "uniswapV2Router02",
              "type": "t_contract(IUniswapV2Router02)3945",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4294_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4311_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4270_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4277_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4320_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4286_storage",
              "src": "contracts\\Launchpad\\Presale.sol:33"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4258_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4329_storage",
              "src": "contracts\\Launchpad\\Presale.sol:36"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4342_storage",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4263_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4913_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:41"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4897))",
              "src": "contracts\\Launchpad\\Presale.sol:44"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4933_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:52"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:53"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_contract(IUniswapV2Router02)3945": {
              "label": "contract IUniswapV2Router02"
            },
            "t_struct(PresaleInfo)4294_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4240"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(PreSaleStatus)4240": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED",
                "CANCELED"
              ]
            },
            "t_struct(ParticipationCriteria)4311_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4243"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4243": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4270_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4277_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4320_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4286_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4258_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4329_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4342_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4263_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4263_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4913_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4913_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4897))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4897)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4897": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4933_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4933_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4897"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6730_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6730_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6927_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6927_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6927_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6904"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6861"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6901"
                }
              ]
            },
            "t_enum(Type)6904": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6861": {
              "label": "contract Locker"
            },
            "t_enum(Status)6901": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7498_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7498_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7498_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7479"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7476"
                }
              ]
            },
            "t_enum(Type)7479": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7476": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "d6c41454fc8c5634718d3064d2d4bab3a9557a7e23bb3e27211a322edc49c0d8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "f462bc76139fe02d558374fcd50e3d9ea9bccc8eb3791e83f7539e0a27fd2ddb",
          "withoutMetadata": "140d9d2970760a5bd4a7bb6e2cac706b348db0d8e6c4bd2042b97df62a43b95a",
          "linkedWithoutMetadata": "140d9d2970760a5bd4a7bb6e2cac706b348db0d8e6c4bd2042b97df62a43b95a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "getPresaleRecordsByToken(address)",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:22"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "uniswapV2Router02",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:26"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:30"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:32"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "2fee22f46e0b7694fc8e40cd19083f00f487c7a0c92de22e29ddb59a4be7aaac",
          "withoutMetadata": "fc679145ff7f6472c04d5d8cb4a5706b0edff51f3f57bdf2d03c835e96fb29dd",
          "linkedWithoutMetadata": "fc679145ff7f6472c04d5d8cb4a5706b0edff51f3f57bdf2d03c835e96fb29dd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),address,(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()",
          "cancelSale()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:87"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "uniswapV2Router02",
              "type": "t_contract(IUniswapV2Router02)3945",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4294_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4311_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4270_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4277_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4320_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4286_storage",
              "src": "contracts\\Launchpad\\Presale.sol:33"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4258_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4329_storage",
              "src": "contracts\\Launchpad\\Presale.sol:36"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4342_storage",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4263_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4913_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:41"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4897))",
              "src": "contracts\\Launchpad\\Presale.sol:44"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4933_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:52"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:53"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_contract(IUniswapV2Router02)3945": {
              "label": "contract IUniswapV2Router02"
            },
            "t_struct(PresaleInfo)4294_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4240"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(PreSaleStatus)4240": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED",
                "CANCELED"
              ]
            },
            "t_struct(ParticipationCriteria)4311_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4243"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4243": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4270_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4277_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4320_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4286_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4258_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4329_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4342_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4263_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4263_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4913_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4913_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4897))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4897)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4897": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4933_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4933_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4897"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6713_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6713_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6910_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6910_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6910_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6887"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6844"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6884"
                }
              ]
            },
            "t_enum(Type)6887": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6844": {
              "label": "contract Locker"
            },
            "t_enum(Status)6884": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7481_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7481_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7481_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7462"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7459"
                }
              ]
            },
            "t_enum(Type)7462": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7459": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "d6c41454fc8c5634718d3064d2d4bab3a9557a7e23bb3e27211a322edc49c0d8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "99ad56542918e66291e2320907e1778cbfa55d6be98d0492dbb2837349b36715",
          "withoutMetadata": "d54e1b05d645d6f930ef4fe06a33a293f0dcac8de0b4acc7f74696ca052ae0d6",
          "linkedWithoutMetadata": "d54e1b05d645d6f930ef4fe06a33a293f0dcac8de0b4acc7f74696ca052ae0d6"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "getPresaleRecordsByToken(address)",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:22"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "uniswapV2Router02",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:26"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:30"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:32"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "2fee22f46e0b7694fc8e40cd19083f00f487c7a0c92de22e29ddb59a4be7aaac",
          "withoutMetadata": "fc679145ff7f6472c04d5d8cb4a5706b0edff51f3f57bdf2d03c835e96fb29dd",
          "linkedWithoutMetadata": "fc679145ff7f6472c04d5d8cb4a5706b0edff51f3f57bdf2d03c835e96fb29dd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),address,(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()",
          "cancelSale()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:87"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "uniswapV2Router02",
              "type": "t_contract(IUniswapV2Router02)3945",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4294_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4311_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4270_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4277_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4320_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4286_storage",
              "src": "contracts\\Launchpad\\Presale.sol:33"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4258_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4329_storage",
              "src": "contracts\\Launchpad\\Presale.sol:36"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4342_storage",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4263_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4936_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:41"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4920))",
              "src": "contracts\\Launchpad\\Presale.sol:44"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4956_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:52"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:53"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_contract(IUniswapV2Router02)3945": {
              "label": "contract IUniswapV2Router02"
            },
            "t_struct(PresaleInfo)4294_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4240"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(PreSaleStatus)4240": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED",
                "CANCELED"
              ]
            },
            "t_struct(ParticipationCriteria)4311_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4243"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4243": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4270_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4277_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4320_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4286_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4258_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4329_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4342_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4263_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4263_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4936_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4936_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4920))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4920)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4920": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4956_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4956_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4920"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6736_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6736_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6933_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6933_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6933_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6910"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6867"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6907"
                }
              ]
            },
            "t_enum(Type)6910": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6867": {
              "label": "contract Locker"
            },
            "t_enum(Status)6907": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7504_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7504_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7504_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7485"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7482"
                }
              ]
            },
            "t_enum(Type)7485": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7482": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "52e0d90eb3a7053c43208a4b3448b032ec6428f1d35c56bd39a38fd3ea2617cb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "c5c198fb3357f58c6750c9a7932978fc81c25244794a26ef841162a4585e082e",
          "withoutMetadata": "d5c84988a45547b021142198cf6d64b334945a2f7b0e2fb44f1bbb501fd3a7e4",
          "linkedWithoutMetadata": "d5c84988a45547b021142198cf6d64b334945a2f7b0e2fb44f1bbb501fd3a7e4"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "getPresaleRecordsByToken(address)",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:22"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "uniswapV2Router02",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:26"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:30"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:32"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "e2c6f5efc6955bc47e4b3ffb5bb333bf5733bd9b340a83631e8c8627e03e38a6",
          "withoutMetadata": "3fe54871b42d3405b9eb8abc00912619d6858ed7959cb6bc109fcad8bc3f6c5b",
          "linkedWithoutMetadata": "3fe54871b42d3405b9eb8abc00912619d6858ed7959cb6bc109fcad8bc3f6c5b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),address,(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()",
          "cancelSale()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:87"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "uniswapV2Router02",
              "type": "t_contract(IUniswapV2Router02)3945",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4293_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4310_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4269_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4276_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4319_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4285_storage",
              "src": "contracts\\Launchpad\\Presale.sol:33"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4257_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4328_storage",
              "src": "contracts\\Launchpad\\Presale.sol:36"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4341_storage",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4262_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4935_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:41"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4919))",
              "src": "contracts\\Launchpad\\Presale.sol:44"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4955_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:52"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:53"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_contract(IUniswapV2Router02)3945": {
              "label": "contract IUniswapV2Router02"
            },
            "t_struct(PresaleInfo)4293_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4239"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(PreSaleStatus)4239": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED"
              ]
            },
            "t_struct(ParticipationCriteria)4310_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4242"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4242": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4269_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4276_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4319_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4285_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4257_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4328_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4341_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4262_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4262_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4935_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4935_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4919))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4919)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4919": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4955_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4955_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4919"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6735_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6735_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6932_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6932_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6932_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6909"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6866"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6906"
                }
              ]
            },
            "t_enum(Type)6909": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6866": {
              "label": "contract Locker"
            },
            "t_enum(Status)6906": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7503_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7503_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7503_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7484"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7481"
                }
              ]
            },
            "t_enum(Type)7484": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7481": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "a697552bb8b46bc790e2ccea1b941fe7ef9a0be9014888d7d4d7a15475c56529",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "2dbc64082c2e5455cbb579287a3848419083a94a71d95ce221a770a15b671dd3",
          "withoutMetadata": "b36c86f35e80871d84145a3632ee007adec5bd2f0d6daf6e3f6cefc8edf1907a",
          "linkedWithoutMetadata": "b36c86f35e80871d84145a3632ee007adec5bd2f0d6daf6e3f6cefc8edf1907a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "getPresaleRecordsByToken(address)",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:22"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "uniswapV2Router02",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:26"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:30"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:32"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "bcad425c319fb0777471110edf0769784311328efe1d2a3313c4bf7730898025",
          "withoutMetadata": "c1f23aa3e880ec6f09ec8830ce321c154bcba555705fa6de9859af37f20b1dce",
          "linkedWithoutMetadata": "c1f23aa3e880ec6f09ec8830ce321c154bcba555705fa6de9859af37f20b1dce"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),address,(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()",
          "cancelSale()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:87"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "uniswapV2Router02",
              "type": "t_contract(IUniswapV2Router02)3945",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4293_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4310_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4269_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4276_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4319_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4285_storage",
              "src": "contracts\\Launchpad\\Presale.sol:33"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4257_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4328_storage",
              "src": "contracts\\Launchpad\\Presale.sol:36"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4341_storage",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4262_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4935_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:41"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4919))",
              "src": "contracts\\Launchpad\\Presale.sol:44"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4955_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:52"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:53"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_contract(IUniswapV2Router02)3945": {
              "label": "contract IUniswapV2Router02"
            },
            "t_struct(PresaleInfo)4293_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4239"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(PreSaleStatus)4239": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED"
              ]
            },
            "t_struct(ParticipationCriteria)4310_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4242"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4242": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4269_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4276_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4319_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4285_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4257_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4328_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4341_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4262_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4262_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4935_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4935_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4919))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4919)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4919": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4955_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4955_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4919"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6723_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6723_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6920_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6920_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6920_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6897"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6854"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6894"
                }
              ]
            },
            "t_enum(Type)6897": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6854": {
              "label": "contract Locker"
            },
            "t_enum(Status)6894": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7491_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7491_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7491_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7472"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7469"
                }
              ]
            },
            "t_enum(Type)7472": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7469": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "a697552bb8b46bc790e2ccea1b941fe7ef9a0be9014888d7d4d7a15475c56529",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "369e3ec0f86d418770c14929ade2d201f755e892154e9d6fb310fd33c25303f3",
          "withoutMetadata": "a450ea26fc8c29a68e612cfb2cec6ea0b25786a2149c4f0ab3c373538aa93bf6",
          "linkedWithoutMetadata": "a450ea26fc8c29a68e612cfb2cec6ea0b25786a2149c4f0ab3c373538aa93bf6"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "getPresaleRecordsByToken(address)",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:22"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "uniswapV2Router02",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:26"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:30"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:32"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "e6e12486624fd819e423700bff23c69beadd532ba6242d44d10f84892ad373a8",
          "withoutMetadata": "e494ef41814a6b53976a01408281c3c195f0c90edeeff7e533a141ac993edfa9",
          "linkedWithoutMetadata": "e494ef41814a6b53976a01408281c3c195f0c90edeeff7e533a141ac993edfa9"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),address,(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()",
          "cancelSale()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:87"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "uniswapV2Router02",
              "type": "t_contract(IUniswapV2Router02)3945",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4293_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4310_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4269_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4276_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4319_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4285_storage",
              "src": "contracts\\Launchpad\\Presale.sol:33"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4257_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4328_storage",
              "src": "contracts\\Launchpad\\Presale.sol:36"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4341_storage",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4262_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4935_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:41"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4919))",
              "src": "contracts\\Launchpad\\Presale.sol:44"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4955_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:52"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:53"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_contract(IUniswapV2Router02)3945": {
              "label": "contract IUniswapV2Router02"
            },
            "t_struct(PresaleInfo)4293_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4239"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(PreSaleStatus)4239": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED"
              ]
            },
            "t_struct(ParticipationCriteria)4310_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4242"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4242": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4269_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4276_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4319_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4285_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4257_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4328_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4341_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4262_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4262_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4935_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4935_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4919))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4919)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4919": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4955_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4955_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4919"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6713_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6713_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6910_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6910_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6910_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6887"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6844"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6884"
                }
              ]
            },
            "t_enum(Type)6887": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6844": {
              "label": "contract Locker"
            },
            "t_enum(Status)6884": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7481_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7481_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7481_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7462"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7459"
                }
              ]
            },
            "t_enum(Type)7462": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7459": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "a697552bb8b46bc790e2ccea1b941fe7ef9a0be9014888d7d4d7a15475c56529",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "4450dc0a9bd2bf8acd4c8b12d04c8544182f22bc8af368b2bf65a6e0c6f88d8d",
          "withoutMetadata": "4d6e45b218ef37a1ab70817135a5afffb81b2376fc1bf00a4f379d550fc402b0",
          "linkedWithoutMetadata": "4d6e45b218ef37a1ab70817135a5afffb81b2376fc1bf00a4f379d550fc402b0"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "getPresaleRecordsByToken(address)",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:22"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "uniswapV2Router02",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:26"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:30"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:32"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "af567fb590b73c5df7991a0762e1513a0f9e38f006993d18903822e716ce0ee6",
          "withoutMetadata": "4002b9344f00a2ea5d5273f6ed825f0425608382c94ea01391493728dd8b1e83",
          "linkedWithoutMetadata": "4002b9344f00a2ea5d5273f6ed825f0425608382c94ea01391493728dd8b1e83"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),address,(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:87"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "uniswapV2Router02",
              "type": "t_contract(IUniswapV2Router02)3945",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4293_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4310_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4269_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4276_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4319_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4285_storage",
              "src": "contracts\\Launchpad\\Presale.sol:33"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4257_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4328_storage",
              "src": "contracts\\Launchpad\\Presale.sol:36"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4341_storage",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4262_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4935_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:41"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4919))",
              "src": "contracts\\Launchpad\\Presale.sol:44"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4955_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:52"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:53"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_contract(IUniswapV2Router02)3945": {
              "label": "contract IUniswapV2Router02"
            },
            "t_struct(PresaleInfo)4293_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4239"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(PreSaleStatus)4239": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED"
              ]
            },
            "t_struct(ParticipationCriteria)4310_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4242"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4242": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4269_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4276_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4319_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4285_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4257_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4328_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4341_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4262_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4262_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4935_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4935_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4919))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4919)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4919": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4955_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4955_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4919"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6707_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6707_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6904_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6904_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6904_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6881"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6838"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6878"
                }
              ]
            },
            "t_enum(Type)6881": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6838": {
              "label": "contract Locker"
            },
            "t_enum(Status)6878": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7475_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7475_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7475_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7456"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7453"
                }
              ]
            },
            "t_enum(Type)7456": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7453": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "a697552bb8b46bc790e2ccea1b941fe7ef9a0be9014888d7d4d7a15475c56529",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "a759c746f7b92d5420e7c921c3a50554825445ea168e3e416d04b3d142795326",
          "withoutMetadata": "d7d2eb9d2bc5824a69f93e1cf87f4c4bb1c44f1f9f0ff39b02c492b30c63d448",
          "linkedWithoutMetadata": "d7d2eb9d2bc5824a69f93e1cf87f4c4bb1c44f1f9f0ff39b02c492b30c63d448"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "getPresaleRecordsByToken(address)",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:22"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "uniswapV2Router02",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:26"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:30"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:32"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "a5b84cf5995601ca75196b15dfadcdf0630f3ad0665e9df213f2a5e5d2d5c470",
          "withoutMetadata": "64355aae2b7bf0039aa8096bba9998acf1798aa2f9bd1542b35bdf14da48bf47",
          "linkedWithoutMetadata": "64355aae2b7bf0039aa8096bba9998acf1798aa2f9bd1542b35bdf14da48bf47"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),address,(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()",
          "cancelSale()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:87"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "uniswapV2Router02",
              "type": "t_contract(IUniswapV2Router02)3945",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4293_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4310_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4269_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4276_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4319_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4285_storage",
              "src": "contracts\\Launchpad\\Presale.sol:33"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4257_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4328_storage",
              "src": "contracts\\Launchpad\\Presale.sol:36"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4341_storage",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4262_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4935_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:41"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4919))",
              "src": "contracts\\Launchpad\\Presale.sol:44"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4955_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:52"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:53"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_contract(IUniswapV2Router02)3945": {
              "label": "contract IUniswapV2Router02"
            },
            "t_struct(PresaleInfo)4293_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4239"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(PreSaleStatus)4239": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED"
              ]
            },
            "t_struct(ParticipationCriteria)4310_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4242"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4242": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4269_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4276_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4319_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4285_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4257_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4328_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4341_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4262_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4262_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4935_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4935_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4919))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4919)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4919": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4955_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4955_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4919"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6730_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6730_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6927_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6927_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6927_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6904"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6861"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6901"
                }
              ]
            },
            "t_enum(Type)6904": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6861": {
              "label": "contract Locker"
            },
            "t_enum(Status)6901": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7498_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7498_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7498_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7479"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7476"
                }
              ]
            },
            "t_enum(Type)7479": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7476": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "a697552bb8b46bc790e2ccea1b941fe7ef9a0be9014888d7d4d7a15475c56529",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "81a43e74952e49eb79f854436ed67bbc381c8c1630cccf73db2b7dd0feeb3eec",
          "withoutMetadata": "bc9014b10bf81a5c9a4677b8ea14e775b8fc7b4da2066ef9da7c310caa142e54",
          "linkedWithoutMetadata": "bc9014b10bf81a5c9a4677b8ea14e775b8fc7b4da2066ef9da7c310caa142e54"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "SafeMath"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "getPresaleRecordsByToken(address)",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:22"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "uniswapV2Router02",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:26"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:30"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:32"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "a5b84cf5995601ca75196b15dfadcdf0630f3ad0665e9df213f2a5e5d2d5c470",
          "withoutMetadata": "64355aae2b7bf0039aa8096bba9998acf1798aa2f9bd1542b35bdf14da48bf47",
          "linkedWithoutMetadata": "64355aae2b7bf0039aa8096bba9998acf1798aa2f9bd1542b35bdf14da48bf47"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),address,(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()",
          "cancelSale()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:87"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "uniswapV2Router02",
              "type": "t_contract(IUniswapV2Router02)3945",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4293_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4310_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4269_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4276_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4319_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4285_storage",
              "src": "contracts\\Launchpad\\Presale.sol:33"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4257_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4328_storage",
              "src": "contracts\\Launchpad\\Presale.sol:36"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4341_storage",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4262_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4944_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:41"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4928))",
              "src": "contracts\\Launchpad\\Presale.sol:44"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4964_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:52"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:53"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_contract(IUniswapV2Router02)3945": {
              "label": "contract IUniswapV2Router02"
            },
            "t_struct(PresaleInfo)4293_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4239"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(PreSaleStatus)4239": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED"
              ]
            },
            "t_struct(ParticipationCriteria)4310_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4242"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4242": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4269_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4276_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4319_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4285_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4257_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4328_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4341_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4262_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4262_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4944_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4944_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4928))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4928)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4928": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4964_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4964_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4928"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6739_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6739_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6936_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6936_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6936_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6913"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6870"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6910"
                }
              ]
            },
            "t_enum(Type)6913": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6870": {
              "label": "contract Locker"
            },
            "t_enum(Status)6910": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7507_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7507_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7507_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7488"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7485"
                }
              ]
            },
            "t_enum(Type)7488": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7485": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "be0910843e293314534491bbd889c08700b9fbaecf5c52a44fabc4bfc6ceb5e5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "231a38f0c71e060a8f911cc146deaf12d377c6cf23082945d3ed418ef7559f13",
          "withoutMetadata": "d4b6972f1f07c02197fb7471e21f5af5f69e999bc14ef4da8ba623e6ed3f6c12",
          "linkedWithoutMetadata": "d4b6972f1f07c02197fb7471e21f5af5f69e999bc14ef4da8ba623e6ed3f6c12"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "SafeMath"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "getPresaleRecordsByToken(address)",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:22"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "uniswapV2Router02",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:26"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:30"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:32"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "3c81cec1da0ff495411353d7c3795b76b91bffa8dde2d83e7ef98e85c429723f",
          "withoutMetadata": "a1eaa34b99f60d4daca81efc893a131f0f2a77bde1a7ef8ee5f53a41863285a7",
          "linkedWithoutMetadata": "a1eaa34b99f60d4daca81efc893a131f0f2a77bde1a7ef8ee5f53a41863285a7"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),address,(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "emergencyWithdraw()",
          "cancelSale()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:87"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "uniswapV2Router02",
              "type": "t_contract(IUniswapV2Router02)3945",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4293_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4310_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4269_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4276_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4319_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4285_storage",
              "src": "contracts\\Launchpad\\Presale.sol:33"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4257_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4335_storage",
              "src": "contracts\\Launchpad\\Presale.sol:36"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4348_storage",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4262_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4951_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:41"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4935))",
              "src": "contracts\\Launchpad\\Presale.sol:44"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4971_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:52"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:53"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_contract(IUniswapV2Router02)3945": {
              "label": "contract IUniswapV2Router02"
            },
            "t_struct(PresaleInfo)4293_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4239"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(PreSaleStatus)4239": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED"
              ]
            },
            "t_struct(ParticipationCriteria)4310_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4242"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4242": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4269_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4276_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4319_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4285_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4257_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4335_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4348_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4262_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4262_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4951_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4951_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4935))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4935)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4935": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4971_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4971_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4935"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6746_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6746_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6943_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6943_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6943_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6920"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6877"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6917"
                }
              ]
            },
            "t_enum(Type)6920": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6877": {
              "label": "contract Locker"
            },
            "t_enum(Status)6917": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7514_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7514_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7514_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7495"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7492"
                }
              ]
            },
            "t_enum(Type)7495": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7492": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "be0910843e293314534491bbd889c08700b9fbaecf5c52a44fabc4bfc6ceb5e5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "d540d11e4b97c7f69f770a2f170bfa47dadb7df4c380ffcde7850723fc68cceb",
          "withoutMetadata": "20c54c06167fae49cc36f800fadb49a3c2e7a37ef4df7af4669a0544dc82612c",
          "linkedWithoutMetadata": "20c54c06167fae49cc36f800fadb49a3c2e7a37ef4df7af4669a0544dc82612c"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "SafeMath"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "getPresaleRecordsByToken(address)",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:22"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "uniswapV2Router02",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:26"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:30"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:32"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "30b005856c2bcf08402c4a02ffa48249d59870729558c3910728407ef553d789",
          "withoutMetadata": "64355aae2b7bf0039aa8096bba9998acf1798aa2f9bd1542b35bdf14da48bf47",
          "linkedWithoutMetadata": "64355aae2b7bf0039aa8096bba9998acf1798aa2f9bd1542b35bdf14da48bf47"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),address,(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()",
          "cancelSale()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:87"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "uniswapV2Router02",
              "type": "t_contract(IUniswapV2Router02)3945",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4293_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4310_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4269_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4276_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4319_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4285_storage",
              "src": "contracts\\Launchpad\\Presale.sol:33"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4257_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4335_storage",
              "src": "contracts\\Launchpad\\Presale.sol:36"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4348_storage",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4262_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4951_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:41"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4935))",
              "src": "contracts\\Launchpad\\Presale.sol:44"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4971_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:52"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:53"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_contract(IUniswapV2Router02)3945": {
              "label": "contract IUniswapV2Router02"
            },
            "t_struct(PresaleInfo)4293_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4239"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(PreSaleStatus)4239": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED"
              ]
            },
            "t_struct(ParticipationCriteria)4310_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4242"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4242": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4269_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4276_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4319_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4285_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4257_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4335_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4348_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4262_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4262_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4951_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4951_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4935))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4935)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4935": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4971_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4971_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4935"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6746_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6746_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6943_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6943_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6943_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6920"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6877"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6917"
                }
              ]
            },
            "t_enum(Type)6920": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6877": {
              "label": "contract Locker"
            },
            "t_enum(Status)6917": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7514_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7514_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7514_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7495"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7492"
                }
              ]
            },
            "t_enum(Type)7495": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7492": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "be0910843e293314534491bbd889c08700b9fbaecf5c52a44fabc4bfc6ceb5e5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "a740fdd5e38fff612137fc7d9cd73eb99c479a80af910f4f6dce5156f589fb7f",
          "withoutMetadata": "51f759f64f26dd30b588c1ff8d478d494376e0eaddd4fe858ee824d8d57dcefe",
          "linkedWithoutMetadata": "51f759f64f26dd30b588c1ff8d478d494376e0eaddd4fe858ee824d8d57dcefe"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "SafeMath"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "getPresaleRecordsByToken(address)",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:22"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "uniswapV2Router02",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:26"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:30"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:32"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "0c13c597061c41bc68dd25d4465e2e9b810ae7f954df51ce4985837448b2bde5",
          "withoutMetadata": "86945ad3ee922f74b596015f4dbddcb6472897aeb1507431a6443d5519f0792b",
          "linkedWithoutMetadata": "86945ad3ee922f74b596015f4dbddcb6472897aeb1507431a6443d5519f0792b"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),address,(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()",
          "cancelSale()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:87"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "uniswapV2Router02",
              "type": "t_contract(IUniswapV2Router02)3945",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4293_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4310_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4269_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4276_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4319_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4285_storage",
              "src": "contracts\\Launchpad\\Presale.sol:33"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4257_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4335_storage",
              "src": "contracts\\Launchpad\\Presale.sol:36"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4348_storage",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4262_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4951_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:41"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4935))",
              "src": "contracts\\Launchpad\\Presale.sol:44"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4971_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:52"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:53"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_contract(IUniswapV2Router02)3945": {
              "label": "contract IUniswapV2Router02"
            },
            "t_struct(PresaleInfo)4293_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4239"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(PreSaleStatus)4239": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED"
              ]
            },
            "t_struct(ParticipationCriteria)4310_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4242"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4242": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4269_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4276_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4319_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4285_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4257_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4335_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4348_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4262_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4262_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4951_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4951_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4935))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4935)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4935": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4971_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4971_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4935"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6760_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6760_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6957_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6957_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6957_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6934"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6891"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6931"
                }
              ]
            },
            "t_enum(Type)6934": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6891": {
              "label": "contract Locker"
            },
            "t_enum(Status)6931": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7528_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7528_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7528_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7509"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7506"
                }
              ]
            },
            "t_enum(Type)7509": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7506": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "be0910843e293314534491bbd889c08700b9fbaecf5c52a44fabc4bfc6ceb5e5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "b9f690b2ed50f3328ecede8cf6fa37c5d047365445865a6af58d5cdd1c492111",
          "withoutMetadata": "2824b3440c89234fde455ad2835f6e5bbe4f7d2d421ebce0348d421a8c598a3d",
          "linkedWithoutMetadata": "2824b3440c89234fde455ad2835f6e5bbe4f7d2d421ebce0348d421a8c598a3d"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "SafeMath"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "getPresaleRecordsByToken(address)",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:22"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "uniswapV2Router02",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:26"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:30"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:32"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "fbc4a6a758a58aec729e21088a1310270d0149908af1b345888c23d87fc7eb57",
          "withoutMetadata": "08d8349f135e7c6b6a54dfbbb4149c897569cc9b10d66e0f082e2908dc3ecf3e",
          "linkedWithoutMetadata": "08d8349f135e7c6b6a54dfbbb4149c897569cc9b10d66e0f082e2908dc3ecf3e"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),address,(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()",
          "cancelSale()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:87"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "uniswapV2Router02",
              "type": "t_contract(IUniswapV2Router02)3945",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4293_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4310_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4269_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4276_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4319_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4285_storage",
              "src": "contracts\\Launchpad\\Presale.sol:33"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4257_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4335_storage",
              "src": "contracts\\Launchpad\\Presale.sol:36"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4348_storage",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4262_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4951_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:41"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4935))",
              "src": "contracts\\Launchpad\\Presale.sol:44"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4971_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:52"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:53"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_contract(IUniswapV2Router02)3945": {
              "label": "contract IUniswapV2Router02"
            },
            "t_struct(PresaleInfo)4293_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4239"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(PreSaleStatus)4239": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED"
              ]
            },
            "t_struct(ParticipationCriteria)4310_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4242"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4242": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4269_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4276_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4319_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4285_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4257_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4335_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4348_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4262_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4262_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4951_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4951_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4935))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4935)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4935": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4971_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4971_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4935"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6773_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6773_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6970_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6970_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6970_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6947"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6904"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6944"
                }
              ]
            },
            "t_enum(Type)6947": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6904": {
              "label": "contract Locker"
            },
            "t_enum(Status)6944": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7541_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7541_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7541_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7522"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7519"
                }
              ]
            },
            "t_enum(Type)7522": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7519": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "be0910843e293314534491bbd889c08700b9fbaecf5c52a44fabc4bfc6ceb5e5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "50c18c17ea7fab558aa49f59db36e587a4accd0f8501a1967c178fced6aa4778",
          "withoutMetadata": "4b77cb632e48a55f527e913cf70174a818cb9d45e9bbb6fb320c81606e9410cc",
          "linkedWithoutMetadata": "4b77cb632e48a55f527e913cf70174a818cb9d45e9bbb6fb320c81606e9410cc"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "SafeMath"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "getPresaleRecordsByToken(address)",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:22"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "uniswapV2Router02",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:26"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:30"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:32"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "3254c585e794087f5c8bf663215c45ae6cf677f536d3dbd349a8aa53f8bf99bf",
          "withoutMetadata": "e6d967cb4ac2d5eac0fd1f6fc73fdbca50481e92288d6f4462563ee1a7d16255",
          "linkedWithoutMetadata": "e6d967cb4ac2d5eac0fd1f6fc73fdbca50481e92288d6f4462563ee1a7d16255"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),address,(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:87"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "uniswapV2Router02",
              "type": "t_contract(IUniswapV2Router02)3945",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4293_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4310_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4269_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4276_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4319_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4285_storage",
              "src": "contracts\\Launchpad\\Presale.sol:33"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4257_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4335_storage",
              "src": "contracts\\Launchpad\\Presale.sol:36"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4348_storage",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4262_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4951_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:41"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4935))",
              "src": "contracts\\Launchpad\\Presale.sol:44"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4971_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:52"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:53"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_contract(IUniswapV2Router02)3945": {
              "label": "contract IUniswapV2Router02"
            },
            "t_struct(PresaleInfo)4293_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4239"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(PreSaleStatus)4239": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED"
              ]
            },
            "t_struct(ParticipationCriteria)4310_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4242"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4242": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4269_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4276_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4319_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4285_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4257_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4335_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4348_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4262_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4262_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4951_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4951_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4935))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4935)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4935": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4971_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4971_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4935"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6750_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6750_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6947_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6947_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6947_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6924"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6881"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6921"
                }
              ]
            },
            "t_enum(Type)6924": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6881": {
              "label": "contract Locker"
            },
            "t_enum(Status)6921": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7518_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7518_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7518_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7499"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7496"
                }
              ]
            },
            "t_enum(Type)7499": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7496": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "be0910843e293314534491bbd889c08700b9fbaecf5c52a44fabc4bfc6ceb5e5",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "276ceb87bd8242fe14fb6ab8506b1e6c98c24dd4fb697acc19fbedc2738caf4e",
          "withoutMetadata": "93635c04811711e88d681d71e977722062ddb49ce80d4aa436c22c367acb758a",
          "linkedWithoutMetadata": "93635c04811711e88d681d71e977722062ddb49ce80d4aa436c22c367acb758a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "SafeMath"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "getPresaleRecordsByToken(address)",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:22"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "uniswapV2Router02",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:26"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:30"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:32"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "fc9ea4e224251e9283481c76e47008b4f90e32b3e83092d522a4a2e9be6f0cfe",
          "withoutMetadata": "51e8ebe983ecfdde0a00a321bb462892eed19a9c5095ed98000e4fa0778d2de4",
          "linkedWithoutMetadata": "51e8ebe983ecfdde0a00a321bb462892eed19a9c5095ed98000e4fa0778d2de4"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),address,(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:87"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "uniswapV2Router02",
              "type": "t_contract(IUniswapV2Router02)3945",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4293_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4310_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4269_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4276_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4319_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4285_storage",
              "src": "contracts\\Launchpad\\Presale.sol:33"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4257_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4335_storage",
              "src": "contracts\\Launchpad\\Presale.sol:36"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4348_storage",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4262_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4951_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:41"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4935))",
              "src": "contracts\\Launchpad\\Presale.sol:44"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4971_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:52"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:53"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_contract(IUniswapV2Router02)3945": {
              "label": "contract IUniswapV2Router02"
            },
            "t_struct(PresaleInfo)4293_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4239"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(PreSaleStatus)4239": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED"
              ]
            },
            "t_struct(ParticipationCriteria)4310_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4242"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4242": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4269_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4276_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4319_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4285_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4257_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4335_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4348_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4262_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4262_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4951_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4951_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4935))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4935)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4935": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4971_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4971_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4935"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6750_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6750_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6947_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6947_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6947_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6924"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6881"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6921"
                }
              ]
            },
            "t_enum(Type)6924": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6881": {
              "label": "contract Locker"
            },
            "t_enum(Status)6921": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7518_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7518_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7518_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7499"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7496"
                }
              ]
            },
            "t_enum(Type)7499": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7496": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "873b4c1040f671d971513fbfbad47d8067e18d48ad988c095ac6ecd16c93d4e1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "ff70a1c3a5b8accf7e835f008c59dd91437640af2766822935e0dcdc77ae9318",
          "withoutMetadata": "7a8b821bcec6df61c4a7ad5bcc20dbb4badede6021618088a03d142302402a89",
          "linkedWithoutMetadata": "7a8b821bcec6df61c4a7ad5bcc20dbb4badede6021618088a03d142302402a89"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "SafeMath"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "getPresaleRecordsByToken(address)",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:22"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "launchpadAddresses",
              "type": "t_struct(LaunchpadAddresses)4313_storage",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:25"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:29"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:30"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(LaunchpadAddresses)4313_storage": {
              "label": "struct LaunchPadLib.LaunchpadAddresses",
              "members": [
                {
                  "label": "pancakeSwapRouterAddr",
                  "type": "t_address"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "280440a0a12dd88639aaae336456c94b2ed3076a011df49657ac1b88b34e3aa7",
          "withoutMetadata": "9eded042347f36252dd665da9980a7997539fde0aa16ecd765173743dde80fe4",
          "linkedWithoutMetadata": "9eded042347f36252dd665da9980a7997539fde0aa16ecd765173743dde80fe4"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(address),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:85"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:40"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "launchpadAddresses",
              "type": "t_struct(LaunchpadAddresses)4313_storage",
              "src": "contracts\\Launchpad\\Presale.sol:23"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4293_storage",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4310_storage",
              "src": "contracts\\Launchpad\\Presale.sol:25"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4269_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4276_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4322_storage",
              "src": "contracts\\Launchpad\\Presale.sol:30"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4285_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4257_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4338_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4351_storage",
              "src": "contracts\\Launchpad\\Presale.sol:35"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4262_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4958_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:40"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4942))",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4978_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:50"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:51"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_struct(LaunchpadAddresses)4313_storage": {
              "label": "struct LaunchPadLib.LaunchpadAddresses",
              "members": [
                {
                  "label": "pancakeSwapRouterAddr",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PresaleInfo)4293_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4239"
                }
              ]
            },
            "t_enum(PreSaleStatus)4239": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED"
              ]
            },
            "t_struct(ParticipationCriteria)4310_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4242"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4242": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4269_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4276_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4322_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4285_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4257_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4338_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4351_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4262_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4262_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4958_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4958_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4942))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4942)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4942": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4978_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4978_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4942"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6758_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6758_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6955_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6955_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6955_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6932"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6889"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6929"
                }
              ]
            },
            "t_enum(Type)6932": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6889": {
              "label": "contract Locker"
            },
            "t_enum(Status)6929": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7526_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7526_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7526_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7507"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7504"
                }
              ]
            },
            "t_enum(Type)7507": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7504": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "873b4c1040f671d971513fbfbad47d8067e18d48ad988c095ac6ecd16c93d4e1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "a7d4b523e349d682a1a3e61eb69a4519dd5d21e19960c1fa887b5e9706f40f2f",
          "withoutMetadata": "7a8b821bcec6df61c4a7ad5bcc20dbb4badede6021618088a03d142302402a89",
          "linkedWithoutMetadata": "7a8b821bcec6df61c4a7ad5bcc20dbb4badede6021618088a03d142302402a89"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "SafeMath"
        ],
        "methods": [
          "(address,address,address)",
          "getPresaleRecordsByToken(address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:22"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "launchpadAddresses",
              "type": "t_struct(LaunchpadAddresses)4313_storage",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:25"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:29"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:30"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(LaunchpadAddresses)4313_storage": {
              "label": "struct LaunchPadLib.LaunchpadAddresses",
              "members": [
                {
                  "label": "pancakeSwapRouterAddr",
                  "type": "t_address"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "280440a0a12dd88639aaae336456c94b2ed3076a011df49657ac1b88b34e3aa7",
          "withoutMetadata": "9eded042347f36252dd665da9980a7997539fde0aa16ecd765173743dde80fe4",
          "linkedWithoutMetadata": "9eded042347f36252dd665da9980a7997539fde0aa16ecd765173743dde80fe4"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(address),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:85"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:40"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "launchpadAddresses",
              "type": "t_struct(LaunchpadAddresses)4313_storage",
              "src": "contracts\\Launchpad\\Presale.sol:23"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4293_storage",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4310_storage",
              "src": "contracts\\Launchpad\\Presale.sol:25"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4269_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4276_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4322_storage",
              "src": "contracts\\Launchpad\\Presale.sol:30"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4285_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4257_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4338_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4351_storage",
              "src": "contracts\\Launchpad\\Presale.sol:35"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4262_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4958_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:40"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4942))",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4978_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:50"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:51"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_struct(LaunchpadAddresses)4313_storage": {
              "label": "struct LaunchPadLib.LaunchpadAddresses",
              "members": [
                {
                  "label": "pancakeSwapRouterAddr",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PresaleInfo)4293_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4239"
                }
              ]
            },
            "t_enum(PreSaleStatus)4239": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED"
              ]
            },
            "t_struct(ParticipationCriteria)4310_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4242"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4242": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4269_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4276_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4322_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4285_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4257_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4338_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4351_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4262_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4262_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4958_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4958_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4942))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4942)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4942": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4978_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4978_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4942"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6758_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6758_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6955_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6955_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6955_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6932"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6889"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6929"
                }
              ]
            },
            "t_enum(Type)6932": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6889": {
              "label": "contract Locker"
            },
            "t_enum(Status)6929": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7526_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7526_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7526_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7507"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7504"
                }
              ]
            },
            "t_enum(Type)7507": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7504": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "873b4c1040f671d971513fbfbad47d8067e18d48ad988c095ac6ecd16c93d4e1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "bfdd798324a73defd04eba8ae4034ac4eef7ce7f18318509791ad8952c7f0f0d",
          "withoutMetadata": "46c9b125fb66bd8dc51e73a44ccb0c32c10ce324e0ae49ac1a18fbea588673a6",
          "linkedWithoutMetadata": "46c9b125fb66bd8dc51e73a44ccb0c32c10ce324e0ae49ac1a18fbea588673a6"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "SafeMath"
        ],
        "methods": [
          "(address,address,address)",
          "getPresaleRecordsByToken(address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:22"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "launchpadAddresses",
              "type": "t_struct(LaunchpadAddresses)4313_storage",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:25"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:29"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:30"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(LaunchpadAddresses)4313_storage": {
              "label": "struct LaunchPadLib.LaunchpadAddresses",
              "members": [
                {
                  "label": "pancakeSwapRouterAddr",
                  "type": "t_address"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "280440a0a12dd88639aaae336456c94b2ed3076a011df49657ac1b88b34e3aa7",
          "withoutMetadata": "9eded042347f36252dd665da9980a7997539fde0aa16ecd765173743dde80fe4",
          "linkedWithoutMetadata": "9eded042347f36252dd665da9980a7997539fde0aa16ecd765173743dde80fe4"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(address),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:85"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:40"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "launchpadAddresses",
              "type": "t_struct(LaunchpadAddresses)4313_storage",
              "src": "contracts\\Launchpad\\Presale.sol:23"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4293_storage",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4310_storage",
              "src": "contracts\\Launchpad\\Presale.sol:25"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4269_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4276_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4322_storage",
              "src": "contracts\\Launchpad\\Presale.sol:30"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4285_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4257_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4338_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4351_storage",
              "src": "contracts\\Launchpad\\Presale.sol:35"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4262_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4989_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:40"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4973))",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)5009_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:50"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:51"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_struct(LaunchpadAddresses)4313_storage": {
              "label": "struct LaunchPadLib.LaunchpadAddresses",
              "members": [
                {
                  "label": "pancakeSwapRouterAddr",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PresaleInfo)4293_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4239"
                }
              ]
            },
            "t_enum(PreSaleStatus)4239": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED"
              ]
            },
            "t_struct(ParticipationCriteria)4310_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4242"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4242": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4269_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4276_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4322_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4285_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4257_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4338_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4351_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4262_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4262_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4989_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4989_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4973))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4973)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4973": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)5009_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)5009_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4973"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6789_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6789_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6986_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6986_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6986_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6963"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6920"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6960"
                }
              ]
            },
            "t_enum(Type)6963": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6920": {
              "label": "contract Locker"
            },
            "t_enum(Status)6960": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7557_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7557_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7557_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7538"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7535"
                }
              ]
            },
            "t_enum(Type)7538": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7535": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "873b4c1040f671d971513fbfbad47d8067e18d48ad988c095ac6ecd16c93d4e1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "bf3f28f266f224f2f32c45967a3be191313c7552c8449d196c222ac0af6f1544",
          "withoutMetadata": "23a0f45717c23bfb172099edbadeabc4ae83e181a310546d367ce2cc03cc5cf8",
          "linkedWithoutMetadata": "23a0f45717c23bfb172099edbadeabc4ae83e181a310546d367ce2cc03cc5cf8"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "SafeMath"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:22"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "launchpadAddresses",
              "type": "t_struct(LaunchpadAddresses)4313_storage",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:25"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:29"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:30"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(LaunchpadAddresses)4313_storage": {
              "label": "struct LaunchPadLib.LaunchpadAddresses",
              "members": [
                {
                  "label": "pancakeSwapRouterAddr",
                  "type": "t_address"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_array(t_address)dyn_storage)": {
              "label": "mapping(address => address[])"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "280440a0a12dd88639aaae336456c94b2ed3076a011df49657ac1b88b34e3aa7",
          "withoutMetadata": "9eded042347f36252dd665da9980a7997539fde0aa16ecd765173743dde80fe4",
          "linkedWithoutMetadata": "9eded042347f36252dd665da9980a7997539fde0aa16ecd765173743dde80fe4"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(address),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:85"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:40"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "launchpadAddresses",
              "type": "t_struct(LaunchpadAddresses)4313_storage",
              "src": "contracts\\Launchpad\\Presale.sol:23"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4293_storage",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4310_storage",
              "src": "contracts\\Launchpad\\Presale.sol:25"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4269_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4276_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4322_storage",
              "src": "contracts\\Launchpad\\Presale.sol:30"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4285_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4257_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4338_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4351_storage",
              "src": "contracts\\Launchpad\\Presale.sol:35"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4262_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4976_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:40"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4960))",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4996_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:50"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:51"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_struct(LaunchpadAddresses)4313_storage": {
              "label": "struct LaunchPadLib.LaunchpadAddresses",
              "members": [
                {
                  "label": "pancakeSwapRouterAddr",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PresaleInfo)4293_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4239"
                }
              ]
            },
            "t_enum(PreSaleStatus)4239": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED"
              ]
            },
            "t_struct(ParticipationCriteria)4310_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4242"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4242": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(PresaleTimes)4269_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4276_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4322_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4285_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4257_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4338_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4351_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4262_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4262_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4976_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4976_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4960))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4960)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4960": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4996_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4996_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4960"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6776_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6776_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6973_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6973_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6973_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6950"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6907"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6947"
                }
              ]
            },
            "t_enum(Type)6950": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6907": {
              "label": "contract Locker"
            },
            "t_enum(Status)6947": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7544_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7544_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7544_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7525"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7522"
                }
              ]
            },
            "t_enum(Type)7525": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7522": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Context": {
        "src": "contracts\\extra.sol:786",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Counters": {
        "src": "contracts\\extra.sol:757",
        "version": {
          "withMetadata": "a80d92032a50e9ed2a527f8a46d8c31b34e1983c99f478fbb1fd82ca1a62d354",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "contracts\\extra.sol:274",
        "version": {
          "withMetadata": "d715df012e8ea95d4379a596433a4c1b828a9d8c3632514be9e4872e54a58224",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712": {
        "src": "contracts\\extra.sol:30",
        "inherit": [],
        "libraries": [
          "ECDSA"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "contracts\\extra.sol:55"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_DOMAIN_SEPARATOR",
            "src": "contracts\\extra.sol:34"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_CACHED_CHAIN_ID",
            "src": "contracts\\extra.sol:35"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_NAME",
            "src": "contracts\\extra.sol:37"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_HASHED_VERSION",
            "src": "contracts\\extra.sol:38"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_TYPE_HASH",
            "src": "contracts\\extra.sol:39"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts\\extra.sol:853",
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "contracts\\extra.sol:872"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_decimals",
            "src": "contracts\\extra.sol:870"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\extra.sol:860"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\extra.sol:862"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts\\extra.sol:864"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts\\extra.sol:866"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts\\extra.sol:868"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Permit": {
        "src": "contracts\\extra.sol:988",
        "inherit": [
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "Counters",
          "ECDSA"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Permit",
            "src": "contracts\\extra.sol:1001"
          },
          {
            "kind": "state-variable-assignment",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\extra.sol:994"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_PERMIT_TYPEHASH",
            "src": "contracts\\extra.sol:994"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Permit",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)1476_storage)",
              "src": "contracts\\extra.sol:991"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)1476_storage)": {
              "label": "mapping(address => struct Counters.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)1476_storage": {
              "label": "struct Counters.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "contracts\\extra.sol:189",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Permit": {
        "src": "contracts\\extra.sol:136",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "contracts\\extra.sol:1112",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "contracts\\extra.sol:1061",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "contracts\\extra.sol:619",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "contracts\\extra.sol:713",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts\\extra.sol:800",
        "version": {
          "withMetadata": "d643e19969e8cd3d0e0620d48a808973fe9b94dd358da0ed07d6fb4b588f0ee8",
          "withoutMetadata": "709fda6250606766fe7a05eaf2001a0aec2c8951a150c1428b2b04146a8e7460",
          "linkedWithoutMetadata": "709fda6250606766fe7a05eaf2001a0aec2c8951a150c1428b2b04146a8e7460"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts\\extra.sol:808"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts\\extra.sol:801"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "contracts\\extra.sol:490",
        "version": {
          "withMetadata": "958f3a2bee3596dee67fd20d4b8a6be2acff81828f910d4202cbee14813a2934",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathInt": {
        "src": "contracts\\extra.sol:550",
        "version": {
          "withMetadata": "3690f07d59f82fdd376622f3a624c148ee5c1863dde146794c1479a68e9eb8c7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUint": {
        "src": "contracts\\extra.sol:610",
        "version": {
          "withMetadata": "a1f0d135eceeb376f8076c265733941fb72592e175c6adebbd96ebbdc5d9c3e6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SinsERC20Token": {
        "src": "contracts\\extra.sol:1131",
        "version": {
          "withMetadata": "3373dcda53f5e799fb2b1952454f48a08b8156b0f1bfdfdbbfe8691646812344",
          "withoutMetadata": "24318ed411badb254dd12adadec6d5abc966466232280dbadea13ed598fe6576",
          "linkedWithoutMetadata": "24318ed411badb254dd12adadec6d5abc966466232280dbadea13ed598fe6576"
        },
        "inherit": [
          "Ownable",
          "ERC20Permit",
          "EIP712",
          "IERC20Permit",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address)",
          "()",
          "removeLimits()",
          "updateMaxTxnAmount(uint256)",
          "updateMaxWalletAmount(uint256)",
          "excludeFromMaxTransaction(address,bool)",
          "disableTransferDelay()",
          "enableTrading()",
          "pauseTrading()",
          "setLaunchMarketMaker(address,bool)",
          "resumeTrading()",
          "setAutomatedMarketMakerPair(address,bool)",
          "excludeFromFees(address,bool)",
          "updateSwapEnabled(bool)",
          "updateBuyFees(uint256,uint256,uint256,uint256)",
          "updateSellFees(uint256,uint256,uint256,uint256)",
          "updateMarketingWallet(address)",
          "updatetreasuryWallet(address)",
          "isExcludedFromFees(address)",
          "withdrawEthPool()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SinsERC20Token",
            "src": "contracts\\extra.sol:1193"
          },
          {
            "kind": "state-variable-assignment",
            "name": "tradingActive",
            "src": "contracts\\extra.sol:1141"
          },
          {
            "kind": "state-variable-assignment",
            "name": "swapEnabled",
            "src": "contracts\\extra.sol:1142"
          },
          {
            "kind": "state-variable-assignment",
            "name": "enableBlock",
            "src": "contracts\\extra.sol:1144"
          },
          {
            "kind": "state-variable-assignment",
            "name": "limitsInEffect",
            "src": "contracts\\extra.sol:1163"
          },
          {
            "kind": "state-variable-assignment",
            "name": "transferDelayEnabled",
            "src": "contracts\\extra.sol:1166"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SinsERC20Token",
              "label": "uniswapV2Router",
              "type": "t_contract(IUniswapV2Router02)1469",
              "src": "contracts\\extra.sol:1134"
            },
            {
              "contract": "SinsERC20Token",
              "label": "uniswapV2Pair",
              "type": "t_address",
              "src": "contracts\\extra.sol:1135"
            },
            {
              "contract": "SinsERC20Token",
              "label": "marketingWallet",
              "type": "t_address",
              "src": "contracts\\extra.sol:1138"
            },
            {
              "contract": "SinsERC20Token",
              "label": "treasuryWallet",
              "type": "t_address",
              "src": "contracts\\extra.sol:1139"
            },
            {
              "contract": "SinsERC20Token",
              "label": "tradingActive",
              "type": "t_bool",
              "src": "contracts\\extra.sol:1141"
            },
            {
              "contract": "SinsERC20Token",
              "label": "swapEnabled",
              "type": "t_bool",
              "src": "contracts\\extra.sol:1142"
            },
            {
              "contract": "SinsERC20Token",
              "label": "swapping",
              "type": "t_bool",
              "src": "contracts\\extra.sol:1143"
            },
            {
              "contract": "SinsERC20Token",
              "label": "enableBlock",
              "type": "t_uint256",
              "src": "contracts\\extra.sol:1144"
            },
            {
              "contract": "SinsERC20Token",
              "label": "buyTotalFees",
              "type": "t_uint256",
              "src": "contracts\\extra.sol:1146"
            },
            {
              "contract": "SinsERC20Token",
              "label": "buyMarketingFee",
              "type": "t_uint256",
              "src": "contracts\\extra.sol:1147"
            },
            {
              "contract": "SinsERC20Token",
              "label": "buyLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\extra.sol:1148"
            },
            {
              "contract": "SinsERC20Token",
              "label": "buyBurnFee",
              "type": "t_uint256",
              "src": "contracts\\extra.sol:1149"
            },
            {
              "contract": "SinsERC20Token",
              "label": "buyTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\extra.sol:1150"
            },
            {
              "contract": "SinsERC20Token",
              "label": "sellTotalFees",
              "type": "t_uint256",
              "src": "contracts\\extra.sol:1152"
            },
            {
              "contract": "SinsERC20Token",
              "label": "sellMarketingFee",
              "type": "t_uint256",
              "src": "contracts\\extra.sol:1153"
            },
            {
              "contract": "SinsERC20Token",
              "label": "sellLiquidityFee",
              "type": "t_uint256",
              "src": "contracts\\extra.sol:1154"
            },
            {
              "contract": "SinsERC20Token",
              "label": "sellBurnFee",
              "type": "t_uint256",
              "src": "contracts\\extra.sol:1155"
            },
            {
              "contract": "SinsERC20Token",
              "label": "sellTreasuryFee",
              "type": "t_uint256",
              "src": "contracts\\extra.sol:1156"
            },
            {
              "contract": "SinsERC20Token",
              "label": "tokensForMarketing",
              "type": "t_uint256",
              "src": "contracts\\extra.sol:1158"
            },
            {
              "contract": "SinsERC20Token",
              "label": "tokensForLiquidity",
              "type": "t_uint256",
              "src": "contracts\\extra.sol:1159"
            },
            {
              "contract": "SinsERC20Token",
              "label": "tokensForBurn",
              "type": "t_uint256",
              "src": "contracts\\extra.sol:1160"
            },
            {
              "contract": "SinsERC20Token",
              "label": "tokensForTreasury",
              "type": "t_uint256",
              "src": "contracts\\extra.sol:1161"
            },
            {
              "contract": "SinsERC20Token",
              "label": "limitsInEffect",
              "type": "t_bool",
              "src": "contracts\\extra.sol:1163"
            },
            {
              "contract": "SinsERC20Token",
              "label": "_holderLastTransferTimestamp",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\extra.sol:1165"
            },
            {
              "contract": "SinsERC20Token",
              "label": "transferDelayEnabled",
              "type": "t_bool",
              "src": "contracts\\extra.sol:1166"
            },
            {
              "contract": "SinsERC20Token",
              "label": "_isExcludedFromFees",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\extra.sol:1169"
            },
            {
              "contract": "SinsERC20Token",
              "label": "_isExcludedMaxTransactionAmount",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\extra.sol:1170"
            },
            {
              "contract": "SinsERC20Token",
              "label": "maxTransactionAmount",
              "type": "t_uint256",
              "src": "contracts\\extra.sol:1171"
            },
            {
              "contract": "SinsERC20Token",
              "label": "maxWallet",
              "type": "t_uint256",
              "src": "contracts\\extra.sol:1172"
            },
            {
              "contract": "SinsERC20Token",
              "label": "initialSupply",
              "type": "t_uint256",
              "src": "contracts\\extra.sol:1173"
            },
            {
              "contract": "SinsERC20Token",
              "label": "automatedMarketMakerPairs",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\extra.sol:1176"
            },
            {
              "contract": "SinsERC20Token",
              "label": "launchMarketMaker",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\extra.sol:1177"
            }
          ],
          "types": {
            "t_contract(IUniswapV2Router02)1469": {
              "label": "contract IUniswapV2Router02"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "873b4c1040f671d971513fbfbad47d8067e18d48ad988c095ac6ecd16c93d4e1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "8c8972fbf9afb6c415be9e6a1fb59f320e05d49b66df8bad4772fbe74ad933cd",
          "withoutMetadata": "e9727be233fad3ab9375dbb6fcc1567e45730e2d508b8aa1f2176e2b9e17ed2f",
          "linkedWithoutMetadata": "e9727be233fad3ab9375dbb6fcc1567e45730e2d508b8aa1f2176e2b9e17ed2f"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "SafeMath"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:22"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "launchpadAddresses",
              "type": "t_struct(LaunchpadAddresses)4313_storage",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:25"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:29"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:30"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(LaunchpadAddresses)4313_storage": {
              "label": "struct LaunchPadLib.LaunchpadAddresses",
              "members": [
                {
                  "label": "pancakeSwapRouterAddr",
                  "type": "t_address"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "2e5df42e899e21f4f7b8bff3880c6faa736ee5e96cbe00f735114c0df156de23",
          "withoutMetadata": "7f8302a73dd1a782deaf1c4afa13af3da0f98d6309406bc917e8b3a7f73b6376",
          "linkedWithoutMetadata": "7f8302a73dd1a782deaf1c4afa13af3da0f98d6309406bc917e8b3a7f73b6376"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(address),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:85"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:40"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "launchpadAddresses",
              "type": "t_struct(LaunchpadAddresses)4313_storage",
              "src": "contracts\\Launchpad\\Presale.sol:23"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4293_storage",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4310_storage",
              "src": "contracts\\Launchpad\\Presale.sol:25"
            },
            {
              "contract": "Presale",
              "label": "tokenomics",
              "type": "t_struct(Tokenomics)4329_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4269_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4276_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4322_storage",
              "src": "contracts\\Launchpad\\Presale.sol:30"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4285_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4257_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4338_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4351_storage",
              "src": "contracts\\Launchpad\\Presale.sol:35"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4262_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4978_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:40"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4962))",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4998_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:50"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:51"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_struct(LaunchpadAddresses)4313_storage": {
              "label": "struct LaunchPadLib.LaunchpadAddresses",
              "members": [
                {
                  "label": "pancakeSwapRouterAddr",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PresaleInfo)4293_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4239"
                }
              ]
            },
            "t_enum(PreSaleStatus)4239": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED"
              ]
            },
            "t_struct(ParticipationCriteria)4310_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4242"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4242": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(Tokenomics)4329_storage": {
              "label": "struct LaunchPadLib.Tokenomics",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensForLocker",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(PresaleTimes)4269_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4276_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4322_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4285_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4257_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4338_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4351_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4262_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4262_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4978_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4978_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4962))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4962)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4962": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4998_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4998_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4962"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6778_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6778_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6975_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6975_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6975_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6952"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6909"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6949"
                }
              ]
            },
            "t_enum(Type)6952": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6909": {
              "label": "contract Locker"
            },
            "t_enum(Status)6949": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7546_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7546_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7546_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7527"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7524"
                }
              ]
            },
            "t_enum(Type)7527": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7524": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "2aad5391994b143865d6e661dbdf72c7f90ea6f0dad591edcf2b9fc8d238df77",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "e3cd6d195701e7f1681aa3cda0a65142600b18734ced887d8b372e439f43cbcd",
          "withoutMetadata": "0ff08357dbd920ec3727483155865006b986f4f399ff9561e69ee316e157c3b1",
          "linkedWithoutMetadata": "0ff08357dbd920ec3727483155865006b986f4f399ff9561e69ee316e157c3b1"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "SafeMath"
        ],
        "methods": [
          "(address,address,address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:22"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "launchpadAddresses",
              "type": "t_struct(LaunchpadAddresses)4313_storage",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:25"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:29"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:30"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(LaunchpadAddresses)4313_storage": {
              "label": "struct LaunchPadLib.LaunchpadAddresses",
              "members": [
                {
                  "label": "pancakeSwapRouterAddr",
                  "type": "t_address"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "e51181e3039398d2b9f67f2da360d33957f5dae9a4f815ce47fdf71e1966e453",
          "withoutMetadata": "7f8302a73dd1a782deaf1c4afa13af3da0f98d6309406bc917e8b3a7f73b6376",
          "linkedWithoutMetadata": "7f8302a73dd1a782deaf1c4afa13af3da0f98d6309406bc917e8b3a7f73b6376"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(address),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:85"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:40"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "launchpadAddresses",
              "type": "t_struct(LaunchpadAddresses)4313_storage",
              "src": "contracts\\Launchpad\\Presale.sol:23"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4293_storage",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4310_storage",
              "src": "contracts\\Launchpad\\Presale.sol:25"
            },
            {
              "contract": "Presale",
              "label": "tokenomics",
              "type": "t_struct(Tokenomics)4329_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4269_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4276_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4322_storage",
              "src": "contracts\\Launchpad\\Presale.sol:30"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4285_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4257_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4338_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4351_storage",
              "src": "contracts\\Launchpad\\Presale.sol:35"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4262_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4978_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:40"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4962))",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4998_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:50"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:51"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_struct(LaunchpadAddresses)4313_storage": {
              "label": "struct LaunchPadLib.LaunchpadAddresses",
              "members": [
                {
                  "label": "pancakeSwapRouterAddr",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PresaleInfo)4293_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4239"
                }
              ]
            },
            "t_enum(PreSaleStatus)4239": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED"
              ]
            },
            "t_struct(ParticipationCriteria)4310_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4242"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4242": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(Tokenomics)4329_storage": {
              "label": "struct LaunchPadLib.Tokenomics",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensForLocker",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(PresaleTimes)4269_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4276_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4322_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4285_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4257_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4338_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4351_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4262_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4262_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4978_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4978_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4962))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4962)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4962": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4998_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4998_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4962"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6778_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6778_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6975_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6975_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6975_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6952"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6909"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6949"
                }
              ]
            },
            "t_enum(Type)6952": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6909": {
              "label": "contract Locker"
            },
            "t_enum(Status)6949": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7546_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7546_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7546_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7527"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7524"
                }
              ]
            },
            "t_enum(Type)7527": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7524": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "2aad5391994b143865d6e661dbdf72c7f90ea6f0dad591edcf2b9fc8d238df77",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "9f88962c96f15c7a81c36948ca667eb2d2cd1c5ea86c9eef8f301250b75ca87f",
          "withoutMetadata": "6101cd611480e81192baaa2ff82f95844021d25d9c3d74941dbff17e64f10b9d",
          "linkedWithoutMetadata": "6101cd611480e81192baaa2ff82f95844021d25d9c3d74941dbff17e64f10b9d"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:22"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "launchpadAddresses",
              "type": "t_struct(LaunchpadAddresses)4313_storage",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:25"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:29"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:30"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(LaunchpadAddresses)4313_storage": {
              "label": "struct LaunchPadLib.LaunchpadAddresses",
              "members": [
                {
                  "label": "pancakeSwapRouterAddr",
                  "type": "t_address"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "e51181e3039398d2b9f67f2da360d33957f5dae9a4f815ce47fdf71e1966e453",
          "withoutMetadata": "7f8302a73dd1a782deaf1c4afa13af3da0f98d6309406bc917e8b3a7f73b6376",
          "linkedWithoutMetadata": "7f8302a73dd1a782deaf1c4afa13af3da0f98d6309406bc917e8b3a7f73b6376"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(address),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:85"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:40"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "launchpadAddresses",
              "type": "t_struct(LaunchpadAddresses)4313_storage",
              "src": "contracts\\Launchpad\\Presale.sol:23"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4293_storage",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4310_storage",
              "src": "contracts\\Launchpad\\Presale.sol:25"
            },
            {
              "contract": "Presale",
              "label": "tokenomics",
              "type": "t_struct(Tokenomics)4329_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4269_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4276_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4322_storage",
              "src": "contracts\\Launchpad\\Presale.sol:30"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4285_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4257_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4338_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4351_storage",
              "src": "contracts\\Launchpad\\Presale.sol:35"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4262_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4966_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:40"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4950))",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4986_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:50"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:51"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_struct(LaunchpadAddresses)4313_storage": {
              "label": "struct LaunchPadLib.LaunchpadAddresses",
              "members": [
                {
                  "label": "pancakeSwapRouterAddr",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PresaleInfo)4293_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4239"
                }
              ]
            },
            "t_enum(PreSaleStatus)4239": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED"
              ]
            },
            "t_struct(ParticipationCriteria)4310_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4242"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4242": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(Tokenomics)4329_storage": {
              "label": "struct LaunchPadLib.Tokenomics",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensForLocker",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(PresaleTimes)4269_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4276_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4322_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4285_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4257_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4338_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4351_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4262_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4262_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4966_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4966_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4950))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4950)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4950": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4986_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4986_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4950"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6766_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6766_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6963_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6963_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6963_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6940"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6897"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6937"
                }
              ]
            },
            "t_enum(Type)6940": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6897": {
              "label": "contract Locker"
            },
            "t_enum(Status)6937": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7534_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7534_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7534_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7515"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7512"
                }
              ]
            },
            "t_enum(Type)7515": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7512": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "864b56e002b6c1fe6518c6f5c15b75ad30310fdbc5dc65a8138f7ba055a4afb9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "79b6752db59db13d91b6c57573b47f7b6ea86f6f581619ebdc4d4df83080c569",
          "withoutMetadata": "31c5ee1f6327b8b325d84366cf637bb2d6547c16daebaf8b0f674c4775657ab3",
          "linkedWithoutMetadata": "31c5ee1f6327b8b325d84366cf637bb2d6547c16daebaf8b0f674c4775657ab3"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "SafeMath"
        ],
        "methods": [
          "((address,address,address,address,address))",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:22"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "launchpadAddresses",
              "type": "t_struct(LaunchpadAddresses)4321_storage",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:25"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:29"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:30"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(LaunchpadAddresses)4321_storage": {
              "label": "struct LaunchPadLib.LaunchpadAddresses",
              "members": [
                {
                  "label": "pancakeSwapFactoryAddr",
                  "type": "t_address"
                },
                {
                  "label": "pancakeSwapRouterAddr",
                  "type": "t_address"
                },
                {
                  "label": "WBNBAddr",
                  "type": "t_address"
                },
                {
                  "label": "teamAddr",
                  "type": "t_address"
                },
                {
                  "label": "devAddr",
                  "type": "t_address"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "04813a79bb2f3b919c3609798fd3eeb2fe1875c2c3496f641740785d8a5fc2f4",
          "withoutMetadata": "0ee95d074b6be615606e2d7b2e2802ff771b9eb1383abcb5b837859510aef88d",
          "linkedWithoutMetadata": "0ee95d074b6be615606e2d7b2e2802ff771b9eb1383abcb5b837859510aef88d"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(address,address,address,address,address),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:85"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:40"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "launchpadAddresses",
              "type": "t_struct(LaunchpadAddresses)4321_storage",
              "src": "contracts\\Launchpad\\Presale.sol:23"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4293_storage",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4310_storage",
              "src": "contracts\\Launchpad\\Presale.sol:25"
            },
            {
              "contract": "Presale",
              "label": "tokenomics",
              "type": "t_struct(Tokenomics)4337_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4269_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4276_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4330_storage",
              "src": "contracts\\Launchpad\\Presale.sol:30"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4285_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4257_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4346_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4359_storage",
              "src": "contracts\\Launchpad\\Presale.sol:35"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4262_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4975_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:40"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4959))",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4995_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:50"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:51"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_struct(LaunchpadAddresses)4321_storage": {
              "label": "struct LaunchPadLib.LaunchpadAddresses",
              "members": [
                {
                  "label": "pancakeSwapFactoryAddr",
                  "type": "t_address"
                },
                {
                  "label": "pancakeSwapRouterAddr",
                  "type": "t_address"
                },
                {
                  "label": "WBNBAddr",
                  "type": "t_address"
                },
                {
                  "label": "teamAddr",
                  "type": "t_address"
                },
                {
                  "label": "devAddr",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PresaleInfo)4293_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4239"
                }
              ]
            },
            "t_enum(PreSaleStatus)4239": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED"
              ]
            },
            "t_struct(ParticipationCriteria)4310_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4242"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4242": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(Tokenomics)4337_storage": {
              "label": "struct LaunchPadLib.Tokenomics",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensForLocker",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(PresaleTimes)4269_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4276_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4330_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4285_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4257_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4346_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4359_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4262_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4262_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4975_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4975_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4959))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4959)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4959": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4995_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4995_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4959"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6759_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6759_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6956_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6956_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6956_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6933"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6890"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6930"
                }
              ]
            },
            "t_enum(Type)6933": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6890": {
              "label": "contract Locker"
            },
            "t_enum(Status)6930": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7527_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7527_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7527_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7508"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7505"
                }
              ]
            },
            "t_enum(Type)7508": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7505": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "838d40f85c234f4de3333c8ff2387f6d0d0faea7b9a43fdc5a34edec084854b9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "0471910c329595af4e3b08cc24f4602325ef84486de9943122ba3564506d6c9d",
          "withoutMetadata": "cf849770a0fd2aaf2d94376fde11a9b1f11b621835650dd2d80544655f009a21",
          "linkedWithoutMetadata": "cf849770a0fd2aaf2d94376fde11a9b1f11b621835650dd2d80544655f009a21"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "SafeMath"
        ],
        "methods": [
          "((address,address,address,address,address))",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:22"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "launchpadAddresses",
              "type": "t_struct(LaunchpadAddresses)4331_storage",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:25"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:29"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:30"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(LaunchpadAddresses)4331_storage": {
              "label": "struct LaunchPadLib.LaunchpadAddresses",
              "members": [
                {
                  "label": "pancakeSwapFactoryAddr",
                  "type": "t_address"
                },
                {
                  "label": "pancakeSwapRouterAddr",
                  "type": "t_address"
                },
                {
                  "label": "WBNBAddr",
                  "type": "t_address"
                },
                {
                  "label": "teamAddr",
                  "type": "t_address"
                },
                {
                  "label": "devAddr",
                  "type": "t_address"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "f1be15588917a037eb93104207a3635badced46676ea26e47a66cc8073055c58",
          "withoutMetadata": "0ee95d074b6be615606e2d7b2e2802ff771b9eb1383abcb5b837859510aef88d",
          "linkedWithoutMetadata": "0ee95d074b6be615606e2d7b2e2802ff771b9eb1383abcb5b837859510aef88d"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(address,address,address,address,address),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:85"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:40"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "launchpadAddresses",
              "type": "t_struct(LaunchpadAddresses)4331_storage",
              "src": "contracts\\Launchpad\\Presale.sol:23"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4303_storage",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4320_storage",
              "src": "contracts\\Launchpad\\Presale.sol:25"
            },
            {
              "contract": "Presale",
              "label": "tokenomics",
              "type": "t_struct(Tokenomics)4347_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4279_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4286_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4340_storage",
              "src": "contracts\\Launchpad\\Presale.sol:30"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4295_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4267_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4356_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4369_storage",
              "src": "contracts\\Launchpad\\Presale.sol:35"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4272_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4998_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:40"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4982))",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)5018_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:50"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:51"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_struct(LaunchpadAddresses)4331_storage": {
              "label": "struct LaunchPadLib.LaunchpadAddresses",
              "members": [
                {
                  "label": "pancakeSwapFactoryAddr",
                  "type": "t_address"
                },
                {
                  "label": "pancakeSwapRouterAddr",
                  "type": "t_address"
                },
                {
                  "label": "WBNBAddr",
                  "type": "t_address"
                },
                {
                  "label": "teamAddr",
                  "type": "t_address"
                },
                {
                  "label": "devAddr",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PresaleInfo)4303_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4249"
                }
              ]
            },
            "t_enum(PreSaleStatus)4249": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED"
              ]
            },
            "t_struct(ParticipationCriteria)4320_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4244"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4252"
                }
              ]
            },
            "t_enum(PresaleType)4244": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4252": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(Tokenomics)4347_storage": {
              "label": "struct LaunchPadLib.Tokenomics",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensForLocker",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(PresaleTimes)4279_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4286_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4340_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4295_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4267_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4356_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4369_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4272_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4272_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4998_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4998_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4982))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4982)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4982": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)5018_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)5018_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4982"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6782_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6782_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6979_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6979_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6979_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6956"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6913"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6953"
                }
              ]
            },
            "t_enum(Type)6956": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6913": {
              "label": "contract Locker"
            },
            "t_enum(Status)6953": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7550_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7550_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7550_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7531"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7528"
                }
              ]
            },
            "t_enum(Type)7531": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7528": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:49",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControl.sol:55"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:13",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)",
              "src": "@openzeppelin\\contracts\\access\\AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2497_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin\\contracts\\access\\IAccessControlEnumerable.sol:11",
        "inherit": [
          "IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin\\contracts\\security\\Pausable.sol:17",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin\\contracts\\security\\Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin\\contracts\\security\\Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:35",
        "version": {
          "withMetadata": "bdcd3f52387586e162475e5ab041d21457342b1510786cc25c574fa3cce36bc9",
          "withoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f",
          "linkedWithoutMetadata": "696e14ba4ca5b6d5de30fa82bca8d6facf31faef97b9ae52231b792e2fd3064f"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:38"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:40"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:42"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:43"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Burnable.sol:14",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\ERC20Pausable.sol:16",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PresetMinterPauser": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:26",
        "version": {
          "withMetadata": "d6dd253b9108c70c428551c5220fcfabcbc2109b5b7d2af12af7017c88bf1d75",
          "withoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26",
          "linkedWithoutMetadata": "3a64fdc92dd8577f83e27b103557685893f96d591e843be79cea9148dbff3e26"
        },
        "inherit": [
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20PresetMinterPauser",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\presets\\ERC20PresetMinterPauser.sol:36"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:9",
        "version": {
          "withMetadata": "6629cb775d32ca5ee7e0541dc6b952de0088d86dc357ba0cd61032e91e586223",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeMath.sol:16",
        "version": {
          "withMetadata": "666960ed80297aad076aeb2fed3082eed5e5bbbad6cfd17733d606f8ae309c3d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:30",
        "version": {
          "withMetadata": "a60c95641e0df8419a490f31c5cfe49f35960539ab5fccc7022f4a9657e03e48",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "5ab33fd4d789825ff02d05bfc8c5ad742a1046dccbd617a287d7a301c7d4772d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LPLocker": {
        "src": "contracts\\LPLocker\\LPLocker.sol:8",
        "version": {
          "withMetadata": "88ca9d399d4f12b623acf66598b70c77534f00523dedd24849a70ae9b7f8f3f7",
          "withoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c",
          "linkedWithoutMetadata": "1a2bf92ee97ca72ebbd35ad6463e63a22867fa047e13ebf17709e79b1e7f520c"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LPLocker",
            "src": "contracts\\LPLocker\\LPLocker.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LPLocker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)3997_storage",
              "src": "contracts\\LPLocker\\LPLocker.sol:13"
            }
          ],
          "types": {
            "t_struct(LockerInfo)3997_storage": {
              "label": "struct LPLocker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)3981"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)3981": {
              "label": "enum LPLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPLokcerManager": {
        "src": "contracts\\LPLocker\\LPLokcerManager.sol:12",
        "version": {
          "withMetadata": "a8f68796355f73e08bbc677c16fe317ff68a08009ce59a7bbc161b4471384193",
          "withoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a",
          "linkedWithoutMetadata": "9eb17adfea2fb078871efc9cd6343a52a131f5e8cacd6ef99cf9394e56aa4d1a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "console"
        ],
        "methods": [
          "createLPLcoker(address,address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPLokcerManager",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:15"
            },
            {
              "contract": "LPLokcerManager",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:20"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByID",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:22"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockerInfoByToken",
              "type": "t_mapping(t_address,t_struct(LockerInfo)4112_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:23"
            },
            {
              "contract": "LPLokcerManager",
              "label": "lockersListByUser",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\LPLocker\\LPLokcerManager.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(uint256 => struct LPLokcerManager.LockerInfo)"
            },
            "t_struct(LockerInfo)4112_storage": {
              "label": "struct LPLokcerManager.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "lockerAddress",
                  "type": "t_address"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(LockerInfo)4112_storage)": {
              "label": "mapping(address => struct LPLokcerManager.LockerInfo)"
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LaunchPadLib": {
        "src": "contracts\\Launchpad\\LaunchPadLib.sol:7",
        "version": {
          "withMetadata": "25b2532f7707c50a3781cbc6ffae56a138c8a244fbe062e682cc316d0d127599",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Launchpadv2": {
        "src": "contracts\\Launchpad\\Launchpadv2.sol:12",
        "version": {
          "withMetadata": "24a1c36ac09e602bf587e9f93e89ca3ed7ffb04cdc2f265ac8a75fb76b8bfc18",
          "withoutMetadata": "54426192cfc8fa7406dcb08d8c7e297f1f33702c77404e33bed9ab335d59e597",
          "linkedWithoutMetadata": "54426192cfc8fa7406dcb08d8c7e297f1f33702c77404e33bed9ab335d59e597"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "SafeMath"
        ],
        "methods": [
          "((address,address,address,address,address))",
          "createPresale((address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "whiteListUsersToStartProject(address[])",
          "updateFees(uint256,uint8)",
          "withdrawBNBs()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Launchpadv2",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "presaleCount",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "upfrontfee",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "salesFeeInPercent",
            "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Launchpadv2",
              "label": "presaleCount",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:17"
            },
            {
              "contract": "Launchpadv2",
              "label": "upfrontfee",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:18"
            },
            {
              "contract": "Launchpadv2",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:19"
            },
            {
              "contract": "Launchpadv2",
              "label": "teamAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:22"
            },
            {
              "contract": "Launchpadv2",
              "label": "devAddr",
              "type": "t_address",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:23"
            },
            {
              "contract": "Launchpadv2",
              "label": "launchpadAddresses",
              "type": "t_struct(LaunchpadAddresses)4321_storage",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:25"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByID",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:29"
            },
            {
              "contract": "Launchpadv2",
              "label": "presaleRecordByToken",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:30"
            },
            {
              "contract": "Launchpadv2",
              "label": "isUserWhitelistedToStartProject",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts\\Launchpad\\Launchpadv2.sol:31"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(LaunchpadAddresses)4321_storage": {
              "label": "struct LaunchPadLib.LaunchpadAddresses",
              "members": [
                {
                  "label": "pancakeSwapFactoryAddr",
                  "type": "t_address"
                },
                {
                  "label": "pancakeSwapRouterAddr",
                  "type": "t_address"
                },
                {
                  "label": "WBNBAddr",
                  "type": "t_address"
                },
                {
                  "label": "teamAddr",
                  "type": "t_address"
                },
                {
                  "label": "devAddr",
                  "type": "t_address"
                }
              ]
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Presale": {
        "src": "contracts\\Launchpad\\Presale.sol:13",
        "version": {
          "withMetadata": "298caaa937c68ddaa1403f4292bb6f5981e699ea080dbe597157c2b5478c90ad",
          "withoutMetadata": "0ee95d074b6be615606e2d7b2e2802ff771b9eb1383abcb5b837859510aef88d",
          "linkedWithoutMetadata": "0ee95d074b6be615606e2d7b2e2802ff771b9eb1383abcb5b837859510aef88d"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "LaunchPadLib",
          "EnumerableSet"
        ],
        "methods": [
          "(uint8,(uint256,address,uint8),(address,string,string,uint256),(uint256,uint256,uint8,uint256,address,uint256,uint8),(uint256,uint256,uint256),(uint256,uint256,uint256),(address,address,address,address,address),(bool,uint256,uint256,uint256),(bool,uint256,uint256,uint256,uint256,uint256))",
          "buyTokensOnPresale(uint256)",
          "finalizePresale()",
          "claimTokensOrARefund()",
          "chageSaleType(uint8,address,uint256)",
          "unlockTokens()",
          "unlockLPTokens()",
          "whiteListUsers(address[])",
          "removeWhiteListUsers(address[])",
          "getWhiteListUsers()",
          "getContributorsList()",
          "isWhiteListed(address)",
          "emergencyWithdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Presale",
            "src": "contracts\\Launchpad\\Presale.sol:85"
          },
          {
            "kind": "state-variable-immutable",
            "name": "master",
            "src": "contracts\\Launchpad\\Presale.sol:20"
          },
          {
            "kind": "state-variable-assignment",
            "name": "contributorCycles",
            "src": "contracts\\Launchpad\\Presale.sol:40"
          },
          {
            "kind": "state-variable-assignment",
            "name": "temaVestingCycles",
            "src": "contracts\\Launchpad\\Presale.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Presale",
              "label": "whiteListedUsers",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:17"
            },
            {
              "contract": "Presale",
              "label": "contributorsList",
              "type": "t_struct(AddressSet)2497_storage",
              "src": "contracts\\Launchpad\\Presale.sol:18"
            },
            {
              "contract": "Presale",
              "label": "salesFeeInPercent",
              "type": "t_uint8",
              "src": "contracts\\Launchpad\\Presale.sol:22"
            },
            {
              "contract": "Presale",
              "label": "launchpadAddresses",
              "type": "t_struct(LaunchpadAddresses)4321_storage",
              "src": "contracts\\Launchpad\\Presale.sol:23"
            },
            {
              "contract": "Presale",
              "label": "presaleInfo",
              "type": "t_struct(PresaleInfo)4293_storage",
              "src": "contracts\\Launchpad\\Presale.sol:24"
            },
            {
              "contract": "Presale",
              "label": "participationCriteria",
              "type": "t_struct(ParticipationCriteria)4310_storage",
              "src": "contracts\\Launchpad\\Presale.sol:25"
            },
            {
              "contract": "Presale",
              "label": "tokenomics",
              "type": "t_struct(Tokenomics)4337_storage",
              "src": "contracts\\Launchpad\\Presale.sol:26"
            },
            {
              "contract": "Presale",
              "label": "presaleTimes",
              "type": "t_struct(PresaleTimes)4269_storage",
              "src": "contracts\\Launchpad\\Presale.sol:27"
            },
            {
              "contract": "Presale",
              "label": "reqestedTokens",
              "type": "t_struct(ReqestedTokens)4276_storage",
              "src": "contracts\\Launchpad\\Presale.sol:29"
            },
            {
              "contract": "Presale",
              "label": "tokenInfo",
              "type": "t_struct(TokenInfo)4330_storage",
              "src": "contracts\\Launchpad\\Presale.sol:30"
            },
            {
              "contract": "Presale",
              "label": "presaleCounts",
              "type": "t_struct(PresalectCounts)4285_storage",
              "src": "contracts\\Launchpad\\Presale.sol:31"
            },
            {
              "contract": "Presale",
              "label": "internalData",
              "type": "t_struct(InternalData)4257_storage",
              "src": "contracts\\Launchpad\\Presale.sol:32"
            },
            {
              "contract": "Presale",
              "label": "contributorsVesting",
              "type": "t_struct(ContributorsVesting)4346_storage",
              "src": "contracts\\Launchpad\\Presale.sol:34"
            },
            {
              "contract": "Presale",
              "label": "teamVesting",
              "type": "t_struct(TeamVesting)4359_storage",
              "src": "contracts\\Launchpad\\Presale.sol:35"
            },
            {
              "contract": "Presale",
              "label": "participant",
              "type": "t_mapping(t_address,t_struct(Participant)4262_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:37"
            },
            {
              "contract": "Presale",
              "label": "contributorVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4975_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:39"
            },
            {
              "contract": "Presale",
              "label": "contributorCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:40"
            },
            {
              "contract": "Presale",
              "label": "releaseStatus",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4959))",
              "src": "contracts\\Launchpad\\Presale.sol:42"
            },
            {
              "contract": "Presale",
              "label": "teamVestingRecord",
              "type": "t_mapping(t_uint256,t_struct(TeamVestingRecord)4995_storage)",
              "src": "contracts\\Launchpad\\Presale.sol:50"
            },
            {
              "contract": "Presale",
              "label": "temaVestingCycles",
              "type": "t_uint256",
              "src": "contracts\\Launchpad\\Presale.sol:51"
            }
          ],
          "types": {
            "t_struct(AddressSet)2497_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2196_storage"
                }
              ]
            },
            "t_struct(Set)2196_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_struct(LaunchpadAddresses)4321_storage": {
              "label": "struct LaunchPadLib.LaunchpadAddresses",
              "members": [
                {
                  "label": "pancakeSwapFactoryAddr",
                  "type": "t_address"
                },
                {
                  "label": "pancakeSwapRouterAddr",
                  "type": "t_address"
                },
                {
                  "label": "WBNBAddr",
                  "type": "t_address"
                },
                {
                  "label": "teamAddr",
                  "type": "t_address"
                },
                {
                  "label": "devAddr",
                  "type": "t_address"
                }
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PresaleInfo)4293_storage": {
              "label": "struct LaunchPadLib.PresaleInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "presaleOwner",
                  "type": "t_address"
                },
                {
                  "label": "preSaleStatus",
                  "type": "t_enum(PreSaleStatus)4239"
                }
              ]
            },
            "t_enum(PreSaleStatus)4239": {
              "label": "enum LaunchPadLib.PreSaleStatus",
              "members": [
                "PENDING",
                "INPROGRESS",
                "SUCCEED",
                "FAILED"
              ]
            },
            "t_struct(ParticipationCriteria)4310_storage": {
              "label": "struct LaunchPadLib.ParticipationCriteria",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "typeOfPresale",
                  "type": "t_enum(PresaleType)4234"
                },
                {
                  "label": "priceOfEachToken",
                  "type": "t_uint256"
                },
                {
                  "label": "criteriaToken",
                  "type": "t_address"
                },
                {
                  "label": "minTokensForParticipation",
                  "type": "t_uint256"
                },
                {
                  "label": "refundType",
                  "type": "t_enum(RefundType)4242"
                }
              ]
            },
            "t_enum(PresaleType)4234": {
              "label": "enum LaunchPadLib.PresaleType",
              "members": [
                "PUBLIC",
                "WHITELISTED",
                "TOKENHOLDERS"
              ]
            },
            "t_enum(RefundType)4242": {
              "label": "enum LaunchPadLib.RefundType",
              "members": [
                "BURN",
                "WITHDRAW"
              ]
            },
            "t_struct(Tokenomics)4337_storage": {
              "label": "struct LaunchPadLib.Tokenomics",
              "members": [
                {
                  "label": "tokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPCForLP",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensForLocker",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(PresaleTimes)4269_storage": {
              "label": "struct LaunchPadLib.PresaleTimes",
              "members": [
                {
                  "label": "startedAt",
                  "type": "t_uint256"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint256"
                },
                {
                  "label": "lpLockupDuration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ReqestedTokens)4276_storage": {
              "label": "struct LaunchPadLib.ReqestedTokens",
              "members": [
                {
                  "label": "minTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "maxTokensReq",
                  "type": "t_uint256"
                },
                {
                  "label": "softCap",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(TokenInfo)4330_storage": {
              "label": "struct LaunchPadLib.TokenInfo",
              "members": [
                {
                  "label": "preSaleToken",
                  "type": "t_address"
                },
                {
                  "label": "name",
                  "type": "t_string_storage"
                },
                {
                  "label": "symbol",
                  "type": "t_string_storage"
                },
                {
                  "label": "decimals",
                  "type": "t_uint256"
                }
              ]
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_struct(PresalectCounts)4285_storage": {
              "label": "struct LaunchPadLib.PresalectCounts",
              "members": [
                {
                  "label": "remainingTokensForSale",
                  "type": "t_uint256"
                },
                {
                  "label": "accumulatedBalance",
                  "type": "t_uint256"
                },
                {
                  "label": "contributors",
                  "type": "t_uint256"
                },
                {
                  "label": "claimsCount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(InternalData)4257_storage": {
              "label": "struct LaunchPadLib.InternalData",
              "members": [
                {
                  "label": "totalTokensSold",
                  "type": "t_uint256"
                },
                {
                  "label": "revenueFromPresale",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensAddedToLiquidity",
                  "type": "t_uint256"
                },
                {
                  "label": "extraTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "poolShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "devTeamShareBNB",
                  "type": "t_uint256"
                },
                {
                  "label": "ownersShareBNB",
                  "type": "t_uint256"
                }
              ]
            },
            "t_struct(ContributorsVesting)4346_storage": {
              "label": "struct LaunchPadLib.ContributorsVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(TeamVesting)4359_storage": {
              "label": "struct LaunchPadLib.TeamVesting",
              "members": [
                {
                  "label": "isEnabled",
                  "type": "t_bool"
                },
                {
                  "label": "vestingTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "firstReleasePC",
                  "type": "t_uint256"
                },
                {
                  "label": "vestingPeriodOfEachCycle",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensReleaseEachCyclePC",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_address,t_struct(Participant)4262_storage)": {
              "label": "mapping(address => struct LaunchPadLib.Participant)"
            },
            "t_struct(Participant)4262_storage": {
              "label": "struct LaunchPadLib.Participant",
              "members": [
                {
                  "label": "value",
                  "type": "t_uint256"
                },
                {
                  "label": "tokens",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_struct(ContributorsVestingRecord)4975_storage)": {
              "label": "mapping(uint256 => struct Presale.ContributorsVestingRecord)"
            },
            "t_struct(ContributorsVestingRecord)4975_storage": {
              "label": "struct Presale.ContributorsVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                }
              ]
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_enum(ReleaseStatus)4959))": {
              "label": "mapping(uint256 => mapping(address => enum Presale.ReleaseStatus))"
            },
            "t_mapping(t_address,t_enum(ReleaseStatus)4959)": {
              "label": "mapping(address => enum Presale.ReleaseStatus)"
            },
            "t_enum(ReleaseStatus)4959": {
              "label": "enum Presale.ReleaseStatus",
              "members": [
                "UNRELEASED",
                "RELEASED"
              ]
            },
            "t_mapping(t_uint256,t_struct(TeamVestingRecord)4995_storage)": {
              "label": "mapping(uint256 => struct Presale.TeamVestingRecord)"
            },
            "t_struct(TeamVestingRecord)4995_storage": {
              "label": "struct Presale.TeamVestingRecord",
              "members": [
                {
                  "label": "cycle",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseTime",
                  "type": "t_uint256"
                },
                {
                  "label": "tokensPC",
                  "type": "t_uint256"
                },
                {
                  "label": "percentageToRelease",
                  "type": "t_uint256"
                },
                {
                  "label": "releaseStatus",
                  "type": "t_enum(ReleaseStatus)4959"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IPLock": {
        "src": "contracts\\Locker\\ILocker.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locker": {
        "src": "contracts\\Locker\\Locker.sol:8",
        "version": {
          "withMetadata": "c9584d1584b99b05921767bb0e4c5877ab58fbc555314dac4d55f9d889d4fddd",
          "withoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19",
          "linkedWithoutMetadata": "b86edcc3e6d283969520f8b7dd1fadb45ef41684e36ed46e21c5d86649c5ed19"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(uint256,address,address,uint256,uint256)",
          "unlockTokens(uint256)",
          "addTokenstoALocker(uint256)",
          "increaseLocktime(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Locker",
            "src": "contracts\\Locker\\Locker.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Locker",
              "label": "master",
              "type": "t_address",
              "src": "contracts\\Locker\\Locker.sol:12"
            },
            {
              "contract": "Locker",
              "label": "lockerInfo",
              "type": "t_struct(LockerInfo)6759_storage",
              "src": "contracts\\Locker\\Locker.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_struct(LockerInfo)6759_storage": {
              "label": "struct Locker.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LokcerFactory": {
        "src": "contracts\\Locker\\LokcerFactory.sol:12",
        "version": {
          "withMetadata": "d0a46aa89d0771763bc63292d3cb99e0484db7fdeb7b42830ac58fb7b5a5c048",
          "withoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a",
          "linkedWithoutMetadata": "ca50c7f2d71a1b6f64bb8d7639827926d769af08ad0ea0a5e4ab268a1557111a"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "createLcoker(uint8,address,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()",
          "setLaunchPadAddress(address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\LokcerFactory.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LokcerFactory",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:15"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:17"
            },
            {
              "contract": "LokcerFactory",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\LokcerFactory.sol:18"
            },
            {
              "contract": "LokcerFactory",
              "label": "launchpadAddress",
              "type": "t_address",
              "src": "contracts\\Locker\\LokcerFactory.sol:20"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockerInfo",
              "type": "t_mapping(t_uint256,t_struct(LockerInfo)6956_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:22"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:23"
            },
            {
              "contract": "LokcerFactory",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\LokcerFactory.sol:24"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(LockerInfo)6956_storage)": {
              "label": "mapping(uint256 => struct LokcerFactory.LockerInfo)"
            },
            "t_struct(LockerInfo)6956_storage": {
              "label": "struct LokcerFactory.LockerInfo",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)6933"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "token",
                  "type": "t_contract(IERC20)1352"
                },
                {
                  "label": "locker",
                  "type": "t_contract(Locker)6890"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)6930"
                }
              ]
            },
            "t_enum(Type)6933": {
              "label": "enum LokcerFactory.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_contract(IERC20)1352": {
              "label": "contract IERC20"
            },
            "t_contract(Locker)6890": {
              "label": "contract Locker"
            },
            "t_enum(Status)6930": {
              "label": "enum LokcerFactory.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PICNICLocker": {
        "src": "contracts\\Locker\\PICNICLocker.sol:12",
        "version": {
          "withMetadata": "8981d097a4bc1b3c18ab5b0f5bdf8c7866ee495205a16f1e6a76c96b0e293c4c",
          "withoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd",
          "linkedWithoutMetadata": "4d2b5c207f52317c048015edf485ba44ffad1c07c06e9fb9b360c47d0c282bdd"
        },
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "lockTokens(uint8,address,uint256,uint256)",
          "unlockTokens(uint256,uint256)",
          "addTokenstoALocker(uint256,uint256)",
          "increaseLocktime(uint256,uint256)",
          "getLockersListbyUser(address)",
          "getLockersListbyToken(address)",
          "updateFees(uint256,uint256)",
          "withdrawFunds()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "updateLokcerFee",
            "src": "contracts\\Locker\\PICNICLocker.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "PICNICLocker",
              "label": "lockerCount",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:15"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:17"
            },
            {
              "contract": "PICNICLocker",
              "label": "updateLokcerFee",
              "type": "t_uint256",
              "src": "contracts\\Locker\\PICNICLocker.sol:18"
            },
            {
              "contract": "PICNICLocker",
              "label": "loker",
              "type": "t_mapping(t_uint256,t_struct(Loker)7527_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:20"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByTokenAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:21"
            },
            {
              "contract": "PICNICLocker",
              "label": "lockersListByUserAddress",
              "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)",
              "src": "contracts\\Locker\\PICNICLocker.sol:22"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_struct(Loker)7527_storage)": {
              "label": "mapping(uint256 => struct PICNICLocker.Loker)"
            },
            "t_struct(Loker)7527_storage": {
              "label": "struct PICNICLocker.Loker",
              "members": [
                {
                  "label": "id",
                  "type": "t_uint256"
                },
                {
                  "label": "_type",
                  "type": "t_enum(Type)7508"
                },
                {
                  "label": "owner",
                  "type": "t_address"
                },
                {
                  "label": "tokenAddress",
                  "type": "t_address"
                },
                {
                  "label": "numOfTokens",
                  "type": "t_uint256"
                },
                {
                  "label": "lockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "unlockTime",
                  "type": "t_uint256"
                },
                {
                  "label": "status",
                  "type": "t_enum(Status)7505"
                }
              ]
            },
            "t_enum(Type)7508": {
              "label": "enum PICNICLocker.Type",
              "members": [
                "TOKEN",
                "LPTOKEN"
              ]
            },
            "t_address": {
              "label": "address"
            },
            "t_enum(Status)7505": {
              "label": "enum PICNICLocker.Status",
              "members": [
                "LOCKED",
                "WITHDRAWED"
              ]
            },
            "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
              "label": "mapping(address => uint256[])"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "BEP20": {
        "src": "contracts\\helpers\\BEP20.sol:6",
        "version": {
          "withMetadata": "b4d8de5b7e1ceee237c3d3f8bc80334df57191cc5d2f355528213cd3a8a6a7d4",
          "withoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d",
          "linkedWithoutMetadata": "f9ea4716da688a02c5ce626b41c819d80132f43e6ee998724e539e483eb7c85d"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BEP20",
            "src": "contracts\\helpers\\BEP20.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PICNICToken": {
        "src": "contracts\\helpers\\PICNICToken.sol:6",
        "version": {
          "withMetadata": "e84edbd9ddb83a862d4c885bad1f754252a86349772c0ff575782430b2ccab64",
          "withoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0",
          "linkedWithoutMetadata": "d0baaacf7e27061face1a17e533d88135e680b43e10211122cf91f699620ceb0"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PICNICToken",
            "src": "contracts\\helpers\\PICNICToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PresaleToken": {
        "src": "contracts\\helpers\\PresaleToken.sol:6",
        "version": {
          "withMetadata": "8873db6f5d0645b86cc09a12854044fb2542fb6ec3b397bb08ca285265dc8e09",
          "withoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92",
          "linkedWithoutMetadata": "00df84b28145ce1f606fa641fa9737fca697886659dc182ef08c15979d645b92"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PresaleToken",
            "src": "contracts\\helpers\\PresaleToken.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TestCoin": {
        "src": "contracts\\helpers\\TestCoin.sol:6",
        "version": {
          "withMetadata": "57600a6b087a697154209cd6d1907a01e370feab6ab5eb78d83bf0d9b2c8ef22",
          "withoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371",
          "linkedWithoutMetadata": "36ad1282fa2fc8b0b2a6d06f800907a73e334de9fc78c5742447b0488aad7371"
        },
        "inherit": [
          "ERC20PresetMinterPauser",
          "ERC20Pausable",
          "Pausable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControlEnumerable",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestCoin",
            "src": "contracts\\helpers\\TestCoin.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat\\console.sol:4",
        "version": {
          "withMetadata": "7834e21e0ea33e4c3a2f819edbce6a8f6846480e90375055f200ce665697b279",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "WETH9": {
        "src": "contracts\\helpers\\WETH9.sol:3",
        "version": {
          "withMetadata": "a8b4484eab9fdc9379db46c18bea1d55461f00027eeacd252885c9969fa3bd73",
          "withoutMetadata": "235cc5eeef0ea279499accd67d8334acf018355973ba92ce3ddecfd1ad9f75c6",
          "linkedWithoutMetadata": "235cc5eeef0ea279499accd67d8334acf018355973ba92ce3ddecfd1ad9f75c6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)",
          "totalSupply()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "name",
            "src": "contracts\\helpers\\WETH9.sol:4"
          },
          {
            "kind": "state-variable-assignment",
            "name": "symbol",
            "src": "contracts\\helpers\\WETH9.sol:5"
          },
          {
            "kind": "state-variable-assignment",
            "name": "decimals",
            "src": "contracts\\helpers\\WETH9.sol:6"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETH9",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts\\helpers\\WETH9.sol:4"
            },
            {
              "contract": "WETH9",
              "label": "symbol",
              "type": "t_string_storage",
              "src": "contracts\\helpers\\WETH9.sol:5"
            },
            {
              "contract": "WETH9",
              "label": "decimals",
              "type": "t_uint8",
              "src": "contracts\\helpers\\WETH9.sol:6"
            },
            {
              "contract": "WETH9",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts\\helpers\\WETH9.sol:13"
            },
            {
              "contract": "WETH9",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts\\helpers\\WETH9.sol:14"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "TransferHelper": {
        "src": "@uniswap\\lib\\contracts\\libraries\\TransferHelper.sol:6",
        "version": {
          "withMetadata": "7f8d4df42adeaa7abe6f40953a4a7dd8ca0c2f76ec0cf8b7b63401427a41a622",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\UniswapV2Router02.sol:12",
        "version": {
          "withMetadata": "5506f090d3b7979dd821c844e68b443595aee32865f17d7c68e5eff9af9b3e4a",
          "withoutMetadata": "8c6001ae7150d2a7318843c0f466a76d6ca8525e9d69825d89857e69addbedb3",
          "linkedWithoutMetadata": "8c6001ae7150d2a7318843c0f466a76d6ca8525e9d69825d89857e69addbedb3"
        },
        "inherit": [
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMath",
          "UniswapV2Library",
          "TransferHelper"
        ],
        "methods": [
          "(address,address)",
          "()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02",
            "src": "@uniswap\\v2-periphery\\contracts\\UniswapV2Router02.sol:23"
          },
          {
            "kind": "state-variable-immutable",
            "name": "factory",
            "src": "@uniswap\\v2-periphery\\contracts\\UniswapV2Router02.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "WETH",
            "src": "@uniswap\\v2-periphery\\contracts\\UniswapV2Router02.sol:16"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router01": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router01.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "WETH()",
          "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)",
          "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)",
          "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokens(uint256,address[],address,uint256)",
          "swapTokensForExactETH(uint256,uint256,address[],address,uint256)",
          "swapExactTokensForETH(uint256,uint256,address[],address,uint256)",
          "swapETHForExactTokens(uint256,address[],address,uint256)",
          "quote(uint256,uint256,uint256)",
          "getAmountOut(uint256,uint256,uint256)",
          "getAmountIn(uint256,uint256,uint256)",
          "getAmountsOut(uint256,address[])",
          "getAmountsIn(uint256,address[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Router02": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IUniswapV2Router02.sol:5",
        "inherit": [
          "IUniswapV2Router01"
        ],
        "libraries": [],
        "methods": [
          "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)",
          "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)",
          "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",
          "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)",
          "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETH": {
        "src": "@uniswap\\v2-periphery\\contracts\\interfaces\\IWETH.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "transfer(address,uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@uniswap\\v2-periphery\\contracts\\libraries\\SafeMath.sol:5",
        "version": {
          "withMetadata": "38bc4747c1aba1927320d05c26de8be47347380df819c68cc931b86263d69fea",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Library": {
        "src": "@uniswap\\v2-periphery\\contracts\\libraries\\UniswapV2Library.sol:8",
        "version": {
          "withMetadata": "b8ef8586db3b811eae4ed563bab01a5321596e08738fcd8608ca1b03a9b1c4c5",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Router02Clone": {
        "src": "contracts\\helpers\\UniswapV2Router02Clone.sol:6",
        "version": {
          "withMetadata": "53093927066ca081988078471364ea5e2ac2214d50876d4a5f7bff73f0a707e1",
          "withoutMetadata": "8c6001ae7150d2a7318843c0f466a76d6ca8525e9d69825d89857e69addbedb3",
          "linkedWithoutMetadata": "8c6001ae7150d2a7318843c0f466a76d6ca8525e9d69825d89857e69addbedb3"
        },
        "inherit": [
          "UniswapV2Router02",
          "IUniswapV2Router02",
          "IUniswapV2Router01"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Router02Clone",
            "src": "contracts\\helpers\\UniswapV2Router02Clone.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "UniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\UniswapV2ERC20.sol:6",
        "version": {
          "withMetadata": "8f9b187aab91bde54c0b05eeef3244eeedfc5a980f6b422d7e97a9bbb5689fdf",
          "withoutMetadata": "8f9b187aab91bde54c0b05eeef3244eeedfc5a980f6b422d7e97a9bbb5689fdf",
          "linkedWithoutMetadata": "8f9b187aab91bde54c0b05eeef3244eeedfc5a980f6b422d7e97a9bbb5689fdf"
        },
        "inherit": [
          "IUniswapV2ERC20"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "()",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2ERC20",
            "src": "@uniswap\\v2-core\\contracts\\UniswapV2ERC20.sol:24"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2ERC20",
              "label": "totalSupply",
              "type": "t_uint256",
              "src": "@uniswap\\v2-core\\contracts\\UniswapV2ERC20.sol:12"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "balanceOf",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@uniswap\\v2-core\\contracts\\UniswapV2ERC20.sol:13"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@uniswap\\v2-core\\contracts\\UniswapV2ERC20.sol:14"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "DOMAIN_SEPARATOR",
              "type": "t_bytes32",
              "src": "@uniswap\\v2-core\\contracts\\UniswapV2ERC20.sol:16"
            },
            {
              "contract": "UniswapV2ERC20",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@uniswap\\v2-core\\contracts\\UniswapV2ERC20.sol:19"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\UniswapV2Factory.sol:6",
        "version": {
          "withMetadata": "7fbddd00a26f5da4479c00dcb787ef3aa34c6ab7eb4cde35a0fe42c0e0e0ca84",
          "withoutMetadata": "4bad53e9a70b344a47d6cd4afeb0c5517c7766a52a47bbe416e6fec4bde87895",
          "linkedWithoutMetadata": "4bad53e9a70b344a47d6cd4afeb0c5517c7766a52a47bbe416e6fec4bde87895"
        },
        "inherit": [
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Factory",
            "src": "@uniswap\\v2-core\\contracts\\UniswapV2Factory.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Factory",
              "label": "feeTo",
              "type": "t_address",
              "src": "@uniswap\\v2-core\\contracts\\UniswapV2Factory.sol:7"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "feeToSetter",
              "type": "t_address",
              "src": "@uniswap\\v2-core\\contracts\\UniswapV2Factory.sol:8"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "getPair",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "@uniswap\\v2-core\\contracts\\UniswapV2Factory.sol:10"
            },
            {
              "contract": "UniswapV2Factory",
              "label": "allPairs",
              "type": "t_array(t_address)dyn_storage",
              "src": "@uniswap\\v2-core\\contracts\\UniswapV2Factory.sol:11"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\UniswapV2Pair.sol:11",
        "version": {
          "withMetadata": "e699c2c70a1e9ca16c58b40782745b5d609738b755845b6ee18a18d21352f753",
          "withoutMetadata": "e699c2c70a1e9ca16c58b40782745b5d609738b755845b6ee18a18d21352f753",
          "linkedWithoutMetadata": "e699c2c70a1e9ca16c58b40782745b5d609738b755845b6ee18a18d21352f753"
        },
        "inherit": [
          "UniswapV2ERC20",
          "IUniswapV2ERC20",
          "IUniswapV2Pair"
        ],
        "libraries": [
          "SafeMath",
          "UQ112x112",
          "Math"
        ],
        "methods": [
          "getReserves()",
          "()",
          "initialize(address,address)",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2Pair",
            "src": "@uniswap\\v2-core\\contracts\\UniswapV2Pair.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "unlocked",
            "src": "@uniswap\\v2-core\\contracts\\UniswapV2Pair.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UniswapV2Pair",
              "label": "factory",
              "type": "t_address",
              "src": "@uniswap\\v2-core\\contracts\\UniswapV2Pair.sol:18"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token0",
              "type": "t_address",
              "src": "@uniswap\\v2-core\\contracts\\UniswapV2Pair.sol:19"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "token1",
              "type": "t_address",
              "src": "@uniswap\\v2-core\\contracts\\UniswapV2Pair.sol:20"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve0",
              "type": "t_uint112",
              "src": "@uniswap\\v2-core\\contracts\\UniswapV2Pair.sol:22"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "reserve1",
              "type": "t_uint112",
              "src": "@uniswap\\v2-core\\contracts\\UniswapV2Pair.sol:23"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "blockTimestampLast",
              "type": "t_uint32",
              "src": "@uniswap\\v2-core\\contracts\\UniswapV2Pair.sol:24"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price0CumulativeLast",
              "type": "t_uint256",
              "src": "@uniswap\\v2-core\\contracts\\UniswapV2Pair.sol:26"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "price1CumulativeLast",
              "type": "t_uint256",
              "src": "@uniswap\\v2-core\\contracts\\UniswapV2Pair.sol:27"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "kLast",
              "type": "t_uint256",
              "src": "@uniswap\\v2-core\\contracts\\UniswapV2Pair.sol:28"
            },
            {
              "contract": "UniswapV2Pair",
              "label": "unlocked",
              "type": "t_uint256",
              "src": "@uniswap\\v2-core\\contracts\\UniswapV2Pair.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint112": {
              "label": "uint112"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Callee": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Callee.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "uniswapV2Call(address,uint256,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2ERC20": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2ERC20.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Factory": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Factory.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "feeTo()",
          "feeToSetter()",
          "getPair(address,address)",
          "allPairs(uint256)",
          "allPairsLength()",
          "createPair(address,address)",
          "setFeeTo(address)",
          "setFeeToSetter(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV2Pair": {
        "src": "@uniswap\\v2-core\\contracts\\interfaces\\IUniswapV2Pair.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@uniswap\\v2-core\\contracts\\libraries\\Math.sol:5",
        "version": {
          "withMetadata": "79fc2af876d2b2b2c1a400605aa47c3266ab497ff08263f055b53b1b2b70d035",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@uniswap\\v2-core\\contracts\\libraries\\SafeMath.sol:5",
        "version": {
          "withMetadata": "190b4a1ae32cabed7a45e36430a6f1d0659c67fdd3db3803f9e217f5f0135430",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UQ112x112": {
        "src": "@uniswap\\v2-core\\contracts\\libraries\\UQ112x112.sol:8",
        "version": {
          "withMetadata": "9f61052fa12c21e6264b636010d0e726758a509a7e653d4033b55fa410cae0ef",
          "withoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b",
          "linkedWithoutMetadata": "84fb217c68f538a0f01a573a7f9b991a4d3395eb699ba1c1542256b37f46c48b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2FactoryClone": {
        "src": "contracts\\helpers\\UniswapV2FactoryClone.sol:7",
        "version": {
          "withMetadata": "9385cf208f24acdb4f8eb3775d094ccbc89044a30a7544697e0b08c2e8ed038c",
          "withoutMetadata": "5dbaef308dbe040949ded80932cff6c962ff59ede0520a39b26998d4cf91b493",
          "linkedWithoutMetadata": "5dbaef308dbe040949ded80932cff6c962ff59ede0520a39b26998d4cf91b493"
        },
        "inherit": [
          "UniswapV2Factory",
          "IUniswapV2Factory"
        ],
        "libraries": [],
        "methods": [
          "(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UniswapV2FactoryClone",
            "src": "contracts\\helpers\\UniswapV2FactoryClone.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UniswapV2PairClone": {
        "src": "contracts\\helpers\\UniswapV2PairClone.sol:7",
        "version": {
          "withMetadata": "24e572e7dd5ed0d31f065130c1b58697a3ef4f30bde4970923e0fcf0d607d224",
          "withoutMetadata": "24e572e7dd5ed0d31f065130c1b58697a3ef4f30bde4970923e0fcf0d607d224",
          "linkedWithoutMetadata": "24e572e7dd5ed0d31f065130c1b58697a3ef4f30bde4970923e0fcf0d607d224"
        },
        "inherit": [
          "UniswapV2Pair",
          "UniswapV2ERC20",
          "IUniswapV2ERC20",
          "IUniswapV2Pair"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}