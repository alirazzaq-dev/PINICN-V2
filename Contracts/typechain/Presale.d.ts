/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PresaleInterface extends ethers.utils.Interface {
  functions: {
    "buyTokensOnPresale(uint256)": FunctionFragment;
    "chageSaleType(uint8,address,uint256)": FunctionFragment;
    "claimTokensOrARefund()": FunctionFragment;
    "finalizePresale()": FunctionFragment;
    "internalData()": FunctionFragment;
    "launchpadAddresses()": FunctionFragment;
    "owner()": FunctionFragment;
    "participant(address)": FunctionFragment;
    "participationCriteria()": FunctionFragment;
    "preSaleStatus()": FunctionFragment;
    "presaleCounts()": FunctionFragment;
    "presaleInfo()": FunctionFragment;
    "refundType()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "salesFeeInPercent()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlockLPTokens()": FunctionFragment;
    "unlockTokens()": FunctionFragment;
    "whiteListUsers(address[])": FunctionFragment;
    "withdrawExtraTokens()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buyTokensOnPresale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chageSaleType",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokensOrARefund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalizePresale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "internalData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "launchpadAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "participant", values: [string]): string;
  encodeFunctionData(
    functionFragment: "participationCriteria",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "preSaleStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "presaleCounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "presaleInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refundType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "salesFeeInPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockLPTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unlockTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whiteListUsers",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawExtraTokens",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "buyTokensOnPresale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chageSaleType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTokensOrARefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizePresale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "internalData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "launchpadAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "participant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "participationCriteria",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preSaleStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "presaleCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "presaleInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refundType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "salesFeeInPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockLPTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whiteListUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawExtraTokens",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class Presale extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PresaleInterface;

  functions: {
    buyTokensOnPresale(
      _numOfTokensRequested: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    chageSaleType(
      _type: BigNumberish,
      _address: string,
      minimumTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimTokensOrARefund(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finalizePresale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    internalData(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        totalTokensSold: BigNumber;
        revenueFromPresale: BigNumber;
        tokensAddedToLiquidity: BigNumber;
        extraTokens: BigNumber;
        poolShareBNB: BigNumber;
        devTeamShareBNB: BigNumber;
        ownersShareBNB: BigNumber;
        totalLPLocked: BigNumber;
      }
    >;

    launchpadAddresses(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string] & {
        pancakeSwapFactoryAddr: string;
        pancakeSwapRouterAddr: string;
        WBNBAddr: string;
        teamAddr: string;
        devAddr: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    participant(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        value: BigNumber;
        tokens: BigNumber;
        isWhiteListed: boolean;
      }
    >;

    participationCriteria(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        number,
        BigNumber,
        [BigNumber, BigNumber, BigNumber] & {
          minTokensReq: BigNumber;
          maxTokensReq: BigNumber;
          softCap: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          startedAt: BigNumber;
          expiredAt: BigNumber;
          lpLockupTime: BigNumber;
          tokenLockupTime: BigNumber;
        }
      ] & {
        criteriaToken: string;
        price: BigNumber;
        refundType: number;
        minTokensForParticipation: BigNumber;
        reqestedTokens: [BigNumber, BigNumber, BigNumber] & {
          minTokensReq: BigNumber;
          maxTokensReq: BigNumber;
          softCap: BigNumber;
        };
        presaleTimes: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          startedAt: BigNumber;
          expiredAt: BigNumber;
          lpLockupTime: BigNumber;
          tokenLockupTime: BigNumber;
        };
      }
    >;

    preSaleStatus(overrides?: CallOverrides): Promise<[number]>;

    presaleCounts(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        remainingTokensForSale: BigNumber;
        accumulatedBalance: BigNumber;
        contributors: BigNumber;
        claimsCount: BigNumber;
      }
    >;

    presaleInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, string, string, BigNumber, BigNumber, BigNumber] & {
        id: BigNumber;
        typeOfPresale: number;
        preSaleToken: string;
        presaleOwnerAddr: string;
        tokensForSale: BigNumber;
        reservedTokensPCForLP: BigNumber;
        tokenForLocker: BigNumber;
      }
    >;

    refundType(overrides?: CallOverrides): Promise<[number]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    salesFeeInPercent(overrides?: CallOverrides): Promise<[number]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlockLPTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlockTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whiteListUsers(
      _addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawExtraTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  buyTokensOnPresale(
    _numOfTokensRequested: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  chageSaleType(
    _type: BigNumberish,
    _address: string,
    minimumTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimTokensOrARefund(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finalizePresale(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  internalData(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      totalTokensSold: BigNumber;
      revenueFromPresale: BigNumber;
      tokensAddedToLiquidity: BigNumber;
      extraTokens: BigNumber;
      poolShareBNB: BigNumber;
      devTeamShareBNB: BigNumber;
      ownersShareBNB: BigNumber;
      totalLPLocked: BigNumber;
    }
  >;

  launchpadAddresses(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string] & {
      pancakeSwapFactoryAddr: string;
      pancakeSwapRouterAddr: string;
      WBNBAddr: string;
      teamAddr: string;
      devAddr: string;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  participant(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      value: BigNumber;
      tokens: BigNumber;
      isWhiteListed: boolean;
    }
  >;

  participationCriteria(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      number,
      BigNumber,
      [BigNumber, BigNumber, BigNumber] & {
        minTokensReq: BigNumber;
        maxTokensReq: BigNumber;
        softCap: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        startedAt: BigNumber;
        expiredAt: BigNumber;
        lpLockupTime: BigNumber;
        tokenLockupTime: BigNumber;
      }
    ] & {
      criteriaToken: string;
      price: BigNumber;
      refundType: number;
      minTokensForParticipation: BigNumber;
      reqestedTokens: [BigNumber, BigNumber, BigNumber] & {
        minTokensReq: BigNumber;
        maxTokensReq: BigNumber;
        softCap: BigNumber;
      };
      presaleTimes: [BigNumber, BigNumber, BigNumber, BigNumber] & {
        startedAt: BigNumber;
        expiredAt: BigNumber;
        lpLockupTime: BigNumber;
        tokenLockupTime: BigNumber;
      };
    }
  >;

  preSaleStatus(overrides?: CallOverrides): Promise<number>;

  presaleCounts(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      remainingTokensForSale: BigNumber;
      accumulatedBalance: BigNumber;
      contributors: BigNumber;
      claimsCount: BigNumber;
    }
  >;

  presaleInfo(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, string, string, BigNumber, BigNumber, BigNumber] & {
      id: BigNumber;
      typeOfPresale: number;
      preSaleToken: string;
      presaleOwnerAddr: string;
      tokensForSale: BigNumber;
      reservedTokensPCForLP: BigNumber;
      tokenForLocker: BigNumber;
    }
  >;

  refundType(overrides?: CallOverrides): Promise<number>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  salesFeeInPercent(overrides?: CallOverrides): Promise<number>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlockLPTokens(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlockTokens(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whiteListUsers(
    _addresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawExtraTokens(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyTokensOnPresale(
      _numOfTokensRequested: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    chageSaleType(
      _type: BigNumberish,
      _address: string,
      minimumTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimTokensOrARefund(overrides?: CallOverrides): Promise<void>;

    finalizePresale(overrides?: CallOverrides): Promise<void>;

    internalData(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        totalTokensSold: BigNumber;
        revenueFromPresale: BigNumber;
        tokensAddedToLiquidity: BigNumber;
        extraTokens: BigNumber;
        poolShareBNB: BigNumber;
        devTeamShareBNB: BigNumber;
        ownersShareBNB: BigNumber;
        totalLPLocked: BigNumber;
      }
    >;

    launchpadAddresses(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string] & {
        pancakeSwapFactoryAddr: string;
        pancakeSwapRouterAddr: string;
        WBNBAddr: string;
        teamAddr: string;
        devAddr: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    participant(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        value: BigNumber;
        tokens: BigNumber;
        isWhiteListed: boolean;
      }
    >;

    participationCriteria(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        number,
        BigNumber,
        [BigNumber, BigNumber, BigNumber] & {
          minTokensReq: BigNumber;
          maxTokensReq: BigNumber;
          softCap: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          startedAt: BigNumber;
          expiredAt: BigNumber;
          lpLockupTime: BigNumber;
          tokenLockupTime: BigNumber;
        }
      ] & {
        criteriaToken: string;
        price: BigNumber;
        refundType: number;
        minTokensForParticipation: BigNumber;
        reqestedTokens: [BigNumber, BigNumber, BigNumber] & {
          minTokensReq: BigNumber;
          maxTokensReq: BigNumber;
          softCap: BigNumber;
        };
        presaleTimes: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          startedAt: BigNumber;
          expiredAt: BigNumber;
          lpLockupTime: BigNumber;
          tokenLockupTime: BigNumber;
        };
      }
    >;

    preSaleStatus(overrides?: CallOverrides): Promise<number>;

    presaleCounts(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        remainingTokensForSale: BigNumber;
        accumulatedBalance: BigNumber;
        contributors: BigNumber;
        claimsCount: BigNumber;
      }
    >;

    presaleInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, string, string, BigNumber, BigNumber, BigNumber] & {
        id: BigNumber;
        typeOfPresale: number;
        preSaleToken: string;
        presaleOwnerAddr: string;
        tokensForSale: BigNumber;
        reservedTokensPCForLP: BigNumber;
        tokenForLocker: BigNumber;
      }
    >;

    refundType(overrides?: CallOverrides): Promise<number>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    salesFeeInPercent(overrides?: CallOverrides): Promise<number>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockLPTokens(overrides?: CallOverrides): Promise<void>;

    unlockTokens(overrides?: CallOverrides): Promise<void>;

    whiteListUsers(
      _addresses: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawExtraTokens(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    buyTokensOnPresale(
      _numOfTokensRequested: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    chageSaleType(
      _type: BigNumberish,
      _address: string,
      minimumTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimTokensOrARefund(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finalizePresale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    internalData(overrides?: CallOverrides): Promise<BigNumber>;

    launchpadAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    participant(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    participationCriteria(overrides?: CallOverrides): Promise<BigNumber>;

    preSaleStatus(overrides?: CallOverrides): Promise<BigNumber>;

    presaleCounts(overrides?: CallOverrides): Promise<BigNumber>;

    presaleInfo(overrides?: CallOverrides): Promise<BigNumber>;

    refundType(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    salesFeeInPercent(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlockLPTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlockTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whiteListUsers(
      _addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawExtraTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyTokensOnPresale(
      _numOfTokensRequested: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    chageSaleType(
      _type: BigNumberish,
      _address: string,
      minimumTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimTokensOrARefund(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finalizePresale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    internalData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    launchpadAddresses(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    participant(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    participationCriteria(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    preSaleStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    presaleCounts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    presaleInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refundType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    salesFeeInPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlockLPTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlockTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whiteListUsers(
      _addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawExtraTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
