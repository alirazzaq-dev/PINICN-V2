/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  LPLokcerManager,
  LPLokcerManagerInterface,
} from "../LPLokcerManager";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "numOfTokens",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "unlockTime",
        type: "uint256",
      },
    ],
    name: "LPLocked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_numOfTokens",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_unlockTime",
        type: "uint256",
      },
    ],
    name: "createLPLcoker",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenAddress",
        type: "address",
      },
    ],
    name: "getLockersListbyToken",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_userAddress",
        type: "address",
      },
    ],
    name: "getLockersListbyUser",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "launchpadAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lockerCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "lockerInfo",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "numOfTokens",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lockTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "unlockTime",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610c278061007e6000396000f3fe6080604052600436106100865760003560e01c80638da5cb5b116100595780638da5cb5b146101a7578063ccd96eb6146101c5578063e73cf5a3146101e9578063f2fde38b146101fc578063fdfcad861461021c57600080fd5b8063092eeb131461008b5780634aae03d4146100c1578063715018a6146100f95780637fb0b30914610110575b600080fd5b34801561009757600080fd5b506100ab6100a636600461075c565b61023c565b6040516100b891906107f6565b60405180910390f35b3480156100cd57600080fd5b506002546100e1906001600160a01b031681565b6040516001600160a01b0390911681526020016100b8565b34801561010557600080fd5b5061010e6102a8565b005b34801561011c57600080fd5b5061016e61012b3660046107de565b600360208190526000918252604090912080546001820154600283015493830154600484015460059094015492946001600160a01b039283169492169290919086565b604080519687526001600160a01b03958616602088015293909416928501929092526060840152608083015260a082015260c0016100b8565b3480156101b357600080fd5b506000546001600160a01b03166100e1565b3480156101d157600080fd5b506101db60015481565b6040519081526020016100b8565b6101db6101f736600461077d565b610313565b34801561020857600080fd5b5061010e61021736600461075c565b6105ae565b34801561022857600080fd5b506100ab61023736600461075c565b610679565b6001600160a01b03811660009081526004602090815260409182902080548351818402810184019094528084526060939283018282801561029c57602002820191906000526020600020905b815481526020019060010190808311610288575b50505050509050919050565b6000546001600160a01b031633146103075760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61031160006106e3565b565b60008082116103645760405162461bcd60e51b815260206004820181905260248201527f54686520756e6c6f636b2074696d652073686f756c6420696e2066757475726560448201526064016102fe565b600180549060006103748361083a565b919050555060006001548686868660405161038e90610733565b9485526001600160a01b0393841660208601529290911660408401526060830152608082015260a001604051809103906000f0801580156103d3573d6000803e3d6000fd5b506040516323b872dd60e01b81526001600160a01b038881166004830152808316602483015260448201879052919250908616906323b872dd90606401602060405180830381600087803b15801561042a57600080fd5b505af115801561043e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046291906107be565b506040805160c081018252600180548083526001600160a01b03808b1660208086018281528c8416878901818152606089018e81524260808b0190815260a08b018f81526000998a5260038088528d8b209c518d5595518c8c018054918b166001600160a01b0319928316179055935160028d01805491909a169416939093179097555192890192909255935160048089019190915590516005978801559184529485528583208454815480870183559185528685209091015590825283528381208254815480850183559183529390912001919091555490517f29e5321495c5597d4a870693a37839fcdb4701140fb16138815bac7f803a0823916105999189908990899089909485526001600160a01b0393841660208601529190921660408401526060830191909152608082015260a00190565b60405180910390a15050600154949350505050565b6000546001600160a01b031633146106085760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102fe565b6001600160a01b03811661066d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102fe565b610676816106e3565b50565b6001600160a01b03811660009081526005602090815260409182902080548351818402810184019094528084526060939283018282801561029c57602002820191906000526020600020908154815260200190600101908083116102885750505050509050919050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6103908061086283390190565b80356001600160a01b038116811461075757600080fd5b919050565b60006020828403121561076d578081fd5b61077682610740565b9392505050565b60008060008060808587031215610792578283fd5b61079b85610740565b93506107a960208601610740565b93969395505050506040820135916060013590565b6000602082840312156107cf578081fd5b81518015158114610776578182fd5b6000602082840312156107ef578081fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561082e57835183529284019291840191600101610812565b50909695505050505050565b600060001982141561085a57634e487b7160e01b81526011600452602481fd5b506001019056fe608060405234801561001057600080fd5b5060405161039038038061039083398101604081905261002f91610147565b6040518060e00160405280868152602001856001600160a01b03168152602001846001600160a01b031681526020018381526020014281526020018281526020016000600181111561009157634e487b7160e01b600052602160045260246000fd5b9052805160009081556020820151600180546001600160a01b039283166001600160a01b0319918216178255604085015160028054919094169116179091556060830151600355608083015160045560a083015160055560c0830151600680549192909160ff191690838181111561011957634e487b7160e01b600052602160045260246000fd5b02179055509050505050505050610195565b80516001600160a01b038116811461014257600080fd5b919050565b600080600080600060a0868803121561015e578081fd5b8551945061016e6020870161012b565b935061017c6040870161012b565b6060870151608090970151959894975095949392505050565b6101ec806101a46000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063f968f49314610030575b600080fd5b61003861003a565b005b6001546001600160a01b031633146100995760405162461bcd60e51b815260206004820152601d60248201527f4f6e6c79206c6f636b6572206f6e77657220697320616c6c6f7765642e00000060448201526064015b60405180910390fd5b6001546001600160a01b031633146100f35760405162461bcd60e51b815260206004820152601d60248201527f4f6e6c79206c6f636b6572206f6e77657220697320616c6c6f7765642e0000006044820152606401610090565b60025460015460035460405163a9059cbb60e01b81526001600160a01b039283166004820152602481019190915291169063a9059cbb90604401602060405180830381600087803b15801561014757600080fd5b505af115801561015b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017f919061018f565b506006805460ff19166001179055565b6000602082840312156101a0578081fd5b815180151581146101af578182fd5b939250505056fea264697066735822122098dea92bca2f3d7138dbfe9a26ec1be787de718e3ca84ff927c07295417cb1af64736f6c63430008040033a26469706673582212205ab0bdeb36611d3521773892c0b6169c5e64d2c37d8a38f00559aa3848fa7ff064736f6c63430008040033";

export class LPLokcerManager__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LPLokcerManager> {
    return super.deploy(overrides || {}) as Promise<LPLokcerManager>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): LPLokcerManager {
    return super.attach(address) as LPLokcerManager;
  }
  connect(signer: Signer): LPLokcerManager__factory {
    return super.connect(signer) as LPLokcerManager__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LPLokcerManagerInterface {
    return new utils.Interface(_abi) as LPLokcerManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LPLokcerManager {
    return new Contract(address, _abi, signerOrProvider) as LPLokcerManager;
  }
}
